/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/uikit/dist/js/uikit.js":
/*!*********************************************!*\
  !*** ./node_modules/uikit/dist/js/uikit.js ***!
  \*********************************************/
/***/ (function(module) {

eval("/*! UIkit 3.11.1 | https://www.getuikit.com | (c) 2014 - 2022 YOOtheme | MIT License */\n(function (global, factory) {\n   true ? module.exports = factory() : 0;\n})(this, function () {\n  'use strict';\n\n  var objPrototype = Object.prototype;\n  var hasOwnProperty = objPrototype.hasOwnProperty;\n\n  function hasOwn(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  }\n\n  var hyphenateRe = /\\B([A-Z])/g;\n  var hyphenate = memoize(function (str) {\n    return str.replace(hyphenateRe, '-$1').toLowerCase();\n  });\n  var camelizeRe = /-(\\w)/g;\n  var camelize = memoize(function (str) {\n    return str.replace(camelizeRe, toUpper);\n  });\n  var ucfirst = memoize(function (str) {\n    return str.length ? toUpper(null, str.charAt(0)) + str.slice(1) : '';\n  });\n\n  function toUpper(_, c) {\n    return c ? c.toUpperCase() : '';\n  }\n\n  var strPrototype = String.prototype;\n\n  var startsWithFn = strPrototype.startsWith || function (search) {\n    return this.lastIndexOf(search, 0) === 0;\n  };\n\n  function startsWith(str, search) {\n    return startsWithFn.call(str, search);\n  }\n\n  var endsWithFn = strPrototype.endsWith || function (search) {\n    return this.substr(-search.length) === search;\n  };\n\n  function endsWith(str, search) {\n    return endsWithFn.call(str, search);\n  }\n\n  var arrPrototype = Array.prototype;\n\n  var includesFn = function (search, i) {\n    return !!~this.indexOf(search, i);\n  };\n\n  var includesStr = strPrototype.includes || includesFn;\n  var includesArray = arrPrototype.includes || includesFn;\n\n  function includes(obj, search) {\n    return obj && (isString(obj) ? includesStr : includesArray).call(obj, search);\n  }\n\n  var findIndexFn = arrPrototype.findIndex || function (predicate) {\n    var arguments$1 = arguments;\n\n    for (var i = 0; i < this.length; i++) {\n      if (predicate.call(arguments$1[1], this[i], i, this)) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  function findIndex(array, predicate) {\n    return findIndexFn.call(array, predicate);\n  }\n\n  var isArray = Array.isArray;\n\n  function isFunction(obj) {\n    return typeof obj === 'function';\n  }\n\n  function isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n  }\n\n  var toString = objPrototype.toString;\n\n  function isPlainObject(obj) {\n    return toString.call(obj) === '[object Object]';\n  }\n\n  function isWindow(obj) {\n    return isObject(obj) && obj === obj.window;\n  }\n\n  function isDocument(obj) {\n    return nodeType(obj) === 9;\n  }\n\n  function isNode(obj) {\n    return nodeType(obj) >= 1;\n  }\n\n  function isElement(obj) {\n    return nodeType(obj) === 1;\n  }\n\n  function nodeType(obj) {\n    return !isWindow(obj) && isObject(obj) && obj.nodeType;\n  }\n\n  function isBoolean(value) {\n    return typeof value === 'boolean';\n  }\n\n  function isString(value) {\n    return typeof value === 'string';\n  }\n\n  function isNumber(value) {\n    return typeof value === 'number';\n  }\n\n  function isNumeric(value) {\n    return isNumber(value) || isString(value) && !isNaN(value - parseFloat(value));\n  }\n\n  function isEmpty(obj) {\n    return !(isArray(obj) ? obj.length : isObject(obj) ? Object.keys(obj).length : false);\n  }\n\n  function isUndefined(value) {\n    return value === void 0;\n  }\n\n  function toBoolean(value) {\n    return isBoolean(value) ? value : value === 'true' || value === '1' || value === '' ? true : value === 'false' || value === '0' ? false : value;\n  }\n\n  function toNumber(value) {\n    var number = Number(value);\n    return isNaN(number) ? false : number;\n  }\n\n  function toFloat(value) {\n    return parseFloat(value) || 0;\n  }\n\n  var toArray = Array.from || function (value) {\n    return arrPrototype.slice.call(value);\n  };\n\n  function toNode(element) {\n    return toNodes(element)[0];\n  }\n\n  function toNodes(element) {\n    return element && (isNode(element) ? [element] : toArray(element).filter(isNode)) || [];\n  }\n\n  function toWindow(element) {\n    if (isWindow(element)) {\n      return element;\n    }\n\n    element = toNode(element);\n    return element ? (isDocument(element) ? element : element.ownerDocument).defaultView : window;\n  }\n\n  function toMs(time) {\n    return !time ? 0 : endsWith(time, 'ms') ? toFloat(time) : toFloat(time) * 1000;\n  }\n\n  function isEqual(value, other) {\n    return value === other || isObject(value) && isObject(other) && Object.keys(value).length === Object.keys(other).length && each(value, function (val, key) {\n      return val === other[key];\n    });\n  }\n\n  function swap(value, a, b) {\n    return value.replace(new RegExp(a + \"|\" + b, 'g'), function (match) {\n      return match === a ? b : a;\n    });\n  }\n\n  var assign = Object.assign || function (target) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1];\n\n    target = Object(target);\n\n    for (var i = 0; i < args.length; i++) {\n      var source = args[i];\n\n      if (source !== null) {\n        for (var key in source) {\n          if (hasOwn(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  function last(array) {\n    return array[array.length - 1];\n  }\n\n  function each(obj, cb) {\n    for (var key in obj) {\n      if (false === cb(obj[key], key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function sortBy$1(array, prop) {\n    return array.slice().sort(function (ref, ref$1) {\n      var propA = ref[prop];\n      if (propA === void 0) propA = 0;\n      var propB = ref$1[prop];\n      if (propB === void 0) propB = 0;\n      return propA > propB ? 1 : propB > propA ? -1 : 0;\n    });\n  }\n\n  function uniqueBy(array, prop) {\n    var seen = new Set();\n    return array.filter(function (ref) {\n      var check = ref[prop];\n      return seen.has(check) ? false : seen.add(check) || true;\n    } // IE 11 does not return the Set object\n    );\n  }\n\n  function clamp(number, min, max) {\n    if (min === void 0) min = 0;\n    if (max === void 0) max = 1;\n    return Math.min(Math.max(toNumber(number) || 0, min), max);\n  }\n\n  function noop() {}\n\n  function intersectRect() {\n    var rects = [],\n        len = arguments.length;\n\n    while (len--) rects[len] = arguments[len];\n\n    return [['bottom', 'top'], ['right', 'left']].every(function (ref) {\n      var minProp = ref[0];\n      var maxProp = ref[1];\n      return Math.min.apply(Math, rects.map(function (ref) {\n        var min = ref[minProp];\n        return min;\n      })) - Math.max.apply(Math, rects.map(function (ref) {\n        var max = ref[maxProp];\n        return max;\n      })) > 0;\n    });\n  }\n\n  function pointInRect(point, rect) {\n    return point.x <= rect.right && point.x >= rect.left && point.y <= rect.bottom && point.y >= rect.top;\n  }\n\n  var Dimensions = {\n    ratio: function (dimensions, prop, value) {\n      var obj;\n      var aProp = prop === 'width' ? 'height' : 'width';\n      return obj = {}, obj[aProp] = dimensions[prop] ? Math.round(value * dimensions[aProp] / dimensions[prop]) : dimensions[aProp], obj[prop] = value, obj;\n    },\n    contain: function (dimensions, maxDimensions) {\n      var this$1$1 = this;\n      dimensions = assign({}, dimensions);\n      each(dimensions, function (_, prop) {\n        return dimensions = dimensions[prop] > maxDimensions[prop] ? this$1$1.ratio(dimensions, prop, maxDimensions[prop]) : dimensions;\n      });\n      return dimensions;\n    },\n    cover: function (dimensions, maxDimensions) {\n      var this$1$1 = this;\n      dimensions = this.contain(dimensions, maxDimensions);\n      each(dimensions, function (_, prop) {\n        return dimensions = dimensions[prop] < maxDimensions[prop] ? this$1$1.ratio(dimensions, prop, maxDimensions[prop]) : dimensions;\n      });\n      return dimensions;\n    }\n  };\n\n  function getIndex(i, elements, current, finite) {\n    if (current === void 0) current = 0;\n    if (finite === void 0) finite = false;\n    elements = toNodes(elements);\n    var length = elements.length;\n\n    if (!length) {\n      return -1;\n    }\n\n    i = isNumeric(i) ? toNumber(i) : i === 'next' ? current + 1 : i === 'previous' ? current - 1 : elements.indexOf(toNode(i));\n\n    if (finite) {\n      return clamp(i, 0, length - 1);\n    }\n\n    i %= length;\n    return i < 0 ? i + length : i;\n  }\n\n  function memoize(fn) {\n    var cache = Object.create(null);\n    return function (key) {\n      return cache[key] || (cache[key] = fn(key));\n    };\n  }\n\n  function attr(element, name, value) {\n    if (isObject(name)) {\n      for (var key in name) {\n        attr(element, key, name[key]);\n      }\n\n      return;\n    }\n\n    if (isUndefined(value)) {\n      element = toNode(element);\n      return element && element.getAttribute(name);\n    } else {\n      toNodes(element).forEach(function (element) {\n        if (isFunction(value)) {\n          value = value.call(element, attr(element, name));\n        }\n\n        if (value === null) {\n          removeAttr(element, name);\n        } else {\n          element.setAttribute(name, value);\n        }\n      });\n    }\n  }\n\n  function hasAttr(element, name) {\n    return toNodes(element).some(function (element) {\n      return element.hasAttribute(name);\n    });\n  }\n\n  function removeAttr(element, name) {\n    element = toNodes(element);\n    name.split(' ').forEach(function (name) {\n      return element.forEach(function (element) {\n        return element.hasAttribute(name) && element.removeAttribute(name);\n      });\n    });\n  }\n\n  function data(element, attribute) {\n    for (var i = 0, attrs = [attribute, \"data-\" + attribute]; i < attrs.length; i++) {\n      if (hasAttr(element, attrs[i])) {\n        return attr(element, attrs[i]);\n      }\n    }\n  }\n  /* global DocumentTouch */\n\n\n  var inBrowser = typeof window !== 'undefined';\n  var isIE = inBrowser && /msie|trident/i.test(window.navigator.userAgent);\n  var isRtl = inBrowser && attr(document.documentElement, 'dir') === 'rtl';\n  var hasTouchEvents = inBrowser && 'ontouchstart' in window;\n  var hasPointerEvents = inBrowser && window.PointerEvent;\n  var hasTouch = inBrowser && (hasTouchEvents || window.DocumentTouch && document instanceof DocumentTouch || navigator.maxTouchPoints); // IE >=11\n\n  var pointerDown = hasPointerEvents ? 'pointerdown' : hasTouchEvents ? 'touchstart' : 'mousedown';\n  var pointerMove = hasPointerEvents ? 'pointermove' : hasTouchEvents ? 'touchmove' : 'mousemove';\n  var pointerUp = hasPointerEvents ? 'pointerup' : hasTouchEvents ? 'touchend' : 'mouseup';\n  var pointerEnter = hasPointerEvents ? 'pointerenter' : hasTouchEvents ? '' : 'mouseenter';\n  var pointerLeave = hasPointerEvents ? 'pointerleave' : hasTouchEvents ? '' : 'mouseleave';\n  var pointerCancel = hasPointerEvents ? 'pointercancel' : 'touchcancel';\n  var voidElements = {\n    area: true,\n    base: true,\n    br: true,\n    col: true,\n    embed: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    menuitem: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n  };\n\n  function isVoidElement(element) {\n    return toNodes(element).some(function (element) {\n      return voidElements[element.tagName.toLowerCase()];\n    });\n  }\n\n  function isVisible(element) {\n    return toNodes(element).some(function (element) {\n      return element.offsetWidth || element.offsetHeight || element.getClientRects().length;\n    });\n  }\n\n  var selInput = 'input,select,textarea,button';\n\n  function isInput(element) {\n    return toNodes(element).some(function (element) {\n      return matches(element, selInput);\n    });\n  }\n\n  var selFocusable = selInput + \",a[href],[tabindex]\";\n\n  function isFocusable(element) {\n    return matches(element, selFocusable);\n  }\n\n  function parent(element) {\n    element = toNode(element);\n    return element && isElement(element.parentNode) && element.parentNode;\n  }\n\n  function filter$1(element, selector) {\n    return toNodes(element).filter(function (element) {\n      return matches(element, selector);\n    });\n  }\n\n  var elProto = inBrowser ? Element.prototype : {};\n  var matchesFn = elProto.matches || elProto.webkitMatchesSelector || elProto.msMatchesSelector || noop;\n\n  function matches(element, selector) {\n    return toNodes(element).some(function (element) {\n      return matchesFn.call(element, selector);\n    });\n  }\n\n  var closestFn = elProto.closest || function (selector) {\n    var ancestor = this;\n\n    do {\n      if (matches(ancestor, selector)) {\n        return ancestor;\n      }\n    } while (ancestor = parent(ancestor));\n  };\n\n  function closest(element, selector) {\n    if (startsWith(selector, '>')) {\n      selector = selector.slice(1);\n    }\n\n    return isElement(element) ? closestFn.call(element, selector) : toNodes(element).map(function (element) {\n      return closest(element, selector);\n    }).filter(Boolean);\n  }\n\n  function within(element, selector) {\n    return !isString(selector) ? element === selector || (isDocument(selector) ? selector.documentElement : toNode(selector)).contains(toNode(element)) // IE 11 document does not implement contains\n    : matches(element, selector) || !!closest(element, selector);\n  }\n\n  function parents(element, selector) {\n    var elements = [];\n\n    while (element = parent(element)) {\n      if (!selector || matches(element, selector)) {\n        elements.push(element);\n      }\n    }\n\n    return elements;\n  }\n\n  function children(element, selector) {\n    element = toNode(element);\n    var children = element ? toNodes(element.children) : [];\n    return selector ? filter$1(children, selector) : children;\n  }\n\n  function index(element, ref) {\n    return ref ? toNodes(element).indexOf(toNode(ref)) : children(parent(element)).indexOf(element);\n  }\n\n  function query(selector, context) {\n    return find(selector, getContext(selector, context));\n  }\n\n  function queryAll(selector, context) {\n    return findAll(selector, getContext(selector, context));\n  }\n\n  function getContext(selector, context) {\n    if (context === void 0) context = document;\n    return isString(selector) && isContextSelector(selector) || isDocument(context) ? context : context.ownerDocument;\n  }\n\n  function find(selector, context) {\n    return toNode(_query(selector, context, 'querySelector'));\n  }\n\n  function findAll(selector, context) {\n    return toNodes(_query(selector, context, 'querySelectorAll'));\n  }\n\n  function _query(selector, context, queryFn) {\n    if (context === void 0) context = document;\n\n    if (!selector || !isString(selector)) {\n      return selector;\n    }\n\n    selector = selector.replace(contextSanitizeRe, '$1 *');\n\n    if (isContextSelector(selector)) {\n      selector = splitSelector(selector).map(function (selector) {\n        var ctx = context;\n\n        if (selector[0] === '!') {\n          var selectors = selector.substr(1).trim().split(' ');\n          ctx = closest(parent(context), selectors[0]);\n          selector = selectors.slice(1).join(' ').trim();\n        }\n\n        if (selector[0] === '-') {\n          var selectors$1 = selector.substr(1).trim().split(' ');\n          var prev = (ctx || context).previousElementSibling;\n          ctx = matches(prev, selector.substr(1)) ? prev : null;\n          selector = selectors$1.slice(1).join(' ');\n        }\n\n        if (!ctx) {\n          return null;\n        }\n\n        return domPath(ctx) + \" \" + selector;\n      }).filter(Boolean).join(',');\n      context = document;\n    }\n\n    try {\n      return context[queryFn](selector);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  var contextSelectorRe = /(^|[^\\\\],)\\s*[!>+~-]/;\n  var contextSanitizeRe = /([!>+~-])(?=\\s+[!>+~-]|\\s*$)/g;\n  var isContextSelector = memoize(function (selector) {\n    return selector.match(contextSelectorRe);\n  });\n  var selectorRe = /.*?[^\\\\](?:,|$)/g;\n  var splitSelector = memoize(function (selector) {\n    return selector.match(selectorRe).map(function (selector) {\n      return selector.replace(/,$/, '').trim();\n    });\n  });\n\n  function domPath(element) {\n    var names = [];\n\n    while (element.parentNode) {\n      var id = attr(element, 'id');\n\n      if (id) {\n        names.unshift(\"#\" + escape(id));\n        break;\n      } else {\n        var tagName = element.tagName;\n\n        if (tagName !== 'HTML') {\n          tagName += \":nth-child(\" + (index(element) + 1) + \")\";\n        }\n\n        names.unshift(tagName);\n        element = element.parentNode;\n      }\n    }\n\n    return names.join(' > ');\n  }\n\n  var escapeFn = inBrowser && window.CSS && CSS.escape || function (css) {\n    return css.replace(/([^\\x7f-\\uFFFF\\w-])/g, function (match) {\n      return \"\\\\\" + match;\n    });\n  };\n\n  function escape(css) {\n    return isString(css) ? escapeFn.call(null, css) : '';\n  }\n\n  function on() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    var ref = getArgs(args);\n    var targets = ref[0];\n    var type = ref[1];\n    var selector = ref[2];\n    var listener = ref[3];\n    var useCapture = ref[4];\n    targets = toEventTargets(targets);\n\n    if (listener.length > 1) {\n      listener = detail(listener);\n    }\n\n    if (useCapture && useCapture.self) {\n      listener = selfFilter(listener);\n    }\n\n    if (selector) {\n      listener = delegate(selector, listener);\n    }\n\n    useCapture = useCaptureFilter(useCapture);\n    type.split(' ').forEach(function (type) {\n      return targets.forEach(function (target) {\n        return target.addEventListener(type, listener, useCapture);\n      });\n    });\n    return function () {\n      return off(targets, type, listener, useCapture);\n    };\n  }\n\n  function off(targets, type, listener, useCapture) {\n    if (useCapture === void 0) useCapture = false;\n    useCapture = useCaptureFilter(useCapture);\n    targets = toEventTargets(targets);\n    type.split(' ').forEach(function (type) {\n      return targets.forEach(function (target) {\n        return target.removeEventListener(type, listener, useCapture);\n      });\n    });\n  }\n\n  function once() {\n    var args = [],\n        len = arguments.length;\n\n    while (len--) args[len] = arguments[len];\n\n    var ref = getArgs(args);\n    var element = ref[0];\n    var type = ref[1];\n    var selector = ref[2];\n    var listener = ref[3];\n    var useCapture = ref[4];\n    var condition = ref[5];\n    var off = on(element, type, selector, function (e) {\n      var result = !condition || condition(e);\n\n      if (result) {\n        off();\n        listener(e, result);\n      }\n    }, useCapture);\n    return off;\n  }\n\n  function trigger(targets, event, detail) {\n    return toEventTargets(targets).reduce(function (notCanceled, target) {\n      return notCanceled && target.dispatchEvent(createEvent(event, true, true, detail));\n    }, true);\n  }\n\n  function createEvent(e, bubbles, cancelable, detail) {\n    if (bubbles === void 0) bubbles = true;\n    if (cancelable === void 0) cancelable = false;\n\n    if (isString(e)) {\n      var event = document.createEvent('CustomEvent'); // IE 11\n\n      event.initCustomEvent(e, bubbles, cancelable, detail);\n      e = event;\n    }\n\n    return e;\n  }\n\n  function getArgs(args) {\n    if (isFunction(args[2])) {\n      args.splice(2, 0, false);\n    }\n\n    return args;\n  }\n\n  function delegate(selector, listener) {\n    var this$1$1 = this;\n    return function (e) {\n      var current = selector[0] === '>' ? findAll(selector, e.currentTarget).reverse().filter(function (element) {\n        return within(e.target, element);\n      })[0] : closest(e.target, selector);\n\n      if (current) {\n        e.current = current;\n        listener.call(this$1$1, e);\n      }\n    };\n  }\n\n  function detail(listener) {\n    return function (e) {\n      return isArray(e.detail) ? listener.apply(void 0, [e].concat(e.detail)) : listener(e);\n    };\n  }\n\n  function selfFilter(listener) {\n    return function (e) {\n      if (e.target === e.currentTarget || e.target === e.current) {\n        return listener.call(null, e);\n      }\n    };\n  }\n\n  function useCaptureFilter(options) {\n    return options && isIE && !isBoolean(options) ? !!options.capture : options;\n  }\n\n  function isEventTarget(target) {\n    return target && 'addEventListener' in target;\n  }\n\n  function toEventTarget(target) {\n    return isEventTarget(target) ? target : toNode(target);\n  }\n\n  function toEventTargets(target) {\n    return isArray(target) ? target.map(toEventTarget).filter(Boolean) : isString(target) ? findAll(target) : isEventTarget(target) ? [target] : toNodes(target);\n  }\n\n  function isTouch(e) {\n    return e.pointerType === 'touch' || !!e.touches;\n  }\n\n  function getEventPos(e) {\n    var touches = e.touches;\n    var changedTouches = e.changedTouches;\n    var ref = touches && touches[0] || changedTouches && changedTouches[0] || e;\n    var x = ref.clientX;\n    var y = ref.clientY;\n    return {\n      x: x,\n      y: y\n    };\n  }\n  /* global setImmediate */\n\n\n  var Promise$1 = inBrowser && window.Promise || PromiseFn;\n\n  var Deferred = function () {\n    var this$1$1 = this;\n    this.promise = new Promise$1(function (resolve, reject) {\n      this$1$1.reject = reject;\n      this$1$1.resolve = resolve;\n    });\n  };\n  /**\n   * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)\n   */\n\n\n  var RESOLVED = 0;\n  var REJECTED = 1;\n  var PENDING = 2;\n  var async = inBrowser && window.setImmediate || setTimeout;\n\n  function PromiseFn(executor) {\n    this.state = PENDING;\n    this.value = undefined;\n    this.deferred = [];\n    var promise = this;\n\n    try {\n      executor(function (x) {\n        promise.resolve(x);\n      }, function (r) {\n        promise.reject(r);\n      });\n    } catch (e) {\n      promise.reject(e);\n    }\n  }\n\n  PromiseFn.reject = function (r) {\n    return new PromiseFn(function (resolve, reject) {\n      reject(r);\n    });\n  };\n\n  PromiseFn.resolve = function (x) {\n    return new PromiseFn(function (resolve, reject) {\n      resolve(x);\n    });\n  };\n\n  PromiseFn.all = function all(iterable) {\n    return new PromiseFn(function (resolve, reject) {\n      var result = [];\n      var count = 0;\n\n      if (iterable.length === 0) {\n        resolve(result);\n      }\n\n      function resolver(i) {\n        return function (x) {\n          result[i] = x;\n          count += 1;\n\n          if (count === iterable.length) {\n            resolve(result);\n          }\n        };\n      }\n\n      for (var i = 0; i < iterable.length; i += 1) {\n        PromiseFn.resolve(iterable[i]).then(resolver(i), reject);\n      }\n    });\n  };\n\n  PromiseFn.race = function race(iterable) {\n    return new PromiseFn(function (resolve, reject) {\n      for (var i = 0; i < iterable.length; i += 1) {\n        PromiseFn.resolve(iterable[i]).then(resolve, reject);\n      }\n    });\n  };\n\n  var p = PromiseFn.prototype;\n\n  p.resolve = function resolve(x) {\n    var promise = this;\n\n    if (promise.state === PENDING) {\n      if (x === promise) {\n        throw new TypeError('Promise settled with itself.');\n      }\n\n      var called = false;\n\n      try {\n        var then = x && x.then;\n\n        if (x !== null && isObject(x) && isFunction(then)) {\n          then.call(x, function (x) {\n            if (!called) {\n              promise.resolve(x);\n            }\n\n            called = true;\n          }, function (r) {\n            if (!called) {\n              promise.reject(r);\n            }\n\n            called = true;\n          });\n          return;\n        }\n      } catch (e) {\n        if (!called) {\n          promise.reject(e);\n        }\n\n        return;\n      }\n\n      promise.state = RESOLVED;\n      promise.value = x;\n      promise.notify();\n    }\n  };\n\n  p.reject = function reject(reason) {\n    var promise = this;\n\n    if (promise.state === PENDING) {\n      if (reason === promise) {\n        throw new TypeError('Promise settled with itself.');\n      }\n\n      promise.state = REJECTED;\n      promise.value = reason;\n      promise.notify();\n    }\n  };\n\n  p.notify = function notify() {\n    var this$1$1 = this;\n    async(function () {\n      if (this$1$1.state !== PENDING) {\n        while (this$1$1.deferred.length) {\n          var ref = this$1$1.deferred.shift();\n          var onResolved = ref[0];\n          var onRejected = ref[1];\n          var resolve = ref[2];\n          var reject = ref[3];\n\n          try {\n            if (this$1$1.state === RESOLVED) {\n              if (isFunction(onResolved)) {\n                resolve(onResolved.call(undefined, this$1$1.value));\n              } else {\n                resolve(this$1$1.value);\n              }\n            } else if (this$1$1.state === REJECTED) {\n              if (isFunction(onRejected)) {\n                resolve(onRejected.call(undefined, this$1$1.value));\n              } else {\n                reject(this$1$1.value);\n              }\n            }\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }\n    });\n  };\n\n  p.then = function then(onResolved, onRejected) {\n    var this$1$1 = this;\n    return new PromiseFn(function (resolve, reject) {\n      this$1$1.deferred.push([onResolved, onRejected, resolve, reject]);\n      this$1$1.notify();\n    });\n  };\n\n  p.catch = function (onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n  function ajax(url, options) {\n    var env = assign({\n      data: null,\n      method: 'GET',\n      headers: {},\n      xhr: new XMLHttpRequest(),\n      beforeSend: noop,\n      responseType: ''\n    }, options);\n    return Promise$1.resolve().then(function () {\n      return env.beforeSend(env);\n    }).then(function () {\n      return send(url, env);\n    });\n  }\n\n  function send(url, env) {\n    return new Promise$1(function (resolve, reject) {\n      var xhr = env.xhr;\n\n      for (var prop in env) {\n        if (prop in xhr) {\n          try {\n            xhr[prop] = env[prop];\n          } catch (e) {}\n        }\n      }\n\n      xhr.open(env.method.toUpperCase(), url);\n\n      for (var header in env.headers) {\n        xhr.setRequestHeader(header, env.headers[header]);\n      }\n\n      on(xhr, 'load', function () {\n        if (xhr.status === 0 || xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {\n          // IE 11 does not support responseType 'json'\n          if (env.responseType === 'json' && isString(xhr.response)) {\n            xhr = assign(copyXhr(xhr), {\n              response: JSON.parse(xhr.response)\n            });\n          }\n\n          resolve(xhr);\n        } else {\n          reject(assign(Error(xhr.statusText), {\n            xhr: xhr,\n            status: xhr.status\n          }));\n        }\n      });\n      on(xhr, 'error', function () {\n        return reject(assign(Error('Network Error'), {\n          xhr: xhr\n        }));\n      });\n      on(xhr, 'timeout', function () {\n        return reject(assign(Error('Network Timeout'), {\n          xhr: xhr\n        }));\n      });\n      xhr.send(env.data);\n    });\n  }\n\n  function getImage(src, srcset, sizes) {\n    return new Promise$1(function (resolve, reject) {\n      var img = new Image();\n\n      img.onerror = function (e) {\n        return reject(e);\n      };\n\n      img.onload = function () {\n        return resolve(img);\n      };\n\n      sizes && (img.sizes = sizes);\n      srcset && (img.srcset = srcset);\n      img.src = src;\n    });\n  }\n\n  function copyXhr(source) {\n    var target = {};\n\n    for (var key in source) {\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function ready(fn) {\n    if (document.readyState !== 'loading') {\n      fn();\n      return;\n    }\n\n    once(document, 'DOMContentLoaded', fn);\n  }\n\n  function empty(element) {\n    element = $(element);\n    element.innerHTML = '';\n    return element;\n  }\n\n  function html(parent, html) {\n    parent = $(parent);\n    return isUndefined(html) ? parent.innerHTML : append(parent.hasChildNodes() ? empty(parent) : parent, html);\n  }\n\n  function prepend(parent, element) {\n    parent = $(parent);\n\n    if (parent.hasChildNodes()) {\n      return insertNodes(element, function (element) {\n        return parent.insertBefore(element, parent.firstChild);\n      });\n    } else {\n      return append(parent, element);\n    }\n  }\n\n  function append(parent, element) {\n    parent = $(parent);\n    return insertNodes(element, function (element) {\n      return parent.appendChild(element);\n    });\n  }\n\n  function before(ref, element) {\n    ref = $(ref);\n    return insertNodes(element, function (element) {\n      return ref.parentNode.insertBefore(element, ref);\n    });\n  }\n\n  function after(ref, element) {\n    ref = $(ref);\n    return insertNodes(element, function (element) {\n      return ref.nextSibling ? before(ref.nextSibling, element) : append(ref.parentNode, element);\n    });\n  }\n\n  function insertNodes(element, fn) {\n    element = isString(element) ? fragment(element) : element;\n    return element ? 'length' in element ? toNodes(element).map(fn) : fn(element) : null;\n  }\n\n  function remove$1(element) {\n    toNodes(element).forEach(function (element) {\n      return element.parentNode && element.parentNode.removeChild(element);\n    });\n  }\n\n  function wrapAll(element, structure) {\n    structure = toNode(before(element, structure));\n\n    while (structure.firstChild) {\n      structure = structure.firstChild;\n    }\n\n    append(structure, element);\n    return structure;\n  }\n\n  function wrapInner(element, structure) {\n    return toNodes(toNodes(element).map(function (element) {\n      return element.hasChildNodes ? wrapAll(toNodes(element.childNodes), structure) : append(element, structure);\n    }));\n  }\n\n  function unwrap(element) {\n    toNodes(element).map(parent).filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (parent) {\n      before(parent, parent.childNodes);\n      remove$1(parent);\n    });\n  }\n\n  var fragmentRe = /^\\s*<(\\w+|!)[^>]*>/;\n  var singleTagRe = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/;\n\n  function fragment(html) {\n    var matches = singleTagRe.exec(html);\n\n    if (matches) {\n      return document.createElement(matches[1]);\n    }\n\n    var container = document.createElement('div');\n\n    if (fragmentRe.test(html)) {\n      container.insertAdjacentHTML('beforeend', html.trim());\n    } else {\n      container.textContent = html;\n    }\n\n    return container.childNodes.length > 1 ? toNodes(container.childNodes) : container.firstChild;\n  }\n\n  function apply$1(node, fn) {\n    if (!isElement(node)) {\n      return;\n    }\n\n    fn(node);\n    node = node.firstElementChild;\n\n    while (node) {\n      var next = node.nextElementSibling;\n      apply$1(node, fn);\n      node = next;\n    }\n  }\n\n  function $(selector, context) {\n    return isHtml(selector) ? toNode(fragment(selector)) : find(selector, context);\n  }\n\n  function $$(selector, context) {\n    return isHtml(selector) ? toNodes(fragment(selector)) : findAll(selector, context);\n  }\n\n  function isHtml(str) {\n    return isString(str) && (str[0] === '<' || str.match(/^\\s*</));\n  }\n\n  function addClass(element) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1];\n\n    apply(element, args, 'add');\n  }\n\n  function removeClass(element) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1];\n\n    apply(element, args, 'remove');\n  }\n\n  function removeClasses(element, cls) {\n    attr(element, 'class', function (value) {\n      return (value || '').replace(new RegExp(\"\\\\b\" + cls + \"\\\\b\", 'g'), '');\n    });\n  }\n\n  function replaceClass(element) {\n    var args = [],\n        len = arguments.length - 1;\n\n    while (len-- > 0) args[len] = arguments[len + 1];\n\n    args[0] && removeClass(element, args[0]);\n    args[1] && addClass(element, args[1]);\n  }\n\n  function hasClass(element, cls) {\n    var assign;\n    assign = getClasses(cls), cls = assign[0];\n    var nodes = toNodes(element);\n\n    for (var n = 0; n < nodes.length; n++) {\n      if (cls && nodes[n].classList.contains(cls)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function toggleClass(element, cls, force) {\n    cls = getClasses(cls);\n    var nodes = toNodes(element);\n\n    for (var n = 0; n < nodes.length; n++) {\n      var list = nodes[n].classList;\n\n      for (var i = 0; i < cls.length; i++) {\n        if (isUndefined(force)) {\n          list.toggle(cls[i]);\n        } else if (supports.Force) {\n          list.toggle(cls[i], !!force);\n        } else {\n          list[force ? 'add' : 'remove'](cls[i]);\n        }\n      }\n    }\n  }\n\n  function apply(element, args, fn) {\n    var ref;\n    args = args.reduce(function (args, arg) {\n      return args.concat(getClasses(arg));\n    }, []);\n    var nodes = toNodes(element);\n\n    var loop = function (n) {\n      if (supports.Multiple) {\n        (ref = nodes[n].classList)[fn].apply(ref, args);\n      } else {\n        args.forEach(function (cls) {\n          return nodes[n].classList[fn](cls);\n        });\n      }\n    };\n\n    for (var n = 0; n < nodes.length; n++) loop(n);\n  }\n\n  function getClasses(str) {\n    return String(str).split(/\\s|,/).filter(Boolean);\n  } // IE 11\n\n\n  var supports = {\n    get Multiple() {\n      return this.get('Multiple');\n    },\n\n    get Force() {\n      return this.get('Force');\n    },\n\n    get: function (key) {\n      var ref = document.createElement('_');\n      var classList = ref.classList;\n      classList.add('a', 'b');\n      classList.toggle('c', false);\n      supports = {\n        Multiple: classList.contains('b'),\n        Force: !classList.contains('c')\n      };\n      return supports[key];\n    }\n  };\n  var cssNumber = {\n    'animation-iteration-count': true,\n    'column-count': true,\n    'fill-opacity': true,\n    'flex-grow': true,\n    'flex-shrink': true,\n    'font-weight': true,\n    'line-height': true,\n    'opacity': true,\n    'order': true,\n    'orphans': true,\n    'stroke-dasharray': true,\n    'stroke-dashoffset': true,\n    'widows': true,\n    'z-index': true,\n    'zoom': true\n  };\n\n  function css(element, property, value, priority) {\n    if (priority === void 0) priority = '';\n    return toNodes(element).map(function (element) {\n      if (isString(property)) {\n        property = propName(property);\n\n        if (isUndefined(value)) {\n          return getStyle(element, property);\n        } else if (!value && !isNumber(value)) {\n          element.style.removeProperty(property);\n        } else {\n          element.style.setProperty(property, isNumeric(value) && !cssNumber[property] ? value + \"px\" : value, priority);\n        }\n      } else if (isArray(property)) {\n        var styles = getStyles(element);\n        return property.reduce(function (props, property) {\n          props[property] = styles[propName(property)];\n          return props;\n        }, {});\n      } else if (isObject(property)) {\n        priority = value;\n        each(property, function (value, property) {\n          return css(element, property, value, priority);\n        });\n      }\n\n      return element;\n    })[0];\n  }\n\n  function getStyles(element, pseudoElt) {\n    return toWindow(element).getComputedStyle(element, pseudoElt);\n  }\n\n  function getStyle(element, property, pseudoElt) {\n    return getStyles(element, pseudoElt)[property];\n  }\n\n  var parseCssVar = memoize(function (name) {\n    /* usage in css: .uk-name:before { content:\"xyz\" } */\n    var element = append(document.documentElement, fragment('<div>'));\n    addClass(element, \"uk-\" + name);\n    var value = getStyle(element, 'content', ':before');\n    remove$1(element);\n    return value;\n  });\n  var propertyRe = /^\\s*([\"'])?(.*?)\\1\\s*$/;\n\n  function getCssVar(name) {\n    return (isIE ? parseCssVar(name) : getStyles(document.documentElement).getPropertyValue(\"--uk-\" + name)).replace(propertyRe, '$2');\n  } // https://drafts.csswg.org/cssom/#dom-cssstyledeclaration-setproperty\n\n\n  var propName = memoize(function (name) {\n    return vendorPropName(name);\n  });\n  var cssPrefixes = ['webkit', 'moz', 'ms'];\n\n  function vendorPropName(name) {\n    name = hyphenate(name);\n    var ref = document.documentElement;\n    var style = ref.style;\n\n    if (name in style) {\n      return name;\n    }\n\n    var i = cssPrefixes.length,\n        prefixedName;\n\n    while (i--) {\n      prefixedName = \"-\" + cssPrefixes[i] + \"-\" + name;\n\n      if (prefixedName in style) {\n        return prefixedName;\n      }\n    }\n  }\n\n  function transition(element, props, duration, timing) {\n    if (duration === void 0) duration = 400;\n    if (timing === void 0) timing = 'linear';\n    return Promise$1.all(toNodes(element).map(function (element) {\n      return new Promise$1(function (resolve, reject) {\n        for (var name in props) {\n          var value = css(element, name);\n\n          if (value === '') {\n            css(element, name, value);\n          }\n        }\n\n        var timer = setTimeout(function () {\n          return trigger(element, 'transitionend');\n        }, duration);\n        once(element, 'transitionend transitioncanceled', function (ref) {\n          var type = ref.type;\n          clearTimeout(timer);\n          removeClass(element, 'uk-transition');\n          css(element, {\n            transitionProperty: '',\n            transitionDuration: '',\n            transitionTimingFunction: ''\n          });\n          type === 'transitioncanceled' ? reject() : resolve(element);\n        }, {\n          self: true\n        });\n        addClass(element, 'uk-transition');\n        css(element, assign({\n          transitionProperty: Object.keys(props).map(propName).join(','),\n          transitionDuration: duration + \"ms\",\n          transitionTimingFunction: timing\n        }, props));\n      });\n    }));\n  }\n\n  var Transition = {\n    start: transition,\n    stop: function (element) {\n      trigger(element, 'transitionend');\n      return Promise$1.resolve();\n    },\n    cancel: function (element) {\n      trigger(element, 'transitioncanceled');\n    },\n    inProgress: function (element) {\n      return hasClass(element, 'uk-transition');\n    }\n  };\n  var animationPrefix = 'uk-animation-';\n\n  function animate$1(element, animation, duration, origin, out) {\n    if (duration === void 0) duration = 200;\n    return Promise$1.all(toNodes(element).map(function (element) {\n      return new Promise$1(function (resolve, reject) {\n        trigger(element, 'animationcanceled');\n        var timer = setTimeout(function () {\n          return trigger(element, 'animationend');\n        }, duration);\n        once(element, 'animationend animationcanceled', function (ref) {\n          var type = ref.type;\n          clearTimeout(timer);\n          type === 'animationcanceled' ? reject() : resolve(element);\n          css(element, 'animationDuration', '');\n          removeClasses(element, animationPrefix + \"\\\\S*\");\n        }, {\n          self: true\n        });\n        css(element, 'animationDuration', duration + \"ms\");\n        addClass(element, animation, animationPrefix + (out ? 'leave' : 'enter'));\n\n        if (startsWith(animation, animationPrefix)) {\n          origin && addClass(element, \"uk-transform-origin-\" + origin);\n          out && addClass(element, animationPrefix + \"reverse\");\n        }\n      });\n    }));\n  }\n\n  var inProgress = new RegExp(animationPrefix + \"(enter|leave)\");\n  var Animation = {\n    in: animate$1,\n    out: function (element, animation, duration, origin) {\n      return animate$1(element, animation, duration, origin, true);\n    },\n    inProgress: function (element) {\n      return inProgress.test(attr(element, 'class'));\n    },\n    cancel: function (element) {\n      trigger(element, 'animationcanceled');\n    }\n  };\n  var dirs$1 = {\n    width: ['left', 'right'],\n    height: ['top', 'bottom']\n  };\n\n  function dimensions(element) {\n    var rect = isElement(element) ? toNode(element).getBoundingClientRect() : {\n      height: height(element),\n      width: width(element),\n      top: 0,\n      left: 0\n    };\n    return {\n      height: rect.height,\n      width: rect.width,\n      top: rect.top,\n      left: rect.left,\n      bottom: rect.top + rect.height,\n      right: rect.left + rect.width\n    };\n  }\n\n  function offset(element, coordinates) {\n    var currentOffset = dimensions(element);\n\n    if (element) {\n      var ref = toWindow(element);\n      var pageYOffset = ref.pageYOffset;\n      var pageXOffset = ref.pageXOffset;\n      var offsetBy = {\n        height: pageYOffset,\n        width: pageXOffset\n      };\n\n      for (var dir in dirs$1) {\n        for (var i in dirs$1[dir]) {\n          currentOffset[dirs$1[dir][i]] += offsetBy[dir];\n        }\n      }\n    }\n\n    if (!coordinates) {\n      return currentOffset;\n    }\n\n    var pos = css(element, 'position');\n    each(css(element, ['left', 'top']), function (value, prop) {\n      return css(element, prop, coordinates[prop] - currentOffset[prop] + toFloat(pos === 'absolute' && value === 'auto' ? position(element)[prop] : value));\n    });\n  }\n\n  function position(element) {\n    var ref = offset(element);\n    var top = ref.top;\n    var left = ref.left;\n    var ref$1 = toNode(element);\n    var ref$1_ownerDocument = ref$1.ownerDocument;\n    var body = ref$1_ownerDocument.body;\n    var documentElement = ref$1_ownerDocument.documentElement;\n    var offsetParent = ref$1.offsetParent;\n    var parent = offsetParent || documentElement;\n\n    while (parent && (parent === body || parent === documentElement) && css(parent, 'position') === 'static') {\n      parent = parent.parentNode;\n    }\n\n    if (isElement(parent)) {\n      var parentOffset = offset(parent);\n      top -= parentOffset.top + toFloat(css(parent, 'borderTopWidth'));\n      left -= parentOffset.left + toFloat(css(parent, 'borderLeftWidth'));\n    }\n\n    return {\n      top: top - toFloat(css(element, 'marginTop')),\n      left: left - toFloat(css(element, 'marginLeft'))\n    };\n  }\n\n  function offsetPosition(element) {\n    var offset = [0, 0];\n    element = toNode(element);\n\n    do {\n      offset[0] += element.offsetTop;\n      offset[1] += element.offsetLeft;\n\n      if (css(element, 'position') === 'fixed') {\n        var win = toWindow(element);\n        offset[0] += win.pageYOffset;\n        offset[1] += win.pageXOffset;\n        return offset;\n      }\n    } while (element = element.offsetParent);\n\n    return offset;\n  }\n\n  var height = dimension('height');\n  var width = dimension('width');\n\n  function dimension(prop) {\n    var propName = ucfirst(prop);\n    return function (element, value) {\n      if (isUndefined(value)) {\n        if (isWindow(element)) {\n          return element[\"inner\" + propName];\n        }\n\n        if (isDocument(element)) {\n          var doc = element.documentElement;\n          return Math.max(doc[\"offset\" + propName], doc[\"scroll\" + propName]);\n        }\n\n        element = toNode(element);\n        value = css(element, prop);\n        value = value === 'auto' ? element[\"offset\" + propName] : toFloat(value) || 0;\n        return value - boxModelAdjust(element, prop);\n      } else {\n        return css(element, prop, !value && value !== 0 ? '' : +value + boxModelAdjust(element, prop) + 'px');\n      }\n    };\n  }\n\n  function boxModelAdjust(element, prop, sizing) {\n    if (sizing === void 0) sizing = 'border-box';\n    return css(element, 'boxSizing') === sizing ? dirs$1[prop].map(ucfirst).reduce(function (value, prop) {\n      return value + toFloat(css(element, \"padding\" + prop)) + toFloat(css(element, \"border\" + prop + \"Width\"));\n    }, 0) : 0;\n  }\n\n  function flipPosition(pos) {\n    for (var dir in dirs$1) {\n      for (var i in dirs$1[dir]) {\n        if (dirs$1[dir][i] === pos) {\n          return dirs$1[dir][1 - i];\n        }\n      }\n    }\n\n    return pos;\n  }\n\n  function toPx(value, property, element, offsetDim) {\n    if (property === void 0) property = 'width';\n    if (element === void 0) element = window;\n    if (offsetDim === void 0) offsetDim = false;\n    return isNumeric(value) ? +value : endsWith(value, 'vh') ? percent(height(toWindow(element)), value) : endsWith(value, 'vw') ? percent(width(toWindow(element)), value) : endsWith(value, '%') ? percent(offsetDim ? element[\"offset\" + ucfirst(property)] : dimensions(element)[property], value) : toFloat(value);\n  }\n\n  function percent(base, value) {\n    return base * toFloat(value) / 100;\n  }\n  /*\n      Based on:\n      Copyright (c) 2016 Wilson Page wilsonpage@me.com\n      https://github.com/wilsonpage/fastdom\n  */\n\n\n  var fastdom = {\n    reads: [],\n    writes: [],\n    read: function (task) {\n      this.reads.push(task);\n      scheduleFlush();\n      return task;\n    },\n    write: function (task) {\n      this.writes.push(task);\n      scheduleFlush();\n      return task;\n    },\n    clear: function (task) {\n      remove(this.reads, task);\n      remove(this.writes, task);\n    },\n    flush: flush\n  };\n\n  function flush(recursion) {\n    if (recursion === void 0) recursion = 1;\n    runTasks(fastdom.reads);\n    runTasks(fastdom.writes.splice(0));\n    fastdom.scheduled = false;\n\n    if (fastdom.reads.length || fastdom.writes.length) {\n      scheduleFlush(recursion + 1);\n    }\n  }\n\n  var RECURSION_LIMIT = 4;\n\n  function scheduleFlush(recursion) {\n    if (fastdom.scheduled) {\n      return;\n    }\n\n    fastdom.scheduled = true;\n\n    if (recursion && recursion < RECURSION_LIMIT) {\n      Promise$1.resolve().then(function () {\n        return flush(recursion);\n      });\n    } else {\n      requestAnimationFrame(function () {\n        return flush();\n      });\n    }\n  }\n\n  function runTasks(tasks) {\n    var task;\n\n    while (task = tasks.shift()) {\n      try {\n        task();\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  function remove(array, item) {\n    var index = array.indexOf(item);\n    return ~index && array.splice(index, 1);\n  }\n\n  function MouseTracker() {}\n\n  MouseTracker.prototype = {\n    positions: [],\n    init: function () {\n      var this$1$1 = this;\n      this.positions = [];\n      var position;\n      this.unbind = on(document, 'mousemove', function (e) {\n        return position = getEventPos(e);\n      });\n      this.interval = setInterval(function () {\n        if (!position) {\n          return;\n        }\n\n        this$1$1.positions.push(position);\n\n        if (this$1$1.positions.length > 5) {\n          this$1$1.positions.shift();\n        }\n      }, 50);\n    },\n    cancel: function () {\n      this.unbind && this.unbind();\n      this.interval && clearInterval(this.interval);\n    },\n    movesTo: function (target) {\n      if (this.positions.length < 2) {\n        return false;\n      }\n\n      var p = target.getBoundingClientRect();\n      var left = p.left;\n      var right = p.right;\n      var top = p.top;\n      var bottom = p.bottom;\n      var ref = this.positions;\n      var prevPosition = ref[0];\n      var position = last(this.positions);\n      var path = [prevPosition, position];\n\n      if (pointInRect(position, p)) {\n        return false;\n      }\n\n      var diagonals = [[{\n        x: left,\n        y: top\n      }, {\n        x: right,\n        y: bottom\n      }], [{\n        x: left,\n        y: bottom\n      }, {\n        x: right,\n        y: top\n      }]];\n      return diagonals.some(function (diagonal) {\n        var intersection = intersect(path, diagonal);\n        return intersection && pointInRect(intersection, p);\n      });\n    }\n  }; // Inspired by http://paulbourke.net/geometry/pointlineplane/\n\n  function intersect(ref, ref$1) {\n    var ref_0 = ref[0];\n    var x1 = ref_0.x;\n    var y1 = ref_0.y;\n    var ref_1 = ref[1];\n    var x2 = ref_1.x;\n    var y2 = ref_1.y;\n    var ref$1_0 = ref$1[0];\n    var x3 = ref$1_0.x;\n    var y3 = ref$1_0.y;\n    var ref$1_1 = ref$1[1];\n    var x4 = ref$1_1.x;\n    var y4 = ref$1_1.y;\n    var denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1); // Lines are parallel\n\n    if (denominator === 0) {\n      return false;\n    }\n\n    var ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;\n\n    if (ua < 0) {\n      return false;\n    } // Return an object with the x and y coordinates of the intersection\n\n\n    return {\n      x: x1 + ua * (x2 - x1),\n      y: y1 + ua * (y2 - y1)\n    };\n  }\n\n  var strats = {};\n  strats.events = strats.created = strats.beforeConnect = strats.connected = strats.beforeDisconnect = strats.disconnected = strats.destroy = concatStrat; // args strategy\n\n  strats.args = function (parentVal, childVal) {\n    return childVal !== false && concatStrat(childVal || parentVal);\n  }; // update strategy\n\n\n  strats.update = function (parentVal, childVal) {\n    return sortBy$1(concatStrat(parentVal, isFunction(childVal) ? {\n      read: childVal\n    } : childVal), 'order');\n  }; // property strategy\n\n\n  strats.props = function (parentVal, childVal) {\n    if (isArray(childVal)) {\n      childVal = childVal.reduce(function (value, key) {\n        value[key] = String;\n        return value;\n      }, {});\n    }\n\n    return strats.methods(parentVal, childVal);\n  }; // extend strategy\n\n\n  strats.computed = strats.methods = function (parentVal, childVal) {\n    return childVal ? parentVal ? assign({}, parentVal, childVal) : childVal : parentVal;\n  }; // data strategy\n\n\n  strats.data = function (parentVal, childVal, vm) {\n    if (!vm) {\n      if (!childVal) {\n        return parentVal;\n      }\n\n      if (!parentVal) {\n        return childVal;\n      }\n\n      return function (vm) {\n        return mergeFnData(parentVal, childVal, vm);\n      };\n    }\n\n    return mergeFnData(parentVal, childVal, vm);\n  };\n\n  function mergeFnData(parentVal, childVal, vm) {\n    return strats.computed(isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal, isFunction(childVal) ? childVal.call(vm, vm) : childVal);\n  } // concat strategy\n\n\n  function concatStrat(parentVal, childVal) {\n    parentVal = parentVal && !isArray(parentVal) ? [parentVal] : parentVal;\n    return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n  } // default strategy\n\n\n  function defaultStrat(parentVal, childVal) {\n    return isUndefined(childVal) ? parentVal : childVal;\n  }\n\n  function mergeOptions(parent, child, vm) {\n    var options = {};\n\n    if (isFunction(child)) {\n      child = child.options;\n    }\n\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n\n    for (var key in parent) {\n      mergeKey(key);\n    }\n\n    for (var key$1 in child) {\n      if (!hasOwn(parent, key$1)) {\n        mergeKey(key$1);\n      }\n    }\n\n    function mergeKey(key) {\n      options[key] = (strats[key] || defaultStrat)(parent[key], child[key], vm);\n    }\n\n    return options;\n  }\n\n  function parseOptions(options, args) {\n    var obj;\n    if (args === void 0) args = [];\n\n    try {\n      return !options ? {} : startsWith(options, '{') ? JSON.parse(options) : args.length && !includes(options, ':') ? (obj = {}, obj[args[0]] = options, obj) : options.split(';').reduce(function (options, option) {\n        var ref = option.split(/:(.*)/);\n        var key = ref[0];\n        var value = ref[1];\n\n        if (key && !isUndefined(value)) {\n          options[key.trim()] = value.trim();\n        }\n\n        return options;\n      }, {});\n    } catch (e) {\n      return {};\n    }\n  }\n\n  function play(el) {\n    if (isIFrame(el)) {\n      call(el, {\n        func: 'playVideo',\n        method: 'play'\n      });\n    }\n\n    if (isHTML5(el)) {\n      try {\n        el.play().catch(noop);\n      } catch (e) {}\n    }\n  }\n\n  function pause(el) {\n    if (isIFrame(el)) {\n      call(el, {\n        func: 'pauseVideo',\n        method: 'pause'\n      });\n    }\n\n    if (isHTML5(el)) {\n      el.pause();\n    }\n  }\n\n  function mute(el) {\n    if (isIFrame(el)) {\n      call(el, {\n        func: 'mute',\n        method: 'setVolume',\n        value: 0\n      });\n    }\n\n    if (isHTML5(el)) {\n      el.muted = true;\n    }\n  }\n\n  function isVideo(el) {\n    return isHTML5(el) || isIFrame(el);\n  }\n\n  function isHTML5(el) {\n    return el && el.tagName === 'VIDEO';\n  }\n\n  function isIFrame(el) {\n    return el && el.tagName === 'IFRAME' && (isYoutube(el) || isVimeo(el));\n  }\n\n  function isYoutube(el) {\n    return !!el.src.match(/\\/\\/.*?youtube(-nocookie)?\\.[a-z]+\\/(watch\\?v=[^&\\s]+|embed)|youtu\\.be\\/.*/);\n  }\n\n  function isVimeo(el) {\n    return !!el.src.match(/vimeo\\.com\\/video\\/.*/);\n  }\n\n  function call(el, cmd) {\n    enableApi(el).then(function () {\n      return post(el, cmd);\n    });\n  }\n\n  function post(el, cmd) {\n    try {\n      el.contentWindow.postMessage(JSON.stringify(assign({\n        event: 'command'\n      }, cmd)), '*');\n    } catch (e) {}\n  }\n\n  var stateKey$1 = '_ukPlayer';\n  var counter = 0;\n\n  function enableApi(el) {\n    if (el[stateKey$1]) {\n      return el[stateKey$1];\n    }\n\n    var youtube = isYoutube(el);\n    var vimeo = isVimeo(el);\n    var id = ++counter;\n    var poller;\n    return el[stateKey$1] = new Promise$1(function (resolve) {\n      youtube && once(el, 'load', function () {\n        var listener = function () {\n          return post(el, {\n            event: 'listening',\n            id: id\n          });\n        };\n\n        poller = setInterval(listener, 100);\n        listener();\n      });\n      once(window, 'message', resolve, false, function (ref) {\n        var data = ref.data;\n\n        try {\n          data = JSON.parse(data);\n          return data && (youtube && data.id === id && data.event === 'onReady' || vimeo && Number(data.player_id) === id);\n        } catch (e) {}\n      });\n      el.src = \"\" + el.src + (includes(el.src, '?') ? '&' : '?') + (youtube ? 'enablejsapi=1' : \"api=1&player_id=\" + id);\n    }).then(function () {\n      return clearInterval(poller);\n    });\n  }\n\n  function isInView(element, offsetTop, offsetLeft) {\n    if (offsetTop === void 0) offsetTop = 0;\n    if (offsetLeft === void 0) offsetLeft = 0;\n\n    if (!isVisible(element)) {\n      return false;\n    }\n\n    return intersectRect.apply(void 0, scrollParents(element).map(function (parent) {\n      var ref = offset(getViewport$1(parent));\n      var top = ref.top;\n      var left = ref.left;\n      var bottom = ref.bottom;\n      var right = ref.right;\n      return {\n        top: top - offsetTop,\n        left: left - offsetLeft,\n        bottom: bottom + offsetTop,\n        right: right + offsetLeft\n      };\n    }).concat(offset(element)));\n  }\n\n  function scrollTop(element, top) {\n    if (isWindow(element) || isDocument(element)) {\n      element = getScrollingElement(element);\n    } else {\n      element = toNode(element);\n    }\n\n    element.scrollTop = top;\n  }\n\n  function scrollIntoView(element, ref) {\n    if (ref === void 0) ref = {};\n    var offsetBy = ref.offset;\n    if (offsetBy === void 0) offsetBy = 0;\n    var parents = isVisible(element) ? scrollParents(element) : [];\n    return parents.reduce(function (fn, scrollElement, i) {\n      var scrollTop = scrollElement.scrollTop;\n      var scrollHeight = scrollElement.scrollHeight;\n      var offsetHeight = scrollElement.offsetHeight;\n      var maxScroll = scrollHeight - getViewportClientHeight(scrollElement);\n      var ref = offset(parents[i - 1] || element);\n      var elHeight = ref.height;\n      var elTop = ref.top;\n      var top = Math.ceil(elTop - offset(getViewport$1(scrollElement)).top - offsetBy + scrollTop);\n\n      if (offsetBy > 0 && offsetHeight < elHeight + offsetBy) {\n        top += offsetBy;\n      } else {\n        offsetBy = 0;\n      }\n\n      if (top > maxScroll) {\n        offsetBy -= top - maxScroll;\n        top = maxScroll;\n      } else if (top < 0) {\n        offsetBy -= top;\n        top = 0;\n      }\n\n      return function () {\n        return scrollTo(scrollElement, top - scrollTop).then(fn);\n      };\n    }, function () {\n      return Promise$1.resolve();\n    })();\n\n    function scrollTo(element, top) {\n      return new Promise$1(function (resolve) {\n        var scroll = element.scrollTop;\n        var duration = getDuration(Math.abs(top));\n        var start = Date.now();\n\n        (function step() {\n          var percent = ease(clamp((Date.now() - start) / duration));\n          scrollTop(element, scroll + top * percent); // scroll more if we have not reached our destination\n\n          if (percent === 1) {\n            resolve();\n          } else {\n            requestAnimationFrame(step);\n          }\n        })();\n      });\n    }\n\n    function getDuration(dist) {\n      return 40 * Math.pow(dist, .375);\n    }\n\n    function ease(k) {\n      return 0.5 * (1 - Math.cos(Math.PI * k));\n    }\n  }\n\n  function scrolledOver(element, startOffset, endOffset) {\n    if (startOffset === void 0) startOffset = 0;\n    if (endOffset === void 0) endOffset = 0;\n\n    if (!isVisible(element)) {\n      return 0;\n    }\n\n    var ref = scrollParents(element, /auto|scroll/, true);\n    var scrollElement = ref[0];\n    var scrollHeight = scrollElement.scrollHeight;\n    var scrollTop = scrollElement.scrollTop;\n    var viewportHeight = getViewportClientHeight(scrollElement);\n    var maxScroll = scrollHeight - viewportHeight;\n    var elementOffsetTop = offsetPosition(element)[0] - offsetPosition(scrollElement)[0];\n    var start = Math.max(0, elementOffsetTop - viewportHeight + startOffset);\n    var end = Math.min(maxScroll, elementOffsetTop + element.offsetHeight - endOffset);\n    return clamp((scrollTop - start) / (end - start));\n  }\n\n  function scrollParents(element, overflowRe, scrollable) {\n    if (overflowRe === void 0) overflowRe = /auto|scroll|hidden/;\n    if (scrollable === void 0) scrollable = false;\n    var scrollEl = getScrollingElement(element);\n    var ancestors = parents(element).reverse();\n    ancestors = ancestors.slice(ancestors.indexOf(scrollEl) + 1);\n    var fixedIndex = findIndex(ancestors, function (el) {\n      return css(el, 'position') === 'fixed';\n    });\n\n    if (~fixedIndex) {\n      ancestors = ancestors.slice(fixedIndex);\n    }\n\n    return [scrollEl].concat(ancestors.filter(function (parent) {\n      return overflowRe.test(css(parent, 'overflow')) && (!scrollable || parent.scrollHeight > getViewportClientHeight(parent));\n    })).reverse();\n  }\n\n  function getViewport$1(scrollElement) {\n    return scrollElement === getScrollingElement(scrollElement) ? window : scrollElement;\n  } // iOS 12 returns <body> as scrollingElement\n\n\n  function getViewportClientHeight(scrollElement) {\n    return (scrollElement === getScrollingElement(scrollElement) ? document.documentElement : scrollElement).clientHeight;\n  }\n\n  function getScrollingElement(element) {\n    var ref = toWindow(element);\n    var document = ref.document;\n    return document.scrollingElement || document.documentElement;\n  }\n\n  var dirs = {\n    width: ['x', 'left', 'right'],\n    height: ['y', 'top', 'bottom']\n  };\n\n  function positionAt(element, target, elAttach, targetAttach, elOffset, targetOffset, flip, boundary) {\n    elAttach = getPos(elAttach);\n    targetAttach = getPos(targetAttach);\n    var flipped = {\n      element: elAttach,\n      target: targetAttach\n    };\n\n    if (!element || !target) {\n      return flipped;\n    }\n\n    var dim = offset(element);\n    var targetDim = offset(target);\n    var position = targetDim;\n    moveTo(position, elAttach, dim, -1);\n    moveTo(position, targetAttach, targetDim, 1);\n    elOffset = getOffsets(elOffset, dim.width, dim.height);\n    targetOffset = getOffsets(targetOffset, targetDim.width, targetDim.height);\n    elOffset['x'] += targetOffset['x'];\n    elOffset['y'] += targetOffset['y'];\n    position.left += elOffset['x'];\n    position.top += elOffset['y'];\n\n    if (flip) {\n      var boundaries = scrollParents(element).map(getViewport$1);\n\n      if (boundary && !includes(boundaries, boundary)) {\n        boundaries.unshift(boundary);\n      }\n\n      boundaries = boundaries.map(function (el) {\n        return offset(el);\n      });\n      each(dirs, function (ref, prop) {\n        var dir = ref[0];\n        var align = ref[1];\n        var alignFlip = ref[2];\n\n        if (!(flip === true || includes(flip, dir))) {\n          return;\n        }\n\n        boundaries.some(function (boundary) {\n          var elemOffset = elAttach[dir] === align ? -dim[prop] : elAttach[dir] === alignFlip ? dim[prop] : 0;\n          var targetOffset = targetAttach[dir] === align ? targetDim[prop] : targetAttach[dir] === alignFlip ? -targetDim[prop] : 0;\n\n          if (position[align] < boundary[align] || position[align] + dim[prop] > boundary[alignFlip]) {\n            var centerOffset = dim[prop] / 2;\n            var centerTargetOffset = targetAttach[dir] === 'center' ? -targetDim[prop] / 2 : 0;\n            return elAttach[dir] === 'center' && (apply(centerOffset, centerTargetOffset) || apply(-centerOffset, -centerTargetOffset)) || apply(elemOffset, targetOffset);\n          }\n\n          function apply(elemOffset, targetOffset) {\n            var newVal = toFloat((position[align] + elemOffset + targetOffset - elOffset[dir] * 2).toFixed(4));\n\n            if (newVal >= boundary[align] && newVal + dim[prop] <= boundary[alignFlip]) {\n              position[align] = newVal;\n              ['element', 'target'].forEach(function (el) {\n                flipped[el][dir] = !elemOffset ? flipped[el][dir] : flipped[el][dir] === dirs[prop][1] ? dirs[prop][2] : dirs[prop][1];\n              });\n              return true;\n            }\n          }\n        });\n      });\n    }\n\n    offset(element, position);\n    return flipped;\n  }\n\n  function moveTo(position, attach, dim, factor) {\n    each(dirs, function (ref, prop) {\n      var dir = ref[0];\n      var align = ref[1];\n      var alignFlip = ref[2];\n\n      if (attach[dir] === alignFlip) {\n        position[align] += dim[prop] * factor;\n      } else if (attach[dir] === 'center') {\n        position[align] += dim[prop] * factor / 2;\n      }\n    });\n  }\n\n  function getPos(pos) {\n    var x = /left|center|right/;\n    var y = /top|center|bottom/;\n    pos = (pos || '').split(' ');\n\n    if (pos.length === 1) {\n      pos = x.test(pos[0]) ? pos.concat('center') : y.test(pos[0]) ? ['center'].concat(pos) : ['center', 'center'];\n    }\n\n    return {\n      x: x.test(pos[0]) ? pos[0] : 'center',\n      y: y.test(pos[1]) ? pos[1] : 'center'\n    };\n  }\n\n  function getOffsets(offsets, width, height) {\n    var ref = (offsets || '').split(' ');\n    var x = ref[0];\n    var y = ref[1];\n    return {\n      x: x ? toFloat(x) * (endsWith(x, '%') ? width / 100 : 1) : 0,\n      y: y ? toFloat(y) * (endsWith(y, '%') ? height / 100 : 1) : 0\n    };\n  }\n\n  var util = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ajax: ajax,\n    getImage: getImage,\n    transition: transition,\n    Transition: Transition,\n    animate: animate$1,\n    Animation: Animation,\n    attr: attr,\n    hasAttr: hasAttr,\n    removeAttr: removeAttr,\n    data: data,\n    addClass: addClass,\n    removeClass: removeClass,\n    removeClasses: removeClasses,\n    replaceClass: replaceClass,\n    hasClass: hasClass,\n    toggleClass: toggleClass,\n    dimensions: dimensions,\n    offset: offset,\n    position: position,\n    offsetPosition: offsetPosition,\n    height: height,\n    width: width,\n    boxModelAdjust: boxModelAdjust,\n    flipPosition: flipPosition,\n    toPx: toPx,\n    ready: ready,\n    empty: empty,\n    html: html,\n    prepend: prepend,\n    append: append,\n    before: before,\n    after: after,\n    remove: remove$1,\n    wrapAll: wrapAll,\n    wrapInner: wrapInner,\n    unwrap: unwrap,\n    fragment: fragment,\n    apply: apply$1,\n    $: $,\n    $$: $$,\n    inBrowser: inBrowser,\n    isIE: isIE,\n    isRtl: isRtl,\n    hasTouch: hasTouch,\n    pointerDown: pointerDown,\n    pointerMove: pointerMove,\n    pointerUp: pointerUp,\n    pointerEnter: pointerEnter,\n    pointerLeave: pointerLeave,\n    pointerCancel: pointerCancel,\n    on: on,\n    off: off,\n    once: once,\n    trigger: trigger,\n    createEvent: createEvent,\n    toEventTargets: toEventTargets,\n    isTouch: isTouch,\n    getEventPos: getEventPos,\n    fastdom: fastdom,\n    isVoidElement: isVoidElement,\n    isVisible: isVisible,\n    selInput: selInput,\n    isInput: isInput,\n    selFocusable: selFocusable,\n    isFocusable: isFocusable,\n    parent: parent,\n    filter: filter$1,\n    matches: matches,\n    closest: closest,\n    within: within,\n    parents: parents,\n    children: children,\n    index: index,\n    hasOwn: hasOwn,\n    hyphenate: hyphenate,\n    camelize: camelize,\n    ucfirst: ucfirst,\n    startsWith: startsWith,\n    endsWith: endsWith,\n    includes: includes,\n    findIndex: findIndex,\n    isArray: isArray,\n    isFunction: isFunction,\n    isObject: isObject,\n    isPlainObject: isPlainObject,\n    isWindow: isWindow,\n    isDocument: isDocument,\n    isNode: isNode,\n    isElement: isElement,\n    isBoolean: isBoolean,\n    isString: isString,\n    isNumber: isNumber,\n    isNumeric: isNumeric,\n    isEmpty: isEmpty,\n    isUndefined: isUndefined,\n    toBoolean: toBoolean,\n    toNumber: toNumber,\n    toFloat: toFloat,\n    toArray: toArray,\n    toNode: toNode,\n    toNodes: toNodes,\n    toWindow: toWindow,\n    toMs: toMs,\n    isEqual: isEqual,\n    swap: swap,\n    assign: assign,\n    last: last,\n    each: each,\n    sortBy: sortBy$1,\n    uniqueBy: uniqueBy,\n    clamp: clamp,\n    noop: noop,\n    intersectRect: intersectRect,\n    pointInRect: pointInRect,\n    Dimensions: Dimensions,\n    getIndex: getIndex,\n    memoize: memoize,\n    MouseTracker: MouseTracker,\n    mergeOptions: mergeOptions,\n    parseOptions: parseOptions,\n    play: play,\n    pause: pause,\n    mute: mute,\n    isVideo: isVideo,\n    positionAt: positionAt,\n    Promise: Promise$1,\n    Deferred: Deferred,\n    query: query,\n    queryAll: queryAll,\n    find: find,\n    findAll: findAll,\n    escape: escape,\n    css: css,\n    getCssVar: getCssVar,\n    propName: propName,\n    isInView: isInView,\n    scrollTop: scrollTop,\n    scrollIntoView: scrollIntoView,\n    scrolledOver: scrolledOver,\n    scrollParents: scrollParents,\n    getViewport: getViewport$1,\n    getViewportClientHeight: getViewportClientHeight\n  });\n\n  function globalAPI(UIkit) {\n    var DATA = UIkit.data;\n\n    UIkit.use = function (plugin) {\n      if (plugin.installed) {\n        return;\n      }\n\n      plugin.call(null, this);\n      plugin.installed = true;\n      return this;\n    };\n\n    UIkit.mixin = function (mixin, component) {\n      component = (isString(component) ? UIkit.component(component) : component) || this;\n      component.options = mergeOptions(component.options, mixin);\n    };\n\n    UIkit.extend = function (options) {\n      options = options || {};\n      var Super = this;\n\n      var Sub = function UIkitComponent(options) {\n        this._init(options);\n      };\n\n      Sub.prototype = Object.create(Super.prototype);\n      Sub.prototype.constructor = Sub;\n      Sub.options = mergeOptions(Super.options, options);\n      Sub.super = Super;\n      Sub.extend = Super.extend;\n      return Sub;\n    };\n\n    UIkit.update = function (element, e) {\n      element = element ? toNode(element) : document.body;\n      parents(element).reverse().forEach(function (element) {\n        return update(element[DATA], e);\n      });\n      apply$1(element, function (element) {\n        return update(element[DATA], e);\n      });\n    };\n\n    var container;\n    Object.defineProperty(UIkit, 'container', {\n      get: function () {\n        return container || document.body;\n      },\n      set: function (element) {\n        container = $(element);\n      }\n    });\n\n    function update(data, e) {\n      if (!data) {\n        return;\n      }\n\n      for (var name in data) {\n        if (data[name]._connected) {\n          data[name]._callUpdate(e);\n        }\n      }\n    }\n  }\n\n  function hooksAPI(UIkit) {\n    UIkit.prototype._callHook = function (hook) {\n      var this$1$1 = this;\n      var handlers = this.$options[hook];\n\n      if (handlers) {\n        handlers.forEach(function (handler) {\n          return handler.call(this$1$1);\n        });\n      }\n    };\n\n    UIkit.prototype._callConnected = function () {\n      if (this._connected) {\n        return;\n      }\n\n      this._data = {};\n      this._computeds = {};\n\n      this._initProps();\n\n      this._callHook('beforeConnect');\n\n      this._connected = true;\n\n      this._initEvents();\n\n      this._initObservers();\n\n      this._callHook('connected');\n\n      this._callUpdate();\n    };\n\n    UIkit.prototype._callDisconnected = function () {\n      if (!this._connected) {\n        return;\n      }\n\n      this._callHook('beforeDisconnect');\n\n      this._disconnectObservers();\n\n      this._unbindEvents();\n\n      this._callHook('disconnected');\n\n      this._connected = false;\n      delete this._watch;\n    };\n\n    UIkit.prototype._callUpdate = function (e) {\n      var this$1$1 = this;\n      if (e === void 0) e = 'update';\n\n      if (!this._connected) {\n        return;\n      }\n\n      if (e === 'update' || e === 'resize') {\n        this._callWatches();\n      }\n\n      if (!this.$options.update) {\n        return;\n      }\n\n      if (!this._updates) {\n        this._updates = new Set();\n        fastdom.read(function () {\n          if (this$1$1._connected) {\n            runUpdates.call(this$1$1, this$1$1._updates);\n          }\n\n          delete this$1$1._updates;\n        });\n      }\n\n      this._updates.add(e.type || e);\n    };\n\n    UIkit.prototype._callWatches = function () {\n      var this$1$1 = this;\n\n      if (this._watch) {\n        return;\n      }\n\n      var initial = !hasOwn(this, '_watch');\n      this._watch = fastdom.read(function () {\n        if (this$1$1._connected) {\n          runWatches.call(this$1$1, initial);\n        }\n\n        this$1$1._watch = null;\n      });\n    };\n\n    function runUpdates(types) {\n      var this$1$1 = this;\n      var updates = this.$options.update;\n\n      var loop = function (i) {\n        var ref = updates[i];\n        var read = ref.read;\n        var write = ref.write;\n        var events = ref.events;\n\n        if (!types.has('update') && (!events || !events.some(function (type) {\n          return types.has(type);\n        }))) {\n          return;\n        }\n\n        var result = void 0;\n\n        if (read) {\n          result = read.call(this$1$1, this$1$1._data, types);\n\n          if (result && isPlainObject(result)) {\n            assign(this$1$1._data, result);\n          }\n        }\n\n        if (write && result !== false) {\n          fastdom.write(function () {\n            return write.call(this$1$1, this$1$1._data, types);\n          });\n        }\n      };\n\n      for (var i = 0; i < updates.length; i++) loop(i);\n    }\n\n    function runWatches(initial) {\n      var ref = this;\n      var computed = ref.$options.computed;\n      var values = assign({}, this._computeds);\n      this._computeds = {};\n\n      for (var key in computed) {\n        var ref$1 = computed[key];\n        var watch = ref$1.watch;\n        var immediate = ref$1.immediate;\n\n        if (watch && (initial && immediate || hasOwn(values, key) && !isEqual(values[key], this[key]))) {\n          watch.call(this, this[key], values[key]);\n        }\n      }\n    }\n  }\n\n  function stateAPI(UIkit) {\n    var uid = 0;\n\n    UIkit.prototype._init = function (options) {\n      options = options || {};\n      options.data = normalizeData(options, this.constructor.options);\n      this.$options = mergeOptions(this.constructor.options, options, this);\n      this.$el = null;\n      this.$props = {};\n      this._uid = uid++;\n\n      this._initData();\n\n      this._initMethods();\n\n      this._initComputeds();\n\n      this._callHook('created');\n\n      if (options.el) {\n        this.$mount(options.el);\n      }\n    };\n\n    UIkit.prototype._initData = function () {\n      var ref = this.$options;\n      var data = ref.data;\n      if (data === void 0) data = {};\n\n      for (var key in data) {\n        this.$props[key] = this[key] = data[key];\n      }\n    };\n\n    UIkit.prototype._initMethods = function () {\n      var ref = this.$options;\n      var methods = ref.methods;\n\n      if (methods) {\n        for (var key in methods) {\n          this[key] = methods[key].bind(this);\n        }\n      }\n    };\n\n    UIkit.prototype._initComputeds = function () {\n      var ref = this.$options;\n      var computed = ref.computed;\n      this._computeds = {};\n\n      if (computed) {\n        for (var key in computed) {\n          registerComputed(this, key, computed[key]);\n        }\n      }\n    };\n\n    UIkit.prototype._initProps = function (props) {\n      var key;\n      props = props || getProps(this.$options, this.$name);\n\n      for (key in props) {\n        if (!isUndefined(props[key])) {\n          this.$props[key] = props[key];\n        }\n      }\n\n      var exclude = [this.$options.computed, this.$options.methods];\n\n      for (key in this.$props) {\n        if (key in props && notIn(exclude, key)) {\n          this[key] = this.$props[key];\n        }\n      }\n    };\n\n    UIkit.prototype._initEvents = function () {\n      var this$1$1 = this;\n      this._events = [];\n      var ref = this.$options;\n      var events = ref.events;\n\n      if (events) {\n        events.forEach(function (event) {\n          if (hasOwn(event, 'handler')) {\n            registerEvent(this$1$1, event);\n          } else {\n            for (var key in event) {\n              registerEvent(this$1$1, event[key], key);\n            }\n          }\n        });\n      }\n    };\n\n    UIkit.prototype._unbindEvents = function () {\n      this._events.forEach(function (unbind) {\n        return unbind();\n      });\n\n      delete this._events;\n    };\n\n    UIkit.prototype._initObservers = function () {\n      this._observers = [initChildListObserver(this), initPropsObserver(this)];\n    };\n\n    UIkit.prototype._disconnectObservers = function () {\n      this._observers.forEach(function (observer) {\n        return observer && observer.disconnect();\n      });\n    };\n\n    function getProps(opts, name) {\n      var data$1 = {};\n      var args = opts.args;\n      if (args === void 0) args = [];\n      var props = opts.props;\n      if (props === void 0) props = {};\n      var el = opts.el;\n\n      if (!props) {\n        return data$1;\n      }\n\n      for (var key in props) {\n        var prop = hyphenate(key);\n        var value = data(el, prop);\n\n        if (isUndefined(value)) {\n          continue;\n        }\n\n        value = props[key] === Boolean && value === '' ? true : coerce(props[key], value);\n\n        if (prop === 'target' && (!value || startsWith(value, '_'))) {\n          continue;\n        }\n\n        data$1[key] = value;\n      }\n\n      var options = parseOptions(data(el, name), args);\n\n      for (var key$1 in options) {\n        var prop$1 = camelize(key$1);\n\n        if (props[prop$1] !== undefined) {\n          data$1[prop$1] = coerce(props[prop$1], options[key$1]);\n        }\n      }\n\n      return data$1;\n    }\n\n    function registerComputed(component, key, cb) {\n      Object.defineProperty(component, key, {\n        enumerable: true,\n        get: function () {\n          var _computeds = component._computeds;\n          var $props = component.$props;\n          var $el = component.$el;\n\n          if (!hasOwn(_computeds, key)) {\n            _computeds[key] = (cb.get || cb).call(component, $props, $el);\n          }\n\n          return _computeds[key];\n        },\n        set: function (value) {\n          var _computeds = component._computeds;\n          _computeds[key] = cb.set ? cb.set.call(component, value) : value;\n\n          if (isUndefined(_computeds[key])) {\n            delete _computeds[key];\n          }\n        }\n      });\n    }\n\n    function registerEvent(component, event, key) {\n      if (!isPlainObject(event)) {\n        event = {\n          name: key,\n          handler: event\n        };\n      }\n\n      var name = event.name;\n      var el = event.el;\n      var handler = event.handler;\n      var capture = event.capture;\n      var passive = event.passive;\n      var delegate = event.delegate;\n      var filter = event.filter;\n      var self = event.self;\n      el = isFunction(el) ? el.call(component) : el || component.$el;\n\n      if (isArray(el)) {\n        el.forEach(function (el) {\n          return registerEvent(component, assign({}, event, {\n            el: el\n          }), key);\n        });\n        return;\n      }\n\n      if (!el || filter && !filter.call(component)) {\n        return;\n      }\n\n      component._events.push(on(el, name, !delegate ? null : isString(delegate) ? delegate : delegate.call(component), isString(handler) ? component[handler] : handler.bind(component), {\n        passive: passive,\n        capture: capture,\n        self: self\n      }));\n    }\n\n    function notIn(options, key) {\n      return options.every(function (arr) {\n        return !arr || !hasOwn(arr, key);\n      });\n    }\n\n    function coerce(type, value) {\n      if (type === Boolean) {\n        return toBoolean(value);\n      } else if (type === Number) {\n        return toNumber(value);\n      } else if (type === 'list') {\n        return toList(value);\n      }\n\n      return type ? type(value) : value;\n    }\n\n    function toList(value) {\n      return isArray(value) ? value : isString(value) ? value.split(/,(?![^(]*\\))/).map(function (value) {\n        return isNumeric(value) ? toNumber(value) : toBoolean(value.trim());\n      }) : [value];\n    }\n\n    function normalizeData(ref, ref$1) {\n      var data = ref.data;\n      var args = ref$1.args;\n      var props = ref$1.props;\n      if (props === void 0) props = {};\n      data = isArray(data) ? !isEmpty(args) ? data.slice(0, args.length).reduce(function (data, value, index) {\n        if (isPlainObject(value)) {\n          assign(data, value);\n        } else {\n          data[args[index]] = value;\n        }\n\n        return data;\n      }, {}) : undefined : data;\n\n      if (data) {\n        for (var key in data) {\n          if (isUndefined(data[key])) {\n            delete data[key];\n          } else {\n            data[key] = props[key] ? coerce(props[key], data[key]) : data[key];\n          }\n        }\n      }\n\n      return data;\n    }\n\n    function initChildListObserver(component) {\n      var ref = component.$options;\n      var el = ref.el;\n      var observer = new MutationObserver(function () {\n        return component.$emit();\n      });\n      observer.observe(el, {\n        childList: true,\n        subtree: true\n      });\n      return observer;\n    }\n\n    function initPropsObserver(component) {\n      var $name = component.$name;\n      var $options = component.$options;\n      var $props = component.$props;\n      var attrs = $options.attrs;\n      var props = $options.props;\n      var el = $options.el;\n\n      if (!props || attrs === false) {\n        return;\n      }\n\n      var attributes = isArray(attrs) ? attrs : Object.keys(props);\n      var filter = attributes.map(function (key) {\n        return hyphenate(key);\n      }).concat($name);\n      var observer = new MutationObserver(function (records) {\n        var data = getProps($options, $name);\n\n        if (records.some(function (ref) {\n          var attributeName = ref.attributeName;\n          var prop = attributeName.replace('data-', '');\n          return (prop === $name ? attributes : [camelize(prop), camelize(attributeName)]).some(function (prop) {\n            return !isUndefined(data[prop]) && data[prop] !== $props[prop];\n          });\n        })) {\n          component.$reset();\n        }\n      });\n      observer.observe(el, {\n        attributes: true,\n        attributeFilter: filter.concat(filter.map(function (key) {\n          return \"data-\" + key;\n        }))\n      });\n      return observer;\n    }\n  }\n\n  function instanceAPI(UIkit) {\n    var DATA = UIkit.data;\n\n    UIkit.prototype.$create = function (component, element, data) {\n      return UIkit[component](element, data);\n    };\n\n    UIkit.prototype.$mount = function (el) {\n      var ref = this.$options;\n      var name = ref.name;\n\n      if (!el[DATA]) {\n        el[DATA] = {};\n      }\n\n      if (el[DATA][name]) {\n        return;\n      }\n\n      el[DATA][name] = this;\n      this.$el = this.$options.el = this.$options.el || el;\n\n      if (within(el, document)) {\n        this._callConnected();\n      }\n    };\n\n    UIkit.prototype.$reset = function () {\n      this._callDisconnected();\n\n      this._callConnected();\n    };\n\n    UIkit.prototype.$destroy = function (removeEl) {\n      if (removeEl === void 0) removeEl = false;\n      var ref = this.$options;\n      var el = ref.el;\n      var name = ref.name;\n\n      if (el) {\n        this._callDisconnected();\n      }\n\n      this._callHook('destroy');\n\n      if (!el || !el[DATA]) {\n        return;\n      }\n\n      delete el[DATA][name];\n\n      if (!isEmpty(el[DATA])) {\n        delete el[DATA];\n      }\n\n      if (removeEl) {\n        remove$1(this.$el);\n      }\n    };\n\n    UIkit.prototype.$emit = function (e) {\n      this._callUpdate(e);\n    };\n\n    UIkit.prototype.$update = function (element, e) {\n      if (element === void 0) element = this.$el;\n      UIkit.update(element, e);\n    };\n\n    UIkit.prototype.$getComponent = UIkit.getComponent;\n    var componentName = memoize(function (name) {\n      return UIkit.prefix + hyphenate(name);\n    });\n    Object.defineProperties(UIkit.prototype, {\n      $container: Object.getOwnPropertyDescriptor(UIkit, 'container'),\n      $name: {\n        get: function () {\n          return componentName(this.$options.name);\n        }\n      }\n    });\n  }\n\n  function componentAPI(UIkit) {\n    var DATA = UIkit.data;\n    var components = {};\n\n    UIkit.component = function (name, options) {\n      var id = hyphenate(name);\n      name = camelize(id);\n\n      if (!options) {\n        if (isPlainObject(components[name])) {\n          components[name] = UIkit.extend(components[name]);\n        }\n\n        return components[name];\n      }\n\n      UIkit[name] = function (element, data) {\n        var i = arguments.length,\n            argsArray = Array(i);\n\n        while (i--) argsArray[i] = arguments[i];\n\n        var component = UIkit.component(name);\n        return component.options.functional ? new component({\n          data: isPlainObject(element) ? element : [].concat(argsArray)\n        }) : !element ? init(element) : $$(element).map(init)[0];\n\n        function init(element) {\n          var instance = UIkit.getComponent(element, name);\n\n          if (instance) {\n            if (data) {\n              instance.$destroy();\n            } else {\n              return instance;\n            }\n          }\n\n          return new component({\n            el: element,\n            data: data\n          });\n        }\n      };\n\n      var opt = isPlainObject(options) ? assign({}, options) : options.options;\n      opt.name = name;\n\n      if (opt.install) {\n        opt.install(UIkit, opt, name);\n      }\n\n      if (UIkit._initialized && !opt.functional) {\n        fastdom.read(function () {\n          return UIkit[name](\"[uk-\" + id + \"],[data-uk-\" + id + \"]\");\n        });\n      }\n\n      return components[name] = isPlainObject(options) ? opt : options;\n    };\n\n    UIkit.getComponents = function (element) {\n      return element && element[DATA] || {};\n    };\n\n    UIkit.getComponent = function (element, name) {\n      return UIkit.getComponents(element)[name];\n    };\n\n    UIkit.connect = function (node) {\n      if (node[DATA]) {\n        for (var name in node[DATA]) {\n          node[DATA][name]._callConnected();\n        }\n      }\n\n      for (var i = 0; i < node.attributes.length; i++) {\n        var name$1 = getComponentName(node.attributes[i].name);\n\n        if (name$1 && name$1 in components) {\n          UIkit[name$1](node);\n        }\n      }\n    };\n\n    UIkit.disconnect = function (node) {\n      for (var name in node[DATA]) {\n        node[DATA][name]._callDisconnected();\n      }\n    };\n  }\n\n  var getComponentName = memoize(function (attribute) {\n    return startsWith(attribute, 'uk-') || startsWith(attribute, 'data-uk-') ? camelize(attribute.replace('data-uk-', '').replace('uk-', '')) : false;\n  });\n\n  var UIkit = function (options) {\n    this._init(options);\n  };\n\n  UIkit.util = util;\n  UIkit.data = '__uikit__';\n  UIkit.prefix = 'uk-';\n  UIkit.options = {};\n  UIkit.version = '3.11.1';\n  globalAPI(UIkit);\n  hooksAPI(UIkit);\n  stateAPI(UIkit);\n  componentAPI(UIkit);\n  instanceAPI(UIkit);\n\n  function Core(UIkit) {\n    if (!inBrowser) {\n      return;\n    } // throttle 'resize'\n\n\n    var pendingResize;\n\n    var handleResize = function () {\n      if (pendingResize) {\n        return;\n      }\n\n      pendingResize = true;\n      fastdom.write(function () {\n        return pendingResize = false;\n      });\n      UIkit.update(null, 'resize');\n    };\n\n    on(window, 'load resize', handleResize);\n    on(document, 'loadedmetadata load', handleResize, true);\n\n    if ('ResizeObserver' in window) {\n      new ResizeObserver(handleResize).observe(document.documentElement);\n    } // throttle `scroll` event (Safari triggers multiple `scroll` events per frame)\n\n\n    var pending;\n    on(window, 'scroll', function (e) {\n      if (pending) {\n        return;\n      }\n\n      pending = true;\n      fastdom.write(function () {\n        return pending = false;\n      });\n      UIkit.update(null, e.type);\n    }, {\n      passive: true,\n      capture: true\n    });\n    var started = 0;\n    on(document, 'animationstart', function (ref) {\n      var target = ref.target;\n\n      if ((css(target, 'animationName') || '').match(/^uk-.*(left|right)/)) {\n        started++;\n        css(document.documentElement, 'overflowX', 'hidden');\n        setTimeout(function () {\n          if (! --started) {\n            css(document.documentElement, 'overflowX', '');\n          }\n        }, toMs(css(target, 'animationDuration')) + 100);\n      }\n    }, true);\n    on(document, pointerDown, function (e) {\n      if (!isTouch(e)) {\n        return;\n      } // Handle Swipe Gesture\n\n\n      var pos = getEventPos(e);\n      var target = 'tagName' in e.target ? e.target : parent(e.target);\n      once(document, pointerUp + \" \" + pointerCancel + \" scroll\", function (e) {\n        var ref = getEventPos(e);\n        var x = ref.x;\n        var y = ref.y; // swipe\n\n        if (e.type !== 'scroll' && target && x && Math.abs(pos.x - x) > 100 || y && Math.abs(pos.y - y) > 100) {\n          setTimeout(function () {\n            trigger(target, 'swipe');\n            trigger(target, \"swipe\" + swipeDirection(pos.x, pos.y, x, y));\n          });\n        }\n      });\n    }, {\n      passive: true\n    });\n  }\n\n  function swipeDirection(x1, y1, x2, y2) {\n    return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? x1 - x2 > 0 ? 'Left' : 'Right' : y1 - y2 > 0 ? 'Up' : 'Down';\n  }\n\n  function boot(UIkit) {\n    var connect = UIkit.connect;\n    var disconnect = UIkit.disconnect;\n\n    if (!inBrowser || !window.MutationObserver) {\n      return;\n    }\n\n    fastdom.read(function () {\n      if (document.body) {\n        apply$1(document.body, connect);\n      }\n\n      new MutationObserver(function (records) {\n        return records.forEach(applyChildListMutation);\n      }).observe(document, {\n        childList: true,\n        subtree: true\n      });\n      new MutationObserver(function (records) {\n        return records.forEach(applyAttributeMutation);\n      }).observe(document, {\n        attributes: true,\n        subtree: true\n      });\n      UIkit._initialized = true;\n    });\n\n    function applyChildListMutation(ref) {\n      var addedNodes = ref.addedNodes;\n      var removedNodes = ref.removedNodes;\n\n      for (var i = 0; i < addedNodes.length; i++) {\n        apply$1(addedNodes[i], connect);\n      }\n\n      for (var i$1 = 0; i$1 < removedNodes.length; i$1++) {\n        apply$1(removedNodes[i$1], disconnect);\n      }\n    }\n\n    function applyAttributeMutation(ref) {\n      var target = ref.target;\n      var attributeName = ref.attributeName;\n      var name = getComponentName(attributeName);\n\n      if (!name || !(name in UIkit)) {\n        return;\n      }\n\n      if (hasAttr(target, attributeName)) {\n        UIkit[name](target);\n        return;\n      }\n\n      var component = UIkit.getComponent(target, name);\n\n      if (component) {\n        component.$destroy();\n      }\n    }\n  }\n\n  var Class = {\n    connected: function () {\n      !hasClass(this.$el, this.$name) && addClass(this.$el, this.$name);\n    }\n  };\n  var Togglable = {\n    props: {\n      cls: Boolean,\n      animation: 'list',\n      duration: Number,\n      origin: String,\n      transition: String\n    },\n    data: {\n      cls: false,\n      animation: [false],\n      duration: 200,\n      origin: false,\n      transition: 'linear',\n      clsEnter: 'uk-togglabe-enter',\n      clsLeave: 'uk-togglabe-leave',\n      initProps: {\n        overflow: '',\n        height: '',\n        paddingTop: '',\n        paddingBottom: '',\n        marginTop: '',\n        marginBottom: ''\n      },\n      hideProps: {\n        overflow: 'hidden',\n        height: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n        marginTop: 0,\n        marginBottom: 0\n      }\n    },\n    computed: {\n      hasAnimation: function (ref) {\n        var animation = ref.animation;\n        return !!animation[0];\n      },\n      hasTransition: function (ref) {\n        var animation = ref.animation;\n        return this.hasAnimation && animation[0] === true;\n      }\n    },\n    methods: {\n      toggleElement: function (targets, toggle, animate) {\n        var this$1$1 = this;\n        return new Promise$1(function (resolve) {\n          return Promise$1.all(toNodes(targets).map(function (el) {\n            var show = isBoolean(toggle) ? toggle : !this$1$1.isToggled(el);\n\n            if (!trigger(el, \"before\" + (show ? 'show' : 'hide'), [this$1$1])) {\n              return Promise$1.reject();\n            }\n\n            var promise = (isFunction(animate) ? animate : animate === false || !this$1$1.hasAnimation ? this$1$1._toggle : this$1$1.hasTransition ? toggleHeight(this$1$1) : toggleAnimation(this$1$1))(el, show);\n            var cls = show ? this$1$1.clsEnter : this$1$1.clsLeave;\n            addClass(el, cls);\n            trigger(el, show ? 'show' : 'hide', [this$1$1]);\n\n            var done = function () {\n              removeClass(el, cls);\n              trigger(el, show ? 'shown' : 'hidden', [this$1$1]);\n              this$1$1.$update(el);\n            };\n\n            return promise ? promise.then(done, function () {\n              removeClass(el, cls);\n              return Promise$1.reject();\n            }) : done();\n          })).then(resolve, noop);\n        });\n      },\n      isToggled: function (el) {\n        var assign;\n        if (el === void 0) el = this.$el;\n        assign = toNodes(el), el = assign[0];\n        return hasClass(el, this.clsEnter) ? true : hasClass(el, this.clsLeave) ? false : this.cls ? hasClass(el, this.cls.split(' ')[0]) : isVisible(el);\n      },\n      _toggle: function (el, toggled) {\n        if (!el) {\n          return;\n        }\n\n        toggled = Boolean(toggled);\n        var changed;\n\n        if (this.cls) {\n          changed = includes(this.cls, ' ') || toggled !== hasClass(el, this.cls);\n          changed && toggleClass(el, this.cls, includes(this.cls, ' ') ? undefined : toggled);\n        } else {\n          changed = toggled === el.hidden;\n          changed && (el.hidden = !toggled);\n        }\n\n        $$('[autofocus]', el).some(function (el) {\n          return isVisible(el) ? el.focus() || true : el.blur();\n        });\n\n        if (changed) {\n          trigger(el, 'toggled', [toggled, this]);\n          this.$update(el);\n        }\n      }\n    }\n  };\n\n  function toggleHeight(ref) {\n    var isToggled = ref.isToggled;\n    var duration = ref.duration;\n    var initProps = ref.initProps;\n    var hideProps = ref.hideProps;\n    var transition = ref.transition;\n    var _toggle = ref._toggle;\n    return function (el, show) {\n      var inProgress = Transition.inProgress(el);\n      var inner = el.hasChildNodes ? toFloat(css(el.firstElementChild, 'marginTop')) + toFloat(css(el.lastElementChild, 'marginBottom')) : 0;\n      var currentHeight = isVisible(el) ? height(el) + (inProgress ? 0 : inner) : 0;\n      Transition.cancel(el);\n\n      if (!isToggled(el)) {\n        _toggle(el, true);\n      }\n\n      height(el, ''); // Update child components first\n\n      fastdom.flush();\n      var endHeight = height(el) + (inProgress ? 0 : inner);\n      height(el, currentHeight);\n      return (show ? Transition.start(el, assign({}, initProps, {\n        overflow: 'hidden',\n        height: endHeight\n      }), Math.round(duration * (1 - currentHeight / endHeight)), transition) : Transition.start(el, hideProps, Math.round(duration * (currentHeight / endHeight)), transition).then(function () {\n        return _toggle(el, false);\n      })).then(function () {\n        return css(el, initProps);\n      });\n    };\n  }\n\n  function toggleAnimation(cmp) {\n    return function (el, show) {\n      Animation.cancel(el);\n      var animation = cmp.animation;\n      var duration = cmp.duration;\n      var _toggle = cmp._toggle;\n\n      if (show) {\n        _toggle(el, true);\n\n        return Animation.in(el, animation[0], duration, cmp.origin);\n      }\n\n      return Animation.out(el, animation[1] || animation[0], duration, cmp.origin).then(function () {\n        return _toggle(el, false);\n      });\n    };\n  }\n\n  var Accordion = {\n    mixins: [Class, Togglable],\n    props: {\n      targets: String,\n      active: null,\n      collapsible: Boolean,\n      multiple: Boolean,\n      toggle: String,\n      content: String,\n      transition: String,\n      offset: Number\n    },\n    data: {\n      targets: '> *',\n      active: false,\n      animation: [true],\n      collapsible: true,\n      multiple: false,\n      clsOpen: 'uk-open',\n      toggle: '> .uk-accordion-title',\n      content: '> .uk-accordion-content',\n      transition: 'ease',\n      offset: 0\n    },\n    computed: {\n      items: {\n        get: function (ref, $el) {\n          var targets = ref.targets;\n          return $$(targets, $el);\n        },\n        watch: function (items, prev) {\n          var this$1$1 = this;\n          items.forEach(function (el) {\n            return hide($(this$1$1.content, el), !hasClass(el, this$1$1.clsOpen));\n          });\n\n          if (prev || hasClass(items, this.clsOpen)) {\n            return;\n          }\n\n          var active = this.active !== false && items[Number(this.active)] || !this.collapsible && items[0];\n\n          if (active) {\n            this.toggle(active, false);\n          }\n        },\n        immediate: true\n      },\n      toggles: function (ref) {\n        var toggle = ref.toggle;\n        return this.items.map(function (item) {\n          return $(toggle, item);\n        });\n      }\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.targets + \" \" + this.$props.toggle;\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.toggle(index(this.toggles, e.current));\n      }\n    }],\n    methods: {\n      toggle: function (item, animate) {\n        var this$1$1 = this;\n        var items = [this.items[getIndex(item, this.items)]];\n        var activeItems = filter$1(this.items, \".\" + this.clsOpen);\n\n        if (!this.multiple && !includes(activeItems, items[0])) {\n          items = items.concat(activeItems);\n        }\n\n        if (!this.collapsible && activeItems.length < 2 && !filter$1(items, \":not(.\" + this.clsOpen + \")\").length) {\n          return;\n        }\n\n        items.forEach(function (el) {\n          return this$1$1.toggleElement(el, !hasClass(el, this$1$1.clsOpen), function (el, show) {\n            toggleClass(el, this$1$1.clsOpen, show);\n            attr($(this$1$1.$props.toggle, el), 'aria-expanded', show);\n            var content = $(\"\" + (el._wrapper ? '> * ' : '') + this$1$1.content, el);\n\n            if (animate === false || !this$1$1.hasTransition) {\n              hide(content, !show);\n              return;\n            }\n\n            if (!el._wrapper) {\n              el._wrapper = wrapAll(content, \"<div\" + (show ? ' hidden' : '') + \">\");\n            }\n\n            hide(content, false);\n            return toggleHeight(this$1$1)(el._wrapper, show).then(function () {\n              hide(content, !show);\n              delete el._wrapper;\n              unwrap(content);\n\n              if (show) {\n                var toggle = $(this$1$1.$props.toggle, el);\n\n                if (!isInView(toggle)) {\n                  scrollIntoView(toggle, {\n                    offset: this$1$1.offset\n                  });\n                }\n              }\n            });\n          });\n        });\n      }\n    }\n  };\n\n  function hide(el, hide) {\n    el && (el.hidden = hide);\n  }\n\n  var alert = {\n    mixins: [Class, Togglable],\n    args: 'animation',\n    props: {\n      close: String\n    },\n    data: {\n      animation: [true],\n      selClose: '.uk-alert-close',\n      duration: 150,\n      hideProps: assign({\n        opacity: 0\n      }, Togglable.data.hideProps)\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.selClose;\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.close();\n      }\n    }],\n    methods: {\n      close: function () {\n        var this$1$1 = this;\n        this.toggleElement(this.$el).then(function () {\n          return this$1$1.$destroy(true);\n        });\n      }\n    }\n  };\n  var Video = {\n    args: 'autoplay',\n    props: {\n      automute: Boolean,\n      autoplay: Boolean\n    },\n    data: {\n      automute: false,\n      autoplay: true\n    },\n    computed: {\n      inView: function (ref) {\n        var autoplay = ref.autoplay;\n        return autoplay === 'inview';\n      }\n    },\n    connected: function () {\n      if (this.inView && !hasAttr(this.$el, 'preload')) {\n        this.$el.preload = 'none';\n      }\n\n      if (this.automute) {\n        mute(this.$el);\n      }\n    },\n    update: {\n      read: function () {\n        if (!isVideo(this.$el)) {\n          return false;\n        }\n\n        return {\n          visible: isVisible(this.$el) && css(this.$el, 'visibility') !== 'hidden',\n          inView: this.inView && isInView(this.$el)\n        };\n      },\n      write: function (ref) {\n        var visible = ref.visible;\n        var inView = ref.inView;\n\n        if (!visible || this.inView && !inView) {\n          pause(this.$el);\n        } else if (this.autoplay === true || this.inView && inView) {\n          play(this.$el);\n        }\n      },\n      events: ['resize', 'scroll']\n    }\n  };\n  var cover = {\n    mixins: [Video],\n    props: {\n      width: Number,\n      height: Number\n    },\n    data: {\n      automute: true\n    },\n    update: {\n      read: function () {\n        var el = this.$el;\n        var ref = getPositionedParent(el) || parent(el);\n        var height = ref.offsetHeight;\n        var width = ref.offsetWidth;\n        var dim = Dimensions.cover({\n          width: this.width || el.naturalWidth || el.videoWidth || el.clientWidth,\n          height: this.height || el.naturalHeight || el.videoHeight || el.clientHeight\n        }, {\n          width: width + (width % 2 ? 1 : 0),\n          height: height + (height % 2 ? 1 : 0)\n        });\n\n        if (!dim.width || !dim.height) {\n          return false;\n        }\n\n        return dim;\n      },\n      write: function (ref) {\n        var height = ref.height;\n        var width = ref.width;\n        css(this.$el, {\n          height: height,\n          width: width\n        });\n      },\n      events: ['resize']\n    }\n  };\n\n  function getPositionedParent(el) {\n    while (el = parent(el)) {\n      if (css(el, 'position') !== 'static') {\n        return el;\n      }\n    }\n  }\n\n  var Container = {\n    props: {\n      container: Boolean\n    },\n    data: {\n      container: true\n    },\n    computed: {\n      container: function (ref) {\n        var container = ref.container;\n        return container === true && this.$container || container && $(container);\n      }\n    }\n  };\n  var Position = {\n    props: {\n      pos: String,\n      offset: null,\n      flip: Boolean,\n      clsPos: String\n    },\n    data: {\n      pos: \"bottom-\" + (isRtl ? 'right' : 'left'),\n      flip: true,\n      offset: false,\n      clsPos: ''\n    },\n    computed: {\n      pos: function (ref) {\n        var pos = ref.pos;\n        return pos.split('-').concat('center').slice(0, 2);\n      },\n      dir: function () {\n        return this.pos[0];\n      },\n      align: function () {\n        return this.pos[1];\n      }\n    },\n    methods: {\n      positionAt: function (element, target, boundary) {\n        removeClasses(element, this.clsPos + \"-(top|bottom|left|right)(-[a-z]+)?\");\n        var ref = this;\n        var offset$1 = ref.offset;\n        var axis = this.getAxis();\n\n        if (!isNumeric(offset$1)) {\n          var node = $(offset$1);\n          offset$1 = node ? offset(node)[axis === 'x' ? 'left' : 'top'] - offset(target)[axis === 'x' ? 'right' : 'bottom'] : 0;\n        }\n\n        var ref$1 = positionAt(element, target, axis === 'x' ? flipPosition(this.dir) + \" \" + this.align : this.align + \" \" + flipPosition(this.dir), axis === 'x' ? this.dir + \" \" + this.align : this.align + \" \" + this.dir, axis === 'x' ? \"\" + (this.dir === 'left' ? -offset$1 : offset$1) : \" \" + (this.dir === 'top' ? -offset$1 : offset$1), null, this.flip, boundary).target;\n        var x = ref$1.x;\n        var y = ref$1.y;\n        this.dir = axis === 'x' ? x : y;\n        this.align = axis === 'x' ? y : x;\n        toggleClass(element, this.clsPos + \"-\" + this.dir + \"-\" + this.align, this.offset === false);\n      },\n      getAxis: function () {\n        return this.dir === 'top' || this.dir === 'bottom' ? 'y' : 'x';\n      }\n    }\n  };\n  var active$1;\n  var drop = {\n    mixins: [Container, Position, Togglable],\n    args: 'pos',\n    props: {\n      mode: 'list',\n      toggle: Boolean,\n      boundary: Boolean,\n      boundaryAlign: Boolean,\n      delayShow: Number,\n      delayHide: Number,\n      clsDrop: String\n    },\n    data: {\n      mode: ['click', 'hover'],\n      toggle: '- *',\n      boundary: true,\n      boundaryAlign: false,\n      delayShow: 0,\n      delayHide: 800,\n      clsDrop: false,\n      animation: ['uk-animation-fade'],\n      cls: 'uk-open',\n      container: false\n    },\n    computed: {\n      boundary: function (ref, $el) {\n        var boundary = ref.boundary;\n        return boundary === true ? window : query(boundary, $el);\n      },\n      clsDrop: function (ref) {\n        var clsDrop = ref.clsDrop;\n        return clsDrop || \"uk-\" + this.$options.name;\n      },\n      clsPos: function () {\n        return this.clsDrop;\n      }\n    },\n    created: function () {\n      this.tracker = new MouseTracker();\n    },\n    connected: function () {\n      addClass(this.$el, this.clsDrop);\n\n      if (this.toggle && !this.target) {\n        this.target = this.$create('toggle', query(this.toggle, this.$el), {\n          target: this.$el,\n          mode: this.mode\n        }).$el;\n        attr(this.target, 'aria-haspopup', true);\n      }\n    },\n    disconnected: function () {\n      if (this.isActive()) {\n        active$1 = null;\n      }\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return \".\" + this.clsDrop + \"-close\";\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.hide(false);\n      }\n    }, {\n      name: 'click',\n      delegate: function () {\n        return 'a[href^=\"#\"]';\n      },\n      handler: function (ref) {\n        var defaultPrevented = ref.defaultPrevented;\n        var hash = ref.current.hash;\n\n        if (!defaultPrevented && hash && !within(hash, this.$el)) {\n          this.hide(false);\n        }\n      }\n    }, {\n      name: 'beforescroll',\n      handler: function () {\n        this.hide(false);\n      }\n    }, {\n      name: 'toggle',\n      self: true,\n      handler: function (e, toggle) {\n        e.preventDefault();\n\n        if (this.isToggled()) {\n          this.hide(false);\n        } else {\n          this.show(toggle.$el, false);\n        }\n      }\n    }, {\n      name: 'toggleshow',\n      self: true,\n      handler: function (e, toggle) {\n        e.preventDefault();\n        this.show(toggle.$el);\n      }\n    }, {\n      name: 'togglehide',\n      self: true,\n      handler: function (e) {\n        e.preventDefault();\n\n        if (!matches(this.$el, ':focus,:hover')) {\n          this.hide();\n        }\n      }\n    }, {\n      name: pointerEnter + \" focusin\",\n      filter: function () {\n        return includes(this.mode, 'hover');\n      },\n      handler: function (e) {\n        if (!isTouch(e)) {\n          this.clearTimers();\n        }\n      }\n    }, {\n      name: pointerLeave + \" focusout\",\n      filter: function () {\n        return includes(this.mode, 'hover');\n      },\n      handler: function (e) {\n        if (!isTouch(e) && e.relatedTarget) {\n          this.hide();\n        }\n      }\n    }, {\n      name: 'toggled',\n      self: true,\n      handler: function (e, toggled) {\n        if (!toggled) {\n          return;\n        }\n\n        this.clearTimers();\n        this.position();\n      }\n    }, {\n      name: 'show',\n      self: true,\n      handler: function () {\n        var this$1$1 = this;\n        active$1 = this;\n        this.tracker.init();\n        once(this.$el, 'hide', on(document, pointerDown, function (ref) {\n          var target = ref.target;\n          return !within(target, this$1$1.$el) && once(document, pointerUp + \" \" + pointerCancel + \" scroll\", function (ref) {\n            var defaultPrevented = ref.defaultPrevented;\n            var type = ref.type;\n            var newTarget = ref.target;\n\n            if (!defaultPrevented && type === pointerUp && target === newTarget && !(this$1$1.target && within(target, this$1$1.target))) {\n              this$1$1.hide(false);\n            }\n          }, true);\n        }), {\n          self: true\n        });\n        once(this.$el, 'hide', on(document, 'keydown', function (e) {\n          if (e.keyCode === 27) {\n            this$1$1.hide(false);\n          }\n        }), {\n          self: true\n        });\n      }\n    }, {\n      name: 'beforehide',\n      self: true,\n      handler: function () {\n        this.clearTimers();\n      }\n    }, {\n      name: 'hide',\n      handler: function (ref) {\n        var target = ref.target;\n\n        if (this.$el !== target) {\n          active$1 = active$1 === null && within(target, this.$el) && this.isToggled() ? this : active$1;\n          return;\n        }\n\n        active$1 = this.isActive() ? null : active$1;\n        this.tracker.cancel();\n      }\n    }],\n    update: {\n      write: function () {\n        if (this.isToggled() && !hasClass(this.$el, this.clsEnter)) {\n          this.position();\n        }\n      },\n      events: ['resize']\n    },\n    methods: {\n      show: function (target, delay) {\n        var this$1$1 = this;\n        if (target === void 0) target = this.target;\n        if (delay === void 0) delay = true;\n\n        if (this.isToggled() && target && this.target && target !== this.target) {\n          this.hide(false);\n        }\n\n        this.target = target;\n        this.clearTimers();\n\n        if (this.isActive()) {\n          return;\n        }\n\n        if (active$1) {\n          if (delay && active$1.isDelaying) {\n            this.showTimer = setTimeout(this.show, 10);\n            return;\n          }\n\n          var prev;\n\n          while (active$1 && prev !== active$1 && !within(this.$el, active$1.$el)) {\n            prev = active$1;\n            active$1.hide(false);\n          }\n        }\n\n        if (this.container && parent(this.$el) !== this.container) {\n          append(this.container, this.$el);\n        }\n\n        this.showTimer = setTimeout(function () {\n          return this$1$1.toggleElement(this$1$1.$el, true);\n        }, delay && this.delayShow || 0);\n      },\n      hide: function (delay) {\n        var this$1$1 = this;\n        if (delay === void 0) delay = true;\n\n        var hide = function () {\n          return this$1$1.toggleElement(this$1$1.$el, false, false);\n        };\n\n        this.clearTimers();\n        this.isDelaying = getPositionedElements(this.$el).some(function (el) {\n          return this$1$1.tracker.movesTo(el);\n        });\n\n        if (delay && this.isDelaying) {\n          this.hideTimer = setTimeout(this.hide, 50);\n        } else if (delay && this.delayHide) {\n          this.hideTimer = setTimeout(hide, this.delayHide);\n        } else {\n          hide();\n        }\n      },\n      clearTimers: function () {\n        clearTimeout(this.showTimer);\n        clearTimeout(this.hideTimer);\n        this.showTimer = null;\n        this.hideTimer = null;\n        this.isDelaying = false;\n      },\n      isActive: function () {\n        return active$1 === this;\n      },\n      position: function () {\n        removeClass(this.$el, this.clsDrop + \"-stack\");\n        toggleClass(this.$el, this.clsDrop + \"-boundary\", this.boundaryAlign);\n        var boundary = offset(this.boundary);\n        var alignTo = this.boundaryAlign ? boundary : offset(this.target);\n\n        if (this.align === 'justify') {\n          var prop = this.getAxis() === 'y' ? 'width' : 'height';\n          css(this.$el, prop, alignTo[prop]);\n        } else if (this.boundary && this.$el.offsetWidth > Math.max(boundary.right - alignTo.left, alignTo.right - boundary.left)) {\n          addClass(this.$el, this.clsDrop + \"-stack\");\n        }\n\n        this.positionAt(this.$el, this.boundaryAlign ? this.boundary : this.target, this.boundary);\n      }\n    }\n  };\n\n  function getPositionedElements(el) {\n    var result = [];\n    apply$1(el, function (el) {\n      return css(el, 'position') !== 'static' && result.push(el);\n    });\n    return result;\n  }\n\n  var formCustom = {\n    mixins: [Class],\n    args: 'target',\n    props: {\n      target: Boolean\n    },\n    data: {\n      target: false\n    },\n    computed: {\n      input: function (_, $el) {\n        return $(selInput, $el);\n      },\n      state: function () {\n        return this.input.nextElementSibling;\n      },\n      target: function (ref, $el) {\n        var target = ref.target;\n        return target && (target === true && parent(this.input) === $el && this.input.nextElementSibling || query(target, $el));\n      }\n    },\n    update: function () {\n      var ref = this;\n      var target = ref.target;\n      var input = ref.input;\n\n      if (!target) {\n        return;\n      }\n\n      var option;\n      var prop = isInput(target) ? 'value' : 'textContent';\n      var prev = target[prop];\n      var value = input.files && input.files[0] ? input.files[0].name : matches(input, 'select') && (option = $$('option', input).filter(function (el) {\n        return el.selected;\n      })[0]) // eslint-disable-line prefer-destructuring\n      ? option.textContent : input.value;\n\n      if (prev !== value) {\n        target[prop] = value;\n      }\n    },\n    events: [{\n      name: 'change',\n      handler: function () {\n        this.$update();\n      }\n    }, {\n      name: 'reset',\n      el: function () {\n        return closest(this.$el, 'form');\n      },\n      handler: function () {\n        this.$update();\n      }\n    }]\n  }; // Deprecated\n\n  var gif = {\n    update: {\n      read: function (data) {\n        var inview = isInView(this.$el);\n\n        if (!inview || data.isInView === inview) {\n          return false;\n        }\n\n        data.isInView = inview;\n      },\n      write: function () {\n        this.$el.src = '' + this.$el.src; // force self-assign\n      },\n      events: ['scroll', 'resize']\n    }\n  };\n  var Margin = {\n    props: {\n      margin: String,\n      firstColumn: Boolean\n    },\n    data: {\n      margin: 'uk-margin-small-top',\n      firstColumn: 'uk-first-column'\n    },\n    update: {\n      read: function () {\n        var rows = getRows(this.$el.children);\n        return {\n          rows: rows,\n          columns: getColumns(rows)\n        };\n      },\n      write: function (ref) {\n        var columns = ref.columns;\n        var rows = ref.rows;\n\n        for (var i = 0; i < rows.length; i++) {\n          for (var j = 0; j < rows[i].length; j++) {\n            toggleClass(rows[i][j], this.margin, i !== 0);\n            toggleClass(rows[i][j], this.firstColumn, !!~columns[0].indexOf(rows[i][j]));\n          }\n        }\n      },\n      events: ['resize']\n    }\n  };\n\n  function getRows(items) {\n    return sortBy(items, 'top', 'bottom');\n  }\n\n  function getColumns(rows) {\n    var columns = [];\n\n    for (var i = 0; i < rows.length; i++) {\n      var sorted = sortBy(rows[i], 'left', 'right');\n\n      for (var j = 0; j < sorted.length; j++) {\n        columns[j] = !columns[j] ? sorted[j] : columns[j].concat(sorted[j]);\n      }\n    }\n\n    return isRtl ? columns.reverse() : columns;\n  }\n\n  function sortBy(items, startProp, endProp) {\n    var sorted = [[]];\n\n    for (var i = 0; i < items.length; i++) {\n      var el = items[i];\n\n      if (!isVisible(el)) {\n        continue;\n      }\n\n      var dim = getOffset(el);\n\n      for (var j = sorted.length - 1; j >= 0; j--) {\n        var current = sorted[j];\n\n        if (!current[0]) {\n          current.push(el);\n          break;\n        }\n\n        var startDim = void 0;\n\n        if (current[0].offsetParent === el.offsetParent) {\n          startDim = getOffset(current[0]);\n        } else {\n          dim = getOffset(el, true);\n          startDim = getOffset(current[0], true);\n        }\n\n        if (dim[startProp] >= startDim[endProp] - 1 && dim[startProp] !== startDim[startProp]) {\n          sorted.push([el]);\n          break;\n        }\n\n        if (dim[endProp] - 1 > startDim[startProp] || dim[startProp] === startDim[startProp]) {\n          current.push(el);\n          break;\n        }\n\n        if (j === 0) {\n          sorted.unshift([el]);\n          break;\n        }\n      }\n    }\n\n    return sorted;\n  }\n\n  function getOffset(element, offset) {\n    var assign;\n    if (offset === void 0) offset = false;\n    var offsetTop = element.offsetTop;\n    var offsetLeft = element.offsetLeft;\n    var offsetHeight = element.offsetHeight;\n    var offsetWidth = element.offsetWidth;\n\n    if (offset) {\n      assign = offsetPosition(element), offsetTop = assign[0], offsetLeft = assign[1];\n    }\n\n    return {\n      top: offsetTop,\n      left: offsetLeft,\n      bottom: offsetTop + offsetHeight,\n      right: offsetLeft + offsetWidth\n    };\n  }\n\n  var grid = {\n    extends: Margin,\n    mixins: [Class],\n    name: 'grid',\n    props: {\n      masonry: Boolean,\n      parallax: Number\n    },\n    data: {\n      margin: 'uk-grid-margin',\n      clsStack: 'uk-grid-stack',\n      masonry: false,\n      parallax: 0\n    },\n    connected: function () {\n      this.masonry && addClass(this.$el, 'uk-flex-top uk-flex-wrap-top');\n    },\n    update: [{\n      write: function (ref) {\n        var columns = ref.columns;\n        toggleClass(this.$el, this.clsStack, columns.length < 2);\n      },\n      events: ['resize']\n    }, {\n      read: function (data) {\n        var columns = data.columns;\n        var rows = data.rows; // Filter component makes elements positioned absolute\n\n        if (!columns.length || !this.masonry && !this.parallax || positionedAbsolute(this.$el)) {\n          data.translates = false;\n          return false;\n        }\n\n        var translates = false;\n        var nodes = children(this.$el);\n        var columnHeights = getColumnHeights(columns);\n        var margin = getMarginTop(nodes, this.margin) * (rows.length - 1);\n        var elHeight = Math.max.apply(Math, columnHeights) + margin;\n\n        if (this.masonry) {\n          columns = columns.map(function (column) {\n            return sortBy$1(column, 'offsetTop');\n          });\n          translates = getTranslates(rows, columns);\n        }\n\n        var padding = Math.abs(this.parallax);\n\n        if (padding) {\n          padding = columnHeights.reduce(function (newPadding, hgt, i) {\n            return Math.max(newPadding, hgt + margin + (i % 2 ? padding : padding / 8) - elHeight);\n          }, 0);\n        }\n\n        return {\n          padding: padding,\n          columns: columns,\n          translates: translates,\n          height: translates ? elHeight : ''\n        };\n      },\n      write: function (ref) {\n        var height = ref.height;\n        var padding = ref.padding;\n        css(this.$el, 'paddingBottom', padding || '');\n        height !== false && css(this.$el, 'height', height);\n      },\n      events: ['resize']\n    }, {\n      read: function (ref) {\n        ref.height;\n\n        if (positionedAbsolute(this.$el)) {\n          return false;\n        }\n\n        return {\n          scrolled: this.parallax ? scrolledOver(this.$el) * Math.abs(this.parallax) : false\n        };\n      },\n      write: function (ref) {\n        var columns = ref.columns;\n        var scrolled = ref.scrolled;\n        var translates = ref.translates;\n\n        if (scrolled === false && !translates) {\n          return;\n        }\n\n        columns.forEach(function (column, i) {\n          return column.forEach(function (el, j) {\n            return css(el, 'transform', !scrolled && !translates ? '' : \"translateY(\" + ((translates && -translates[i][j]) + (scrolled ? i % 2 ? scrolled : scrolled / 8 : 0)) + \"px)\");\n          });\n        });\n      },\n      events: ['scroll', 'resize']\n    }]\n  };\n\n  function positionedAbsolute(el) {\n    return children(el).some(function (el) {\n      return css(el, 'position') === 'absolute';\n    });\n  }\n\n  function getTranslates(rows, columns) {\n    var rowHeights = rows.map(function (row) {\n      return Math.max.apply(Math, row.map(function (el) {\n        return el.offsetHeight;\n      }));\n    });\n    return columns.map(function (elements) {\n      var prev = 0;\n      return elements.map(function (element, row) {\n        return prev += row ? rowHeights[row - 1] - elements[row - 1].offsetHeight : 0;\n      });\n    });\n  }\n\n  function getMarginTop(nodes, cls) {\n    var ref = nodes.filter(function (el) {\n      return hasClass(el, cls);\n    });\n    var node = ref[0];\n    return toFloat(node ? css(node, 'marginTop') : css(nodes[0], 'paddingLeft'));\n  }\n\n  function getColumnHeights(columns) {\n    return columns.map(function (column) {\n      return column.reduce(function (sum, el) {\n        return sum + el.offsetHeight;\n      }, 0);\n    });\n  } // IE 11 fix (min-height on a flex container won't apply to its flex items)\n\n\n  var FlexBug = isIE ? {\n    props: {\n      selMinHeight: String\n    },\n    data: {\n      selMinHeight: false,\n      forceHeight: false\n    },\n    computed: {\n      elements: function (ref, $el) {\n        var selMinHeight = ref.selMinHeight;\n        return selMinHeight ? $$(selMinHeight, $el) : [$el];\n      }\n    },\n    update: [{\n      read: function () {\n        css(this.elements, 'height', '');\n      },\n      order: -5,\n      events: ['resize']\n    }, {\n      write: function () {\n        var this$1$1 = this;\n        this.elements.forEach(function (el) {\n          var height = toFloat(css(el, 'minHeight'));\n\n          if (height && (this$1$1.forceHeight || Math.round(height + boxModelAdjust(el, 'height', 'content-box')) >= el.offsetHeight)) {\n            css(el, 'height', height);\n          }\n        });\n      },\n      order: 5,\n      events: ['resize']\n    }]\n  } : {};\n  var heightMatch = {\n    mixins: [FlexBug],\n    args: 'target',\n    props: {\n      target: String,\n      row: Boolean\n    },\n    data: {\n      target: '> *',\n      row: true,\n      forceHeight: true\n    },\n    computed: {\n      elements: function (ref, $el) {\n        var target = ref.target;\n        return $$(target, $el);\n      }\n    },\n    update: {\n      read: function () {\n        return {\n          rows: (this.row ? getRows(this.elements) : [this.elements]).map(match$1)\n        };\n      },\n      write: function (ref) {\n        var rows = ref.rows;\n        rows.forEach(function (ref) {\n          var heights = ref.heights;\n          var elements = ref.elements;\n          return elements.forEach(function (el, i) {\n            return css(el, 'minHeight', heights[i]);\n          });\n        });\n      },\n      events: ['resize']\n    }\n  };\n\n  function match$1(elements) {\n    if (elements.length < 2) {\n      return {\n        heights: [''],\n        elements: elements\n      };\n    }\n\n    var heights = elements.map(getHeight);\n    var max = Math.max.apply(Math, heights);\n    var hasMinHeight = elements.some(function (el) {\n      return el.style.minHeight;\n    });\n    var hasShrunk = elements.some(function (el, i) {\n      return !el.style.minHeight && heights[i] < max;\n    });\n\n    if (hasMinHeight && hasShrunk) {\n      css(elements, 'minHeight', '');\n      heights = elements.map(getHeight);\n      max = Math.max.apply(Math, heights);\n    }\n\n    heights = elements.map(function (el, i) {\n      return heights[i] === max && toFloat(el.style.minHeight).toFixed(2) !== max.toFixed(2) ? '' : max;\n    });\n    return {\n      heights: heights,\n      elements: elements\n    };\n  }\n\n  function getHeight(element) {\n    var style = false;\n\n    if (!isVisible(element)) {\n      style = element.style.display;\n      css(element, 'display', 'block', 'important');\n    }\n\n    var height = dimensions(element).height - boxModelAdjust(element, 'height', 'content-box');\n\n    if (style !== false) {\n      css(element, 'display', style);\n    }\n\n    return height;\n  }\n\n  var heightViewport = {\n    mixins: [FlexBug],\n    props: {\n      expand: Boolean,\n      offsetTop: Boolean,\n      offsetBottom: Boolean,\n      minHeight: Number\n    },\n    data: {\n      expand: false,\n      offsetTop: false,\n      offsetBottom: false,\n      minHeight: 0\n    },\n    update: {\n      read: function (ref) {\n        var prev = ref.minHeight;\n\n        if (!isVisible(this.$el)) {\n          return false;\n        }\n\n        var minHeight = '';\n        var box = boxModelAdjust(this.$el, 'height', 'content-box');\n\n        if (this.expand) {\n          minHeight = height(window) - (dimensions(document.documentElement).height - dimensions(this.$el).height) - box || '';\n        } else {\n          // on mobile devices (iOS and Android) window.innerHeight !== 100vh\n          minHeight = 'calc(100vh';\n\n          if (this.offsetTop) {\n            var ref$1 = offset(this.$el);\n            var top = ref$1.top;\n            minHeight += top > 0 && top < height(window) / 2 ? \" - \" + top + \"px\" : '';\n          }\n\n          if (this.offsetBottom === true) {\n            minHeight += \" - \" + dimensions(this.$el.nextElementSibling).height + \"px\";\n          } else if (isNumeric(this.offsetBottom)) {\n            minHeight += \" - \" + this.offsetBottom + \"vh\";\n          } else if (this.offsetBottom && endsWith(this.offsetBottom, 'px')) {\n            minHeight += \" - \" + toFloat(this.offsetBottom) + \"px\";\n          } else if (isString(this.offsetBottom)) {\n            minHeight += \" - \" + dimensions(query(this.offsetBottom, this.$el)).height + \"px\";\n          }\n\n          minHeight += (box ? \" - \" + box + \"px\" : '') + \")\";\n        }\n\n        return {\n          minHeight: minHeight,\n          prev: prev\n        };\n      },\n      write: function (ref) {\n        var minHeight = ref.minHeight;\n        var prev = ref.prev;\n        css(this.$el, {\n          minHeight: minHeight\n        });\n\n        if (minHeight !== prev) {\n          this.$update(this.$el, 'resize');\n        }\n\n        if (this.minHeight && toFloat(css(this.$el, 'minHeight')) < this.minHeight) {\n          css(this.$el, 'minHeight', this.minHeight);\n        }\n      },\n      events: ['resize']\n    }\n  };\n  var SVG = {\n    args: 'src',\n    props: {\n      id: Boolean,\n      icon: String,\n      src: String,\n      style: String,\n      width: Number,\n      height: Number,\n      ratio: Number,\n      class: String,\n      strokeAnimation: Boolean,\n      focusable: Boolean,\n      // IE 11\n      attributes: 'list'\n    },\n    data: {\n      ratio: 1,\n      include: ['style', 'class', 'focusable'],\n      class: '',\n      strokeAnimation: false\n    },\n    beforeConnect: function () {\n      this.class += ' uk-svg';\n    },\n    connected: function () {\n      var this$1$1 = this;\n      var assign;\n\n      if (!this.icon && includes(this.src, '#')) {\n        assign = this.src.split('#'), this.src = assign[0], this.icon = assign[1];\n      }\n\n      this.svg = this.getSvg().then(function (el) {\n        if (this$1$1._connected) {\n          var svg = insertSVG(el, this$1$1.$el);\n\n          if (this$1$1.svgEl && svg !== this$1$1.svgEl) {\n            remove$1(this$1$1.svgEl);\n          }\n\n          this$1$1.applyAttributes(svg, el);\n          this$1$1.$emit();\n          return this$1$1.svgEl = svg;\n        }\n      }, noop);\n    },\n    disconnected: function () {\n      var this$1$1 = this;\n      this.svg.then(function (svg) {\n        if (this$1$1._connected) {\n          return;\n        }\n\n        if (isVoidElement(this$1$1.$el)) {\n          this$1$1.$el.hidden = false;\n        }\n\n        remove$1(svg);\n        this$1$1.svgEl = null;\n      });\n      this.svg = null;\n    },\n    update: {\n      read: function () {\n        return !!(this.strokeAnimation && this.svgEl && isVisible(this.svgEl));\n      },\n      write: function () {\n        applyAnimation(this.svgEl);\n      },\n      type: ['resize']\n    },\n    methods: {\n      getSvg: function () {\n        var this$1$1 = this;\n        return loadSVG(this.src).then(function (svg) {\n          return parseSVG(svg, this$1$1.icon) || Promise$1.reject('SVG not found.');\n        });\n      },\n      applyAttributes: function (el, ref) {\n        var this$1$1 = this;\n\n        for (var prop in this.$options.props) {\n          if (includes(this.include, prop) && prop in this) {\n            attr(el, prop, this[prop]);\n          }\n        }\n\n        for (var attribute in this.attributes) {\n          var ref$1 = this.attributes[attribute].split(':', 2);\n          var prop$1 = ref$1[0];\n          var value = ref$1[1];\n          attr(el, prop$1, value);\n        }\n\n        if (!this.id) {\n          removeAttr(el, 'id');\n        }\n\n        var props = ['width', 'height'];\n        var dimensions = props.map(function (prop) {\n          return this$1$1[prop];\n        });\n\n        if (!dimensions.some(function (val) {\n          return val;\n        })) {\n          dimensions = props.map(function (prop) {\n            return attr(ref, prop);\n          });\n        }\n\n        var viewBox = attr(ref, 'viewBox');\n\n        if (viewBox && !dimensions.some(function (val) {\n          return val;\n        })) {\n          dimensions = viewBox.split(' ').slice(2);\n        }\n\n        dimensions.forEach(function (val, i) {\n          return attr(el, props[i], toFloat(val) * this$1$1.ratio || null);\n        });\n      }\n    }\n  };\n  var loadSVG = memoize(function (src) {\n    return new Promise$1(function (resolve, reject) {\n      if (!src) {\n        reject();\n        return;\n      }\n\n      if (startsWith(src, 'data:')) {\n        resolve(decodeURIComponent(src.split(',')[1]));\n      } else {\n        ajax(src).then(function (xhr) {\n          return resolve(xhr.response);\n        }, function () {\n          return reject('SVG not found.');\n        });\n      }\n    });\n  });\n\n  function parseSVG(svg, icon) {\n    if (icon && includes(svg, '<symbol')) {\n      svg = parseSymbols(svg, icon) || svg;\n    }\n\n    svg = $(svg.substr(svg.indexOf('<svg')));\n    return svg && svg.hasChildNodes() && svg;\n  }\n\n  var symbolRe = /<symbol([^]*?id=(['\"])(.+?)\\2[^]*?<\\/)symbol>/g;\n  var symbols = {};\n\n  function parseSymbols(svg, icon) {\n    if (!symbols[svg]) {\n      symbols[svg] = {};\n      symbolRe.lastIndex = 0;\n      var match;\n\n      while (match = symbolRe.exec(svg)) {\n        symbols[svg][match[3]] = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + match[1] + \"svg>\";\n      }\n    }\n\n    return symbols[svg][icon];\n  }\n\n  function applyAnimation(el) {\n    var length = getMaxPathLength(el);\n\n    if (length) {\n      el.style.setProperty('--uk-animation-stroke', length);\n    }\n  }\n\n  function getMaxPathLength(el) {\n    return Math.ceil(Math.max.apply(Math, [0].concat($$('[stroke]', el).map(function (stroke) {\n      try {\n        return stroke.getTotalLength();\n      } catch (e) {\n        return 0;\n      }\n    }))));\n  }\n\n  function insertSVG(el, root) {\n    if (isVoidElement(root) || root.tagName === 'CANVAS') {\n      root.hidden = true;\n      var next = root.nextElementSibling;\n      return equals(el, next) ? next : after(root, el);\n    }\n\n    var last = root.lastElementChild;\n    return equals(el, last) ? last : append(root, el);\n  }\n\n  function equals(el, other) {\n    return isSVG(el) && isSVG(other) && innerHTML(el) === innerHTML(other);\n  }\n\n  function isSVG(el) {\n    return el && el.tagName === 'svg';\n  }\n\n  function innerHTML(el) {\n    return (el.innerHTML || new XMLSerializer().serializeToString(el).replace(/<svg.*?>(.*?)<\\/svg>/g, '$1')).replace(/\\s/g, '');\n  }\n\n  var closeIcon = \"<svg width=\\\"14\\\" height=\\\"14\\\" viewBox=\\\"0 0 14 14\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"13\\\" y2=\\\"13\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"13\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"13\\\"/></svg>\";\n  var closeLarge = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"1\\\" y1=\\\"1\\\" x2=\\\"19\\\" y2=\\\"19\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" x1=\\\"19\\\" y1=\\\"1\\\" x2=\\\"1\\\" y2=\\\"19\\\"/></svg>\";\n  var marker = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"9\\\" y=\\\"4\\\" width=\\\"1\\\" height=\\\"11\\\"/><rect x=\\\"4\\\" y=\\\"9\\\" width=\\\"11\\\" height=\\\"1\\\"/></svg>\";\n  var navbarToggleIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect y=\\\"9\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect y=\\\"3\\\" width=\\\"20\\\" height=\\\"2\\\"/><rect y=\\\"15\\\" width=\\\"20\\\" height=\\\"2\\\"/></svg>\";\n  var overlayIcon = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect x=\\\"19\\\" y=\\\"0\\\" width=\\\"1\\\" height=\\\"40\\\"/><rect x=\\\"0\\\" y=\\\"19\\\" width=\\\"40\\\" height=\\\"1\\\"/></svg>\";\n  var paginationNext = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 1 6 6 1 11\\\"/></svg>\";\n  var paginationPrevious = \"<svg width=\\\"7\\\" height=\\\"12\\\" viewBox=\\\"0 0 7 12\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"6 1 1 6 6 11\\\"/></svg>\";\n  var searchIcon = \"<svg width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"9\\\" cy=\\\"9\\\" r=\\\"7\\\"/><path fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" d=\\\"M14,14 L18,18 L14,14 Z\\\"/></svg>\";\n  var searchLarge = \"<svg width=\\\"40\\\" height=\\\"40\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" cx=\\\"17.5\\\" cy=\\\"17.5\\\" r=\\\"16.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.8\\\" x1=\\\"38\\\" y1=\\\"39\\\" x2=\\\"29\\\" y2=\\\"30\\\"/></svg>\";\n  var searchNavbar = \"<svg width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" cx=\\\"10.5\\\" cy=\\\"10.5\\\" r=\\\"9.5\\\"/><line fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.1\\\" x1=\\\"23\\\" y1=\\\"23\\\" x2=\\\"17\\\" y2=\\\"17\\\"/></svg>\";\n  var slidenavNext = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"1.225,23 12.775,12 1.225,1 \\\"/></svg>\";\n  var slidenavNextLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"4.002,38.547 22.527,20.024 4,1.5 \\\"/></svg>\";\n  var slidenavPrevious = \"<svg width=\\\"14\\\" height=\\\"24\\\" viewBox=\\\"0 0 14 24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.4\\\" points=\\\"12.775,1 1.225,12 12.775,23 \\\"/></svg>\";\n  var slidenavPreviousLarge = \"<svg width=\\\"25\\\" height=\\\"40\\\" viewBox=\\\"0 0 25 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"2\\\" points=\\\"20.527,1.5 2,20.024 20.525,38.547 \\\"/></svg>\";\n  var spinner = \"<svg width=\\\"30\\\" height=\\\"30\\\" viewBox=\\\"0 0 30 30\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle fill=\\\"none\\\" stroke=\\\"#000\\\" cx=\\\"15\\\" cy=\\\"15\\\" r=\\\"14\\\"/></svg>\";\n  var totop = \"<svg width=\\\"18\\\" height=\\\"10\\\" viewBox=\\\"0 0 18 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><polyline fill=\\\"none\\\" stroke=\\\"#000\\\" stroke-width=\\\"1.2\\\" points=\\\"1 9 9 1 17 9 \\\"/></svg>\";\n  var icons = {\n    spinner: spinner,\n    totop: totop,\n    marker: marker,\n    'close-icon': closeIcon,\n    'close-large': closeLarge,\n    'navbar-toggle-icon': navbarToggleIcon,\n    'overlay-icon': overlayIcon,\n    'pagination-next': paginationNext,\n    'pagination-previous': paginationPrevious,\n    'search-icon': searchIcon,\n    'search-large': searchLarge,\n    'search-navbar': searchNavbar,\n    'slidenav-next': slidenavNext,\n    'slidenav-next-large': slidenavNextLarge,\n    'slidenav-previous': slidenavPrevious,\n    'slidenav-previous-large': slidenavPreviousLarge\n  };\n  var Icon = {\n    install: install$3,\n    extends: SVG,\n    args: 'icon',\n    props: ['icon'],\n    data: {\n      include: ['focusable']\n    },\n    isIcon: true,\n    beforeConnect: function () {\n      addClass(this.$el, 'uk-icon');\n    },\n    methods: {\n      getSvg: function () {\n        var icon = getIcon(this.icon);\n\n        if (!icon) {\n          return Promise$1.reject('Icon not found.');\n        }\n\n        return Promise$1.resolve(icon);\n      }\n    }\n  };\n  var IconComponent = {\n    args: false,\n    extends: Icon,\n    data: function (vm) {\n      return {\n        icon: hyphenate(vm.constructor.options.name)\n      };\n    },\n    beforeConnect: function () {\n      addClass(this.$el, this.$name);\n    }\n  };\n  var Slidenav = {\n    extends: IconComponent,\n    beforeConnect: function () {\n      addClass(this.$el, 'uk-slidenav');\n    },\n    computed: {\n      icon: function (ref, $el) {\n        var icon = ref.icon;\n        return hasClass($el, 'uk-slidenav-large') ? icon + \"-large\" : icon;\n      }\n    }\n  };\n  var Search = {\n    extends: IconComponent,\n    computed: {\n      icon: function (ref, $el) {\n        var icon = ref.icon;\n        return hasClass($el, 'uk-search-icon') && parents($el, '.uk-search-large').length ? 'search-large' : parents($el, '.uk-search-navbar').length ? 'search-navbar' : icon;\n      }\n    }\n  };\n  var Close = {\n    extends: IconComponent,\n    computed: {\n      icon: function () {\n        return \"close-\" + (hasClass(this.$el, 'uk-close-large') ? 'large' : 'icon');\n      }\n    }\n  };\n  var Spinner = {\n    extends: IconComponent,\n    connected: function () {\n      var this$1$1 = this;\n      this.svg.then(function (svg) {\n        return svg && this$1$1.ratio !== 1 && css($('circle', svg), 'strokeWidth', 1 / this$1$1.ratio);\n      });\n    }\n  };\n  var parsed = {};\n\n  function install$3(UIkit) {\n    UIkit.icon.add = function (name, svg) {\n      var obj;\n      var added = isString(name) ? (obj = {}, obj[name] = svg, obj) : name;\n      each(added, function (svg, name) {\n        icons[name] = svg;\n        delete parsed[name];\n      });\n\n      if (UIkit._initialized) {\n        apply$1(document.body, function (el) {\n          return each(UIkit.getComponents(el), function (cmp) {\n            cmp.$options.isIcon && cmp.icon in added && cmp.$reset();\n          });\n        });\n      }\n    };\n  }\n\n  function getIcon(icon) {\n    if (!icons[icon]) {\n      return null;\n    }\n\n    if (!parsed[icon]) {\n      parsed[icon] = $((icons[applyRtl(icon)] || icons[icon]).trim());\n    }\n\n    return parsed[icon].cloneNode(true);\n  }\n\n  function applyRtl(icon) {\n    return isRtl ? swap(swap(icon, 'left', 'right'), 'previous', 'next') : icon;\n  }\n\n  var img = {\n    args: 'dataSrc',\n    props: {\n      dataSrc: String,\n      dataSrcset: Boolean,\n      sizes: String,\n      width: Number,\n      height: Number,\n      offsetTop: String,\n      offsetLeft: String,\n      target: String\n    },\n    data: {\n      dataSrc: '',\n      dataSrcset: false,\n      sizes: false,\n      width: false,\n      height: false,\n      offsetTop: '50vh',\n      offsetLeft: '50vw',\n      target: false\n    },\n    computed: {\n      cacheKey: function (ref) {\n        var dataSrc = ref.dataSrc;\n        return this.$name + \".\" + dataSrc;\n      },\n      width: function (ref) {\n        var width = ref.width;\n        var dataWidth = ref.dataWidth;\n        return width || dataWidth;\n      },\n      height: function (ref) {\n        var height = ref.height;\n        var dataHeight = ref.dataHeight;\n        return height || dataHeight;\n      },\n      sizes: function (ref) {\n        var sizes = ref.sizes;\n        var dataSizes = ref.dataSizes;\n        return sizes || dataSizes;\n      },\n      isImg: function (_, $el) {\n        return isImg($el);\n      },\n      target: {\n        get: function (ref) {\n          var target = ref.target;\n          return [this.$el].concat(queryAll(target, this.$el));\n        },\n        watch: function () {\n          this.observe();\n        }\n      },\n      offsetTop: function (ref) {\n        var offsetTop = ref.offsetTop;\n        return toPx(offsetTop, 'height');\n      },\n      offsetLeft: function (ref) {\n        var offsetLeft = ref.offsetLeft;\n        return toPx(offsetLeft, 'width');\n      }\n    },\n    connected: function () {\n      if (!window.IntersectionObserver) {\n        setSrcAttrs(this.$el, this.dataSrc, this.dataSrcset, this.sizes);\n        return;\n      }\n\n      if (storage[this.cacheKey]) {\n        setSrcAttrs(this.$el, storage[this.cacheKey], this.dataSrcset, this.sizes);\n      } else if (this.isImg && this.width && this.height) {\n        setSrcAttrs(this.$el, getPlaceholderImage(this.width, this.height, this.sizes));\n      }\n\n      this.observer = new IntersectionObserver(this.load, {\n        rootMargin: this.offsetTop + \"px \" + this.offsetLeft + \"px\"\n      });\n      requestAnimationFrame(this.observe);\n    },\n    disconnected: function () {\n      this.observer && this.observer.disconnect();\n    },\n    update: {\n      read: function (ref) {\n        var this$1$1 = this;\n        var image = ref.image;\n\n        if (!this.observer) {\n          return false;\n        }\n\n        if (!image && document.readyState === 'complete') {\n          this.load(this.observer.takeRecords());\n        }\n\n        if (this.isImg) {\n          return false;\n        }\n\n        image && image.then(function (img) {\n          return img && img.currentSrc !== '' && setSrcAttrs(this$1$1.$el, currentSrc(img));\n        });\n      },\n      write: function (data) {\n        if (this.dataSrcset && window.devicePixelRatio !== 1) {\n          var bgSize = css(this.$el, 'backgroundSize');\n\n          if (bgSize.match(/^(auto\\s?)+$/) || toFloat(bgSize) === data.bgSize) {\n            data.bgSize = getSourceSize(this.dataSrcset, this.sizes);\n            css(this.$el, 'backgroundSize', data.bgSize + \"px\");\n          }\n        }\n      },\n      events: ['resize']\n    },\n    methods: {\n      load: function (entries) {\n        var this$1$1 = this; // Old chromium based browsers (UC Browser) did not implement `isIntersecting`\n\n        if (!entries.some(function (entry) {\n          return isUndefined(entry.isIntersecting) || entry.isIntersecting;\n        })) {\n          return;\n        }\n\n        this._data.image = getImage(this.dataSrc, this.dataSrcset, this.sizes).then(function (img) {\n          setSrcAttrs(this$1$1.$el, currentSrc(img), img.srcset, img.sizes);\n          storage[this$1$1.cacheKey] = currentSrc(img);\n          return img;\n        }, function (e) {\n          return trigger(this$1$1.$el, new e.constructor(e.type, e));\n        });\n        this.observer.disconnect();\n      },\n      observe: function () {\n        var this$1$1 = this;\n\n        if (this._connected && !this._data.image) {\n          this.target.forEach(function (el) {\n            return this$1$1.observer.observe(el);\n          });\n        }\n      }\n    }\n  };\n\n  function setSrcAttrs(el, src, srcset, sizes) {\n    if (isImg(el)) {\n      var set = function (prop, val) {\n        return val && val !== el[prop] && (el[prop] = val);\n      };\n\n      set('sizes', sizes);\n      set('srcset', srcset);\n      set('src', src);\n    } else if (src) {\n      var change = !includes(el.style.backgroundImage, src);\n\n      if (change) {\n        css(el, 'backgroundImage', \"url(\" + escape(src) + \")\");\n        trigger(el, createEvent('load', false));\n      }\n    }\n  }\n\n  function getPlaceholderImage(width, height, sizes) {\n    var assign;\n\n    if (sizes) {\n      assign = Dimensions.ratio({\n        width: width,\n        height: height\n      }, 'width', toPx(sizesToPixel(sizes))), width = assign.width, height = assign.height;\n    }\n\n    return \"data:image/svg+xml;utf8,<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"\" + width + \"\\\" height=\\\"\" + height + \"\\\"></svg>\";\n  }\n\n  var sizesRe = /\\s*(.*?)\\s*(\\w+|calc\\(.*?\\))\\s*(?:,|$)/g;\n\n  function sizesToPixel(sizes) {\n    var matches;\n    sizesRe.lastIndex = 0;\n\n    while (matches = sizesRe.exec(sizes)) {\n      if (!matches[1] || window.matchMedia(matches[1]).matches) {\n        matches = evaluateSize(matches[2]);\n        break;\n      }\n    }\n\n    return matches || '100vw';\n  }\n\n  var sizeRe = /\\d+(?:\\w+|%)/g;\n  var additionRe = /[+-]?(\\d+)/g;\n\n  function evaluateSize(size) {\n    return startsWith(size, 'calc') ? size.slice(5, -1).replace(sizeRe, function (size) {\n      return toPx(size);\n    }).replace(/ /g, '').match(additionRe).reduce(function (a, b) {\n      return a + +b;\n    }, 0) : size;\n  }\n\n  var srcSetRe = /\\s+\\d+w\\s*(?:,|$)/g;\n\n  function getSourceSize(srcset, sizes) {\n    var srcSize = toPx(sizesToPixel(sizes));\n    var descriptors = (srcset.match(srcSetRe) || []).map(toFloat).sort(function (a, b) {\n      return a - b;\n    });\n    return descriptors.filter(function (size) {\n      return size >= srcSize;\n    })[0] || descriptors.pop() || '';\n  }\n\n  function isImg(el) {\n    return el.tagName === 'IMG';\n  }\n\n  function currentSrc(el) {\n    return el.currentSrc || el.src;\n  }\n\n  var key = '__test__';\n  var storage; // workaround for Safari's private browsing mode and accessing sessionStorage in Blink\n\n  try {\n    storage = window.sessionStorage || {};\n    storage[key] = 1;\n    delete storage[key];\n  } catch (e) {\n    storage = {};\n  }\n\n  var Media = {\n    props: {\n      media: Boolean\n    },\n    data: {\n      media: false\n    },\n    computed: {\n      matchMedia: function () {\n        var media = toMedia(this.media);\n        return !media || window.matchMedia(media).matches;\n      }\n    }\n  };\n\n  function toMedia(value) {\n    if (isString(value)) {\n      if (value[0] === '@') {\n        var name = \"breakpoint-\" + value.substr(1);\n        value = toFloat(getCssVar(name));\n      } else if (isNaN(value)) {\n        return value;\n      }\n    }\n\n    return value && !isNaN(value) ? \"(min-width: \" + value + \"px)\" : false;\n  }\n\n  var leader = {\n    mixins: [Class, Media],\n    props: {\n      fill: String\n    },\n    data: {\n      fill: '',\n      clsWrapper: 'uk-leader-fill',\n      clsHide: 'uk-leader-hide',\n      attrFill: 'data-fill'\n    },\n    computed: {\n      fill: function (ref) {\n        var fill = ref.fill;\n        return fill || getCssVar('leader-fill-content');\n      }\n    },\n    connected: function () {\n      var assign;\n      assign = wrapInner(this.$el, \"<span class=\\\"\" + this.clsWrapper + \"\\\">\"), this.wrapper = assign[0];\n    },\n    disconnected: function () {\n      unwrap(this.wrapper.childNodes);\n    },\n    update: {\n      read: function (ref) {\n        var changed = ref.changed;\n        var width = ref.width;\n        var prev = width;\n        width = Math.floor(this.$el.offsetWidth / 2);\n        return {\n          width: width,\n          fill: this.fill,\n          changed: changed || prev !== width,\n          hide: !this.matchMedia\n        };\n      },\n      write: function (data) {\n        toggleClass(this.wrapper, this.clsHide, data.hide);\n\n        if (data.changed) {\n          data.changed = false;\n          attr(this.wrapper, this.attrFill, new Array(data.width).join(data.fill));\n        }\n      },\n      events: ['resize']\n    }\n  };\n  var active = [];\n  var Modal = {\n    mixins: [Class, Container, Togglable],\n    props: {\n      selPanel: String,\n      selClose: String,\n      escClose: Boolean,\n      bgClose: Boolean,\n      stack: Boolean\n    },\n    data: {\n      cls: 'uk-open',\n      escClose: true,\n      bgClose: true,\n      overlay: true,\n      stack: false\n    },\n    computed: {\n      panel: function (ref, $el) {\n        var selPanel = ref.selPanel;\n        return $(selPanel, $el);\n      },\n      transitionElement: function () {\n        return this.panel;\n      },\n      bgClose: function (ref) {\n        var bgClose = ref.bgClose;\n        return bgClose && this.panel;\n      }\n    },\n    beforeDisconnect: function () {\n      if (includes(active, this)) {\n        this.toggleElement(this.$el, false, false);\n      }\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.selClose;\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.hide();\n      }\n    }, {\n      name: 'toggle',\n      self: true,\n      handler: function (e, toggle) {\n        if (e.defaultPrevented) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (this.isToggled() === includes(active, this)) {\n          this.toggle();\n        }\n      }\n    }, {\n      name: 'beforeshow',\n      self: true,\n      handler: function (e) {\n        if (includes(active, this)) {\n          return false;\n        }\n\n        if (!this.stack && active.length) {\n          Promise$1.all(active.map(function (modal) {\n            return modal.hide();\n          })).then(this.show);\n          e.preventDefault();\n        } else {\n          active.push(this);\n        }\n      }\n    }, {\n      name: 'show',\n      self: true,\n      handler: function () {\n        var this$1$1 = this;\n        var docEl = document.documentElement;\n\n        if (width(window) > docEl.clientWidth && this.overlay) {\n          css(document.body, 'overflowY', 'scroll');\n        }\n\n        if (this.stack) {\n          css(this.$el, 'zIndex', toFloat(css(this.$el, 'zIndex')) + active.length);\n        }\n\n        addClass(docEl, this.clsPage);\n\n        if (this.bgClose) {\n          once(this.$el, 'hide', on(document, pointerDown, function (ref) {\n            var target = ref.target;\n\n            if (last(active) !== this$1$1 || this$1$1.overlay && !within(target, this$1$1.$el) || within(target, this$1$1.panel)) {\n              return;\n            }\n\n            once(document, pointerUp + \" \" + pointerCancel + \" scroll\", function (ref) {\n              var defaultPrevented = ref.defaultPrevented;\n              var type = ref.type;\n              var newTarget = ref.target;\n\n              if (!defaultPrevented && type === pointerUp && target === newTarget) {\n                this$1$1.hide();\n              }\n            }, true);\n          }), {\n            self: true\n          });\n        }\n\n        if (this.escClose) {\n          once(this.$el, 'hide', on(document, 'keydown', function (e) {\n            if (e.keyCode === 27 && last(active) === this$1$1) {\n              this$1$1.hide();\n            }\n          }), {\n            self: true\n          });\n        }\n      }\n    }, {\n      name: 'shown',\n      self: true,\n      handler: function () {\n        if (!isFocusable(this.$el)) {\n          attr(this.$el, 'tabindex', '-1');\n        }\n\n        if (!$(':focus', this.$el)) {\n          this.$el.focus();\n        }\n      }\n    }, {\n      name: 'hidden',\n      self: true,\n      handler: function () {\n        var this$1$1 = this;\n\n        if (includes(active, this)) {\n          active.splice(active.indexOf(this), 1);\n        }\n\n        if (!active.length) {\n          css(document.body, 'overflowY', '');\n        }\n\n        css(this.$el, 'zIndex', '');\n\n        if (!active.some(function (modal) {\n          return modal.clsPage === this$1$1.clsPage;\n        })) {\n          removeClass(document.documentElement, this.clsPage);\n        }\n      }\n    }],\n    methods: {\n      toggle: function () {\n        return this.isToggled() ? this.hide() : this.show();\n      },\n      show: function () {\n        var this$1$1 = this;\n\n        if (this.container && parent(this.$el) !== this.container) {\n          append(this.container, this.$el);\n          return new Promise$1(function (resolve) {\n            return requestAnimationFrame(function () {\n              return this$1$1.show().then(resolve);\n            });\n          });\n        }\n\n        return this.toggleElement(this.$el, true, animate(this));\n      },\n      hide: function () {\n        return this.toggleElement(this.$el, false, animate(this));\n      }\n    }\n  };\n\n  function animate(ref) {\n    var transitionElement = ref.transitionElement;\n    var _toggle = ref._toggle;\n    return function (el, show) {\n      return new Promise$1(function (resolve, reject) {\n        return once(el, 'show hide', function () {\n          el._reject && el._reject();\n          el._reject = reject;\n\n          _toggle(el, show);\n\n          var off = once(transitionElement, 'transitionstart', function () {\n            once(transitionElement, 'transitionend transitioncancel', resolve, {\n              self: true\n            });\n            clearTimeout(timer);\n          }, {\n            self: true\n          });\n          var timer = setTimeout(function () {\n            off();\n            resolve();\n          }, toMs(css(transitionElement, 'transitionDuration')));\n        });\n      }).then(function () {\n        return delete el._reject;\n      });\n    };\n  }\n\n  var modal = {\n    install: install$2,\n    mixins: [Modal],\n    data: {\n      clsPage: 'uk-modal-page',\n      selPanel: '.uk-modal-dialog',\n      selClose: '.uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full'\n    },\n    events: [{\n      name: 'show',\n      self: true,\n      handler: function () {\n        if (hasClass(this.panel, 'uk-margin-auto-vertical')) {\n          addClass(this.$el, 'uk-flex');\n        } else {\n          css(this.$el, 'display', 'block');\n        }\n\n        height(this.$el); // force reflow\n      }\n    }, {\n      name: 'hidden',\n      self: true,\n      handler: function () {\n        css(this.$el, 'display', '');\n        removeClass(this.$el, 'uk-flex');\n      }\n    }]\n  };\n\n  function install$2(ref) {\n    var modal = ref.modal;\n\n    modal.dialog = function (content, options) {\n      var dialog = modal(\"<div class=\\\"uk-modal\\\"> <div class=\\\"uk-modal-dialog\\\">\" + content + \"</div> </div>\", options);\n      dialog.show();\n      on(dialog.$el, 'hidden', function () {\n        return Promise$1.resolve().then(function () {\n          return dialog.$destroy(true);\n        });\n      }, {\n        self: true\n      });\n      return dialog;\n    };\n\n    modal.alert = function (message, options) {\n      return openDialog(function (ref) {\n        var labels = ref.labels;\n        return \"<div class=\\\"uk-modal-body\\\">\" + (isString(message) ? message : html(message)) + \"</div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-primary uk-modal-close\\\" autofocus>\" + labels.ok + \"</button> </div>\";\n      }, options, function (deferred) {\n        return deferred.resolve();\n      });\n    };\n\n    modal.confirm = function (message, options) {\n      return openDialog(function (ref) {\n        var labels = ref.labels;\n        return \"<form> <div class=\\\"uk-modal-body\\\">\" + (isString(message) ? message : html(message)) + \"</div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-default uk-modal-close\\\" type=\\\"button\\\">\" + labels.cancel + \"</button> <button class=\\\"uk-button uk-button-primary\\\" autofocus>\" + labels.ok + \"</button> </div> </form>\";\n      }, options, function (deferred) {\n        return deferred.reject();\n      });\n    };\n\n    modal.prompt = function (message, value, options) {\n      return openDialog(function (ref) {\n        var labels = ref.labels;\n        return \"<form class=\\\"uk-form-stacked\\\"> <div class=\\\"uk-modal-body\\\"> <label>\" + (isString(message) ? message : html(message)) + \"</label> <input class=\\\"uk-input\\\" value=\\\"\" + (value || '') + \"\\\" autofocus> </div> <div class=\\\"uk-modal-footer uk-text-right\\\"> <button class=\\\"uk-button uk-button-default uk-modal-close\\\" type=\\\"button\\\">\" + labels.cancel + \"</button> <button class=\\\"uk-button uk-button-primary\\\">\" + labels.ok + \"</button> </div> </form>\";\n      }, options, function (deferred) {\n        return deferred.resolve(null);\n      }, function (dialog) {\n        return $('input', dialog.$el).value;\n      });\n    };\n\n    modal.labels = {\n      ok: 'Ok',\n      cancel: 'Cancel'\n    };\n\n    function openDialog(tmpl, options, hideFn, submitFn) {\n      options = assign({\n        bgClose: false,\n        escClose: true,\n        labels: modal.labels\n      }, options);\n      var dialog = modal.dialog(tmpl(options), options);\n      var deferred = new Deferred();\n      var resolved = false;\n      on(dialog.$el, 'submit', 'form', function (e) {\n        e.preventDefault();\n        deferred.resolve(submitFn && submitFn(dialog));\n        resolved = true;\n        dialog.hide();\n      });\n      on(dialog.$el, 'hide', function () {\n        return !resolved && hideFn(deferred);\n      });\n      deferred.promise.dialog = dialog;\n      return deferred.promise;\n    }\n  }\n\n  var nav = {\n    extends: Accordion,\n    data: {\n      targets: '> .uk-parent',\n      toggle: '> a',\n      content: '> ul'\n    }\n  };\n  var navItem = '.uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle';\n  var navbar = {\n    mixins: [Class, Container, FlexBug],\n    props: {\n      dropdown: String,\n      mode: 'list',\n      align: String,\n      offset: Number,\n      boundary: Boolean,\n      boundaryAlign: Boolean,\n      clsDrop: String,\n      delayShow: Number,\n      delayHide: Number,\n      dropbar: Boolean,\n      dropbarMode: String,\n      dropbarAnchor: Boolean,\n      duration: Number\n    },\n    data: {\n      dropdown: navItem,\n      align: isRtl ? 'right' : 'left',\n      clsDrop: 'uk-navbar-dropdown',\n      mode: undefined,\n      offset: undefined,\n      delayShow: undefined,\n      delayHide: undefined,\n      boundaryAlign: undefined,\n      flip: 'x',\n      boundary: true,\n      dropbar: false,\n      dropbarMode: 'slide',\n      dropbarAnchor: false,\n      duration: 200,\n      forceHeight: true,\n      selMinHeight: navItem,\n      container: false\n    },\n    computed: {\n      boundary: function (ref, $el) {\n        var boundary = ref.boundary;\n        var boundaryAlign = ref.boundaryAlign;\n        return boundary === true || boundaryAlign ? $el : boundary;\n      },\n      dropbarAnchor: function (ref, $el) {\n        var dropbarAnchor = ref.dropbarAnchor;\n        return query(dropbarAnchor, $el);\n      },\n      pos: function (ref) {\n        var align = ref.align;\n        return \"bottom-\" + align;\n      },\n      dropbar: {\n        get: function (ref) {\n          var dropbar = ref.dropbar;\n\n          if (!dropbar) {\n            return null;\n          }\n\n          dropbar = this._dropbar || query(dropbar, this.$el) || $('+ .uk-navbar-dropbar', this.$el);\n          return dropbar ? dropbar : this._dropbar = $('<div></div>');\n        },\n        watch: function (dropbar) {\n          addClass(dropbar, 'uk-navbar-dropbar');\n        },\n        immediate: true\n      },\n      dropContainer: function (_, $el) {\n        return this.container || $el;\n      },\n      dropdowns: {\n        get: function (ref, $el) {\n          var this$1$1 = this;\n          var clsDrop = ref.clsDrop;\n          var dropdowns = $$(\".\" + clsDrop, $el);\n\n          if (this.dropContainer !== $el) {\n            $$(\".\" + clsDrop, this.dropContainer).forEach(function (el) {\n              var dropdown = this$1$1.getDropdown(el);\n\n              if (!includes(dropdowns, el) && dropdown && dropdown.target && within(dropdown.target, this$1$1.$el)) {\n                dropdowns.push(el);\n              }\n            });\n          }\n\n          return dropdowns;\n        },\n        watch: function (dropdowns) {\n          var this$1$1 = this;\n          this.$create('drop', dropdowns.filter(function (el) {\n            return !this$1$1.getDropdown(el);\n          }), assign({}, this.$props, {\n            boundary: this.boundary,\n            pos: this.pos,\n            offset: this.dropbar || this.offset\n          }));\n        },\n        immediate: true\n      },\n      toggles: function (ref, $el) {\n        var dropdown = ref.dropdown;\n        return $$(dropdown, $el);\n      }\n    },\n    disconnected: function () {\n      this.dropbar && remove$1(this.dropbar);\n      delete this._dropbar;\n    },\n    events: [{\n      name: 'mouseover focusin',\n      delegate: function () {\n        return this.dropdown;\n      },\n      handler: function (ref) {\n        var current = ref.current;\n        var active = this.getActive();\n\n        if (active && includes(active.mode, 'hover') && active.target && !within(active.target, current) && !active.tracker.movesTo(active.$el)) {\n          active.hide(false);\n        }\n      }\n    }, {\n      name: 'keydown',\n      delegate: function () {\n        return this.dropdown;\n      },\n      handler: function (e) {\n        var current = e.current;\n        var keyCode = e.keyCode;\n        var active = this.getActive();\n\n        if (keyCode === keyMap.DOWN && hasAttr(current, 'aria-expanded')) {\n          e.preventDefault();\n\n          if (!active || active.target !== current) {\n            current.click();\n            once(this.dropContainer, 'show', function (ref) {\n              var target = ref.target;\n              return focusFirstFocusableElement(target);\n            });\n          } else {\n            focusFirstFocusableElement(active.$el);\n          }\n        }\n\n        handleNavItemNavigation(e, this.toggles, active);\n      }\n    }, {\n      name: 'keydown',\n      el: function () {\n        return this.dropContainer;\n      },\n      delegate: function () {\n        return \".\" + this.clsDrop;\n      },\n      handler: function (e) {\n        var current = e.current;\n        var keyCode = e.keyCode;\n\n        if (!includes(this.dropdowns, current)) {\n          return;\n        }\n\n        var active = this.getActive();\n        var elements = $$(selFocusable, current);\n        var i = findIndex(elements, function (el) {\n          return matches(el, ':focus');\n        });\n\n        if (keyCode === keyMap.UP) {\n          e.preventDefault();\n\n          if (i > 0) {\n            elements[i - 1].focus();\n          }\n        }\n\n        if (keyCode === keyMap.DOWN) {\n          e.preventDefault();\n\n          if (i < elements.length - 1) {\n            elements[i + 1].focus();\n          }\n        }\n\n        if (keyCode === keyMap.ESC) {\n          active && active.target && active.target.focus();\n        }\n\n        handleNavItemNavigation(e, this.toggles, active);\n      }\n    }, {\n      name: 'mouseleave',\n      el: function () {\n        return this.dropbar;\n      },\n      filter: function () {\n        return this.dropbar;\n      },\n      handler: function () {\n        var active = this.getActive();\n\n        if (active && includes(active.mode, 'hover') && !this.dropdowns.some(function (el) {\n          return matches(el, ':hover');\n        })) {\n          active.hide();\n        }\n      }\n    }, {\n      name: 'beforeshow',\n      el: function () {\n        return this.dropContainer;\n      },\n      filter: function () {\n        return this.dropbar;\n      },\n      handler: function () {\n        if (!parent(this.dropbar)) {\n          after(this.dropbarAnchor || this.$el, this.dropbar);\n        }\n      }\n    }, {\n      name: 'show',\n      el: function () {\n        return this.dropContainer;\n      },\n      filter: function () {\n        return this.dropbar;\n      },\n      handler: function (_, ref) {\n        var $el = ref.$el;\n        var dir = ref.dir;\n\n        if (!hasClass($el, this.clsDrop)) {\n          return;\n        }\n\n        if (this.dropbarMode === 'slide') {\n          addClass(this.dropbar, 'uk-navbar-dropbar-slide');\n        }\n\n        this.clsDrop && addClass($el, this.clsDrop + \"-dropbar\");\n\n        if (dir === 'bottom') {\n          this.transitionTo($el.offsetHeight + toFloat(css($el, 'marginTop')) + toFloat(css($el, 'marginBottom')), $el);\n        }\n      }\n    }, {\n      name: 'beforehide',\n      el: function () {\n        return this.dropContainer;\n      },\n      filter: function () {\n        return this.dropbar;\n      },\n      handler: function (e, ref) {\n        var $el = ref.$el;\n        var active = this.getActive();\n\n        if (matches(this.dropbar, ':hover') && active && active.$el === $el) {\n          e.preventDefault();\n        }\n      }\n    }, {\n      name: 'hide',\n      el: function () {\n        return this.dropContainer;\n      },\n      filter: function () {\n        return this.dropbar;\n      },\n      handler: function (_, ref) {\n        var $el = ref.$el;\n\n        if (!hasClass($el, this.clsDrop)) {\n          return;\n        }\n\n        var active = this.getActive();\n\n        if (!active || active && active.$el === $el) {\n          this.transitionTo(0);\n        }\n      }\n    }],\n    methods: {\n      getActive: function () {\n        return active$1 && within(active$1.target, this.$el) && active$1;\n      },\n      transitionTo: function (newHeight, el) {\n        var this$1$1 = this;\n        var ref = this;\n        var dropbar = ref.dropbar;\n        var oldHeight = isVisible(dropbar) ? height(dropbar) : 0;\n        el = oldHeight < newHeight && el;\n        css(el, 'clip', \"rect(0,\" + el.offsetWidth + \"px,\" + oldHeight + \"px,0)\");\n        height(dropbar, oldHeight);\n        Transition.cancel([el, dropbar]);\n        return Promise$1.all([Transition.start(dropbar, {\n          height: newHeight\n        }, this.duration), Transition.start(el, {\n          clip: \"rect(0,\" + el.offsetWidth + \"px,\" + newHeight + \"px,0)\"\n        }, this.duration)]).catch(noop).then(function () {\n          css(el, {\n            clip: ''\n          });\n          this$1$1.$update(dropbar);\n        });\n      },\n      getDropdown: function (el) {\n        return this.$getComponent(el, 'drop') || this.$getComponent(el, 'dropdown');\n      }\n    }\n  };\n\n  function handleNavItemNavigation(e, toggles, active) {\n    var current = e.current;\n    var keyCode = e.keyCode;\n    var target = active && active.target || current;\n    var i = toggles.indexOf(target); // Left\n\n    if (keyCode === keyMap.LEFT && i > 0) {\n      active && active.hide(false);\n      toggles[i - 1].focus();\n    } // Right\n\n\n    if (keyCode === keyMap.RIGHT && i < toggles.length - 1) {\n      active && active.hide(false);\n      toggles[i + 1].focus();\n    }\n\n    if (keyCode === keyMap.TAB) {\n      target.focus();\n      active && active.hide(false);\n    }\n  }\n\n  function focusFirstFocusableElement(el) {\n    if (!$(':focus', el)) {\n      var focusEl = $(selFocusable, el);\n\n      if (focusEl) {\n        focusEl.focus();\n      }\n    }\n  }\n\n  var keyMap = {\n    TAB: 9,\n    ESC: 27,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n  };\n  var offcanvas = {\n    mixins: [Modal],\n    args: 'mode',\n    props: {\n      mode: String,\n      flip: Boolean,\n      overlay: Boolean\n    },\n    data: {\n      mode: 'slide',\n      flip: false,\n      overlay: false,\n      clsPage: 'uk-offcanvas-page',\n      clsContainer: 'uk-offcanvas-container',\n      selPanel: '.uk-offcanvas-bar',\n      clsFlip: 'uk-offcanvas-flip',\n      clsContainerAnimation: 'uk-offcanvas-container-animation',\n      clsSidebarAnimation: 'uk-offcanvas-bar-animation',\n      clsMode: 'uk-offcanvas',\n      clsOverlay: 'uk-offcanvas-overlay',\n      selClose: '.uk-offcanvas-close',\n      container: false\n    },\n    computed: {\n      clsFlip: function (ref) {\n        var flip = ref.flip;\n        var clsFlip = ref.clsFlip;\n        return flip ? clsFlip : '';\n      },\n      clsOverlay: function (ref) {\n        var overlay = ref.overlay;\n        var clsOverlay = ref.clsOverlay;\n        return overlay ? clsOverlay : '';\n      },\n      clsMode: function (ref) {\n        var mode = ref.mode;\n        var clsMode = ref.clsMode;\n        return clsMode + \"-\" + mode;\n      },\n      clsSidebarAnimation: function (ref) {\n        var mode = ref.mode;\n        var clsSidebarAnimation = ref.clsSidebarAnimation;\n        return mode === 'none' || mode === 'reveal' ? '' : clsSidebarAnimation;\n      },\n      clsContainerAnimation: function (ref) {\n        var mode = ref.mode;\n        var clsContainerAnimation = ref.clsContainerAnimation;\n        return mode !== 'push' && mode !== 'reveal' ? '' : clsContainerAnimation;\n      },\n      transitionElement: function (ref) {\n        var mode = ref.mode;\n        return mode === 'reveal' ? parent(this.panel) : this.panel;\n      }\n    },\n    update: {\n      read: function () {\n        if (this.isToggled() && !isVisible(this.$el)) {\n          this.hide();\n        }\n      },\n      events: ['resize']\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return 'a[href^=\"#\"]';\n      },\n      handler: function (ref) {\n        var hash = ref.current.hash;\n        var defaultPrevented = ref.defaultPrevented;\n\n        if (!defaultPrevented && hash && $(hash, document.body)) {\n          this.hide();\n        }\n      }\n    }, {\n      name: 'touchstart',\n      passive: true,\n      el: function () {\n        return this.panel;\n      },\n      handler: function (ref) {\n        var targetTouches = ref.targetTouches;\n\n        if (targetTouches.length === 1) {\n          this.clientY = targetTouches[0].clientY;\n        }\n      }\n    }, {\n      name: 'touchmove',\n      self: true,\n      passive: false,\n      filter: function () {\n        return this.overlay;\n      },\n      handler: function (e) {\n        e.cancelable && e.preventDefault();\n      }\n    }, {\n      name: 'touchmove',\n      passive: false,\n      el: function () {\n        return this.panel;\n      },\n      handler: function (e) {\n        if (e.targetTouches.length !== 1) {\n          return;\n        }\n\n        var clientY = e.targetTouches[0].clientY - this.clientY;\n        var ref = this.panel;\n        var scrollTop = ref.scrollTop;\n        var scrollHeight = ref.scrollHeight;\n        var clientHeight = ref.clientHeight;\n\n        if (clientHeight >= scrollHeight || scrollTop === 0 && clientY > 0 || scrollHeight - scrollTop <= clientHeight && clientY < 0) {\n          e.cancelable && e.preventDefault();\n        }\n      }\n    }, {\n      name: 'show',\n      self: true,\n      handler: function () {\n        if (this.mode === 'reveal' && !hasClass(parent(this.panel), this.clsMode)) {\n          wrapAll(this.panel, '<div>');\n          addClass(parent(this.panel), this.clsMode);\n        }\n\n        css(document.documentElement, 'overflowY', this.overlay ? 'hidden' : '');\n        addClass(document.body, this.clsContainer, this.clsFlip);\n        css(document.body, 'touch-action', 'pan-y pinch-zoom');\n        css(this.$el, 'display', 'block');\n        addClass(this.$el, this.clsOverlay);\n        addClass(this.panel, this.clsSidebarAnimation, this.mode !== 'reveal' ? this.clsMode : '');\n        height(document.body); // force reflow\n\n        addClass(document.body, this.clsContainerAnimation);\n        this.clsContainerAnimation && suppressUserScale();\n      }\n    }, {\n      name: 'hide',\n      self: true,\n      handler: function () {\n        removeClass(document.body, this.clsContainerAnimation);\n        css(document.body, 'touch-action', '');\n      }\n    }, {\n      name: 'hidden',\n      self: true,\n      handler: function () {\n        this.clsContainerAnimation && resumeUserScale();\n\n        if (this.mode === 'reveal') {\n          unwrap(this.panel);\n        }\n\n        removeClass(this.panel, this.clsSidebarAnimation, this.clsMode);\n        removeClass(this.$el, this.clsOverlay);\n        css(this.$el, 'display', '');\n        removeClass(document.body, this.clsContainer, this.clsFlip);\n        css(document.documentElement, 'overflowY', '');\n      }\n    }, {\n      name: 'swipeLeft swipeRight',\n      handler: function (e) {\n        if (this.isToggled() && endsWith(e.type, 'Left') ^ this.flip) {\n          this.hide();\n        }\n      }\n    }]\n  }; // Chrome in responsive mode zooms page upon opening offcanvas\n\n  function suppressUserScale() {\n    getViewport().content += ',user-scalable=0';\n  }\n\n  function resumeUserScale() {\n    var viewport = getViewport();\n    viewport.content = viewport.content.replace(/,user-scalable=0$/, '');\n  }\n\n  function getViewport() {\n    return $('meta[name=\"viewport\"]', document.head) || append(document.head, '<meta name=\"viewport\">');\n  }\n\n  var overflowAuto = {\n    mixins: [Class],\n    props: {\n      selContainer: String,\n      selContent: String,\n      minHeight: Number\n    },\n    data: {\n      selContainer: '.uk-modal',\n      selContent: '.uk-modal-dialog',\n      minHeight: 150\n    },\n    computed: {\n      container: function (ref, $el) {\n        var selContainer = ref.selContainer;\n        return closest($el, selContainer);\n      },\n      content: function (ref, $el) {\n        var selContent = ref.selContent;\n        return closest($el, selContent);\n      }\n    },\n    connected: function () {\n      css(this.$el, 'minHeight', this.minHeight);\n    },\n    update: {\n      read: function () {\n        if (!this.content || !this.container || !isVisible(this.$el)) {\n          return false;\n        }\n\n        return {\n          current: toFloat(css(this.$el, 'maxHeight')),\n          max: Math.max(this.minHeight, height(this.container) - (dimensions(this.content).height - height(this.$el)))\n        };\n      },\n      write: function (ref) {\n        var current = ref.current;\n        var max = ref.max;\n        css(this.$el, 'maxHeight', max);\n\n        if (Math.round(current) !== Math.round(max)) {\n          trigger(this.$el, 'resize');\n        }\n      },\n      events: ['resize']\n    }\n  };\n  var responsive = {\n    props: ['width', 'height'],\n    connected: function () {\n      addClass(this.$el, 'uk-responsive-width');\n    },\n    update: {\n      read: function () {\n        return isVisible(this.$el) && this.width && this.height ? {\n          width: width(parent(this.$el)),\n          height: this.height\n        } : false;\n      },\n      write: function (dim) {\n        height(this.$el, Dimensions.contain({\n          height: this.height,\n          width: this.width\n        }, dim).height);\n      },\n      events: ['resize']\n    }\n  };\n  var scroll = {\n    props: {\n      offset: Number\n    },\n    data: {\n      offset: 0\n    },\n    methods: {\n      scrollTo: function (el) {\n        var this$1$1 = this;\n        el = el && $(el) || document.body;\n\n        if (trigger(this.$el, 'beforescroll', [this, el])) {\n          scrollIntoView(el, {\n            offset: this.offset\n          }).then(function () {\n            return trigger(this$1$1.$el, 'scrolled', [this$1$1, el]);\n          });\n        }\n      }\n    },\n    events: {\n      click: function (e) {\n        if (e.defaultPrevented) {\n          return;\n        }\n\n        e.preventDefault();\n        this.scrollTo(\"#\" + escape(decodeURIComponent((this.$el.hash || '').substr(1))));\n      }\n    }\n  };\n  var stateKey = '_ukScrollspy';\n  var scrollspy = {\n    args: 'cls',\n    props: {\n      cls: String,\n      target: String,\n      hidden: Boolean,\n      offsetTop: Number,\n      offsetLeft: Number,\n      repeat: Boolean,\n      delay: Number\n    },\n    data: function () {\n      return {\n        cls: '',\n        target: false,\n        hidden: true,\n        offsetTop: 0,\n        offsetLeft: 0,\n        repeat: false,\n        delay: 0,\n        inViewClass: 'uk-scrollspy-inview'\n      };\n    },\n    computed: {\n      elements: {\n        get: function (ref, $el) {\n          var target = ref.target;\n          return target ? $$(target, $el) : [$el];\n        },\n        watch: function (elements) {\n          if (this.hidden) {\n            css(filter$1(elements, \":not(.\" + this.inViewClass + \")\"), 'visibility', 'hidden');\n          }\n        },\n        immediate: true\n      }\n    },\n    disconnected: function () {\n      var this$1$1 = this;\n      this.elements.forEach(function (el) {\n        removeClass(el, this$1$1.inViewClass, el[stateKey] ? el[stateKey].cls : '');\n        delete el[stateKey];\n      });\n    },\n    update: [{\n      read: function (data$1) {\n        var this$1$1 = this; // Let child components be applied at least once first\n\n        if (!data$1.update) {\n          Promise$1.resolve().then(function () {\n            this$1$1.$emit();\n            data$1.update = true;\n          });\n          return false;\n        }\n\n        this.elements.forEach(function (el) {\n          if (!el[stateKey]) {\n            el[stateKey] = {\n              cls: data(el, 'uk-scrollspy-class') || this$1$1.cls\n            };\n          }\n\n          el[stateKey].show = isInView(el, this$1$1.offsetTop, this$1$1.offsetLeft);\n        });\n      },\n      write: function (data) {\n        var this$1$1 = this;\n        this.elements.forEach(function (el) {\n          var state = el[stateKey];\n\n          if (state.show && !state.inview && !state.queued) {\n            state.queued = true;\n            data.promise = (data.promise || Promise$1.resolve()).then(function () {\n              return new Promise$1(function (resolve) {\n                return setTimeout(resolve, this$1$1.delay);\n              });\n            }).then(function () {\n              this$1$1.toggle(el, true);\n              setTimeout(function () {\n                state.queued = false;\n                this$1$1.$emit();\n              }, 300);\n            });\n          } else if (!state.show && state.inview && !state.queued && this$1$1.repeat) {\n            this$1$1.toggle(el, false);\n          }\n        });\n      },\n      events: ['scroll', 'resize']\n    }],\n    methods: {\n      toggle: function (el, inview) {\n        var state = el[stateKey];\n        state.off && state.off();\n        css(el, 'visibility', !inview && this.hidden ? 'hidden' : '');\n        toggleClass(el, this.inViewClass, inview);\n        toggleClass(el, state.cls);\n\n        if (/\\buk-animation-/.test(state.cls)) {\n          state.off = once(el, 'animationcancel animationend', function () {\n            return removeClasses(el, 'uk-animation-[\\\\w-]+');\n          });\n        }\n\n        trigger(el, inview ? 'inview' : 'outview');\n        state.inview = inview;\n        this.$update(el);\n      }\n    }\n  };\n  var scrollspyNav = {\n    props: {\n      cls: String,\n      closest: String,\n      scroll: Boolean,\n      overflow: Boolean,\n      offset: Number\n    },\n    data: {\n      cls: 'uk-active',\n      closest: false,\n      scroll: false,\n      overflow: true,\n      offset: 0\n    },\n    computed: {\n      links: {\n        get: function (_, $el) {\n          return $$('a[href^=\"#\"]', $el).filter(function (el) {\n            return el.hash;\n          });\n        },\n        watch: function (links) {\n          if (this.scroll) {\n            this.$create('scroll', links, {\n              offset: this.offset || 0\n            });\n          }\n        },\n        immediate: true\n      },\n      targets: function () {\n        return $$(this.links.map(function (el) {\n          return escape(el.hash).substr(1);\n        }).join(','));\n      },\n      elements: function (ref) {\n        var selector = ref.closest;\n        return closest(this.links, selector || '*');\n      }\n    },\n    update: [{\n      read: function () {\n        var this$1$1 = this;\n        var ref = this.targets;\n        var length = ref.length;\n\n        if (!length || !isVisible(this.$el)) {\n          return false;\n        }\n\n        var ref$1 = scrollParents(this.targets, /auto|scroll/, true);\n        var scrollElement = ref$1[0];\n        var scrollTop = scrollElement.scrollTop;\n        var scrollHeight = scrollElement.scrollHeight;\n        var max = scrollHeight - getViewportClientHeight(scrollElement);\n        var active = false;\n\n        if (scrollTop === max) {\n          active = length - 1;\n        } else {\n          this.targets.every(function (el, i) {\n            if (offset(el).top - offset(getViewport$1(scrollElement)).top - this$1$1.offset <= 0) {\n              active = i;\n              return true;\n            }\n          });\n\n          if (active === false && this.overflow) {\n            active = 0;\n          }\n        }\n\n        return {\n          active: active\n        };\n      },\n      write: function (ref) {\n        var active = ref.active;\n        var changed = active !== false && !hasClass(this.elements[active], this.cls);\n        this.links.forEach(function (el) {\n          return el.blur();\n        });\n        removeClass(this.elements, this.cls);\n        addClass(this.elements[active], this.cls);\n\n        if (changed) {\n          trigger(this.$el, 'active', [active, this.elements[active]]);\n        }\n      },\n      events: ['scroll', 'resize']\n    }]\n  };\n  var sticky = {\n    mixins: [Class, Media],\n    props: {\n      top: null,\n      bottom: Boolean,\n      offset: String,\n      animation: String,\n      clsActive: String,\n      clsInactive: String,\n      clsFixed: String,\n      clsBelow: String,\n      selTarget: String,\n      widthElement: Boolean,\n      showOnUp: Boolean,\n      targetOffset: Number\n    },\n    data: {\n      top: 0,\n      bottom: false,\n      offset: 0,\n      animation: '',\n      clsActive: 'uk-active',\n      clsInactive: '',\n      clsFixed: 'uk-sticky-fixed',\n      clsBelow: 'uk-sticky-below',\n      selTarget: '',\n      widthElement: false,\n      showOnUp: false,\n      targetOffset: false\n    },\n    computed: {\n      offset: function (ref) {\n        var offset = ref.offset;\n        return toPx(offset);\n      },\n      selTarget: function (ref, $el) {\n        var selTarget = ref.selTarget;\n        return selTarget && $(selTarget, $el) || $el;\n      },\n      widthElement: function (ref, $el) {\n        var widthElement = ref.widthElement;\n        return query(widthElement, $el) || this.placeholder;\n      },\n      isActive: {\n        get: function () {\n          return hasClass(this.selTarget, this.clsActive);\n        },\n        set: function (value) {\n          if (value && !this.isActive) {\n            replaceClass(this.selTarget, this.clsInactive, this.clsActive);\n            trigger(this.$el, 'active');\n          } else if (!value && !hasClass(this.selTarget, this.clsInactive)) {\n            replaceClass(this.selTarget, this.clsActive, this.clsInactive);\n            trigger(this.$el, 'inactive');\n          }\n        }\n      }\n    },\n    connected: function () {\n      this.placeholder = $('+ .uk-sticky-placeholder', this.$el) || $('<div class=\"uk-sticky-placeholder\"></div>');\n      this.isFixed = false;\n      this.isActive = false;\n    },\n    disconnected: function () {\n      if (this.isFixed) {\n        this.hide();\n        removeClass(this.selTarget, this.clsInactive);\n      }\n\n      remove$1(this.placeholder);\n      this.placeholder = null;\n      this.widthElement = null;\n    },\n    events: [{\n      name: 'load hashchange popstate',\n      el: function () {\n        return window;\n      },\n      handler: function () {\n        var this$1$1 = this;\n\n        if (!(this.targetOffset !== false && location.hash && window.pageYOffset > 0)) {\n          return;\n        }\n\n        var target = $(location.hash);\n\n        if (target) {\n          fastdom.read(function () {\n            var ref = offset(target);\n            var top = ref.top;\n            var elTop = offset(this$1$1.$el).top;\n            var elHeight = this$1$1.$el.offsetHeight;\n\n            if (this$1$1.isFixed && elTop + elHeight >= top && elTop <= top + target.offsetHeight) {\n              scrollTop(window, top - elHeight - (isNumeric(this$1$1.targetOffset) ? this$1$1.targetOffset : 0) - this$1$1.offset);\n            }\n          });\n        }\n      }\n    }],\n    update: [{\n      read: function (ref, types) {\n        var height$1 = ref.height;\n        this.inactive = !this.matchMedia || !isVisible(this.$el);\n\n        if (this.inactive) {\n          return false;\n        }\n\n        if (this.isActive && types.has('resize')) {\n          this.hide();\n          height$1 = this.$el.offsetHeight;\n          this.show();\n        }\n\n        height$1 = this.isActive ? height$1 : this.$el.offsetHeight;\n\n        if (height$1 + this.offset > height(window)) {\n          this.inactive = true;\n          return false;\n        }\n\n        var referenceElement = this.isFixed ? this.placeholder : this.$el;\n        this.topOffset = offset(referenceElement).top;\n        this.bottomOffset = this.topOffset + height$1;\n        this.offsetParentTop = offset(referenceElement.offsetParent).top;\n        var bottom = parseProp('bottom', this);\n        this.top = Math.max(toFloat(parseProp('top', this)), this.topOffset) - this.offset;\n        this.bottom = bottom && bottom - this.$el.offsetHeight;\n        this.width = dimensions(isVisible(this.widthElement) ? this.widthElement : this.$el).width;\n        return {\n          height: height$1,\n          top: offsetPosition(this.placeholder)[0],\n          margins: css(this.$el, ['marginTop', 'marginBottom', 'marginLeft', 'marginRight'])\n        };\n      },\n      write: function (ref) {\n        var height = ref.height;\n        var margins = ref.margins;\n        var ref$1 = this;\n        var placeholder = ref$1.placeholder;\n        css(placeholder, assign({\n          height: height\n        }, margins));\n\n        if (!within(placeholder, document)) {\n          after(this.$el, placeholder);\n          placeholder.hidden = true;\n        }\n\n        this.isActive = !!this.isActive; // force self-assign\n      },\n      events: ['resize']\n    }, {\n      read: function (ref) {\n        var scroll = ref.scroll;\n        if (scroll === void 0) scroll = 0;\n        this.scroll = window.pageYOffset;\n        return {\n          dir: scroll <= this.scroll ? 'down' : 'up',\n          scroll: this.scroll\n        };\n      },\n      write: function (data, types) {\n        var this$1$1 = this;\n        var now = Date.now();\n        var isScrollUpdate = types.has('scroll');\n        var initTimestamp = data.initTimestamp;\n        if (initTimestamp === void 0) initTimestamp = 0;\n        var dir = data.dir;\n        var lastDir = data.lastDir;\n        var lastScroll = data.lastScroll;\n        var scroll = data.scroll;\n        var top = data.top;\n        data.lastScroll = scroll;\n\n        if (scroll < 0 || scroll === lastScroll && isScrollUpdate || this.showOnUp && !isScrollUpdate && !this.isFixed) {\n          return;\n        }\n\n        if (now - initTimestamp > 300 || dir !== lastDir) {\n          data.initScroll = scroll;\n          data.initTimestamp = now;\n        }\n\n        data.lastDir = dir;\n\n        if (this.showOnUp && !this.isFixed && Math.abs(data.initScroll - scroll) <= 30 && Math.abs(lastScroll - scroll) <= 10) {\n          return;\n        }\n\n        if (this.inactive || scroll < this.top || this.showOnUp && (scroll <= this.top || dir === 'down' && isScrollUpdate || dir === 'up' && !this.isFixed && scroll <= this.bottomOffset)) {\n          if (!this.isFixed) {\n            if (Animation.inProgress(this.$el) && top > scroll) {\n              Animation.cancel(this.$el);\n              this.hide();\n            }\n\n            return;\n          }\n\n          this.isFixed = false;\n\n          if (this.animation && scroll > this.topOffset) {\n            Animation.cancel(this.$el);\n            Animation.out(this.$el, this.animation).then(function () {\n              return this$1$1.hide();\n            }, noop);\n          } else {\n            this.hide();\n          }\n        } else if (this.isFixed) {\n          this.update();\n        } else if (this.animation) {\n          Animation.cancel(this.$el);\n          this.show();\n          Animation.in(this.$el, this.animation).catch(noop);\n        } else {\n          this.show();\n        }\n      },\n      events: ['resize', 'scroll']\n    }],\n    methods: {\n      show: function () {\n        this.isFixed = true;\n        this.update();\n        this.placeholder.hidden = false;\n      },\n      hide: function () {\n        this.isActive = false;\n        removeClass(this.$el, this.clsFixed, this.clsBelow);\n        css(this.$el, {\n          position: '',\n          top: '',\n          width: ''\n        });\n        this.placeholder.hidden = true;\n      },\n      update: function () {\n        var active = this.top !== 0 || this.scroll > this.top;\n        var top = Math.max(0, this.offset);\n        var position = 'fixed';\n\n        if (isNumeric(this.bottom) && this.scroll > this.bottom - this.offset) {\n          top = this.bottom - this.offsetParentTop;\n          position = 'absolute';\n        }\n\n        css(this.$el, {\n          position: position,\n          top: top + \"px\",\n          width: this.width\n        });\n        this.isActive = active;\n        toggleClass(this.$el, this.clsBelow, this.scroll > this.bottomOffset);\n        addClass(this.$el, this.clsFixed);\n      }\n    }\n  };\n\n  function parseProp(prop, ref) {\n    var $props = ref.$props;\n    var $el = ref.$el;\n    var propOffset = ref[prop + \"Offset\"];\n    var value = $props[prop];\n\n    if (!value) {\n      return;\n    }\n\n    if (isString(value) && value.match(/^-?\\d/)) {\n      return propOffset + toPx(value);\n    } else {\n      return offset(value === true ? parent($el) : query(value, $el)).bottom;\n    }\n  }\n\n  var Switcher = {\n    mixins: [Togglable],\n    args: 'connect',\n    props: {\n      connect: String,\n      toggle: String,\n      itemNav: String,\n      active: Number,\n      swiping: Boolean\n    },\n    data: {\n      connect: '~.uk-switcher',\n      toggle: '> * > :first-child',\n      itemNav: false,\n      active: 0,\n      swiping: true,\n      cls: 'uk-active',\n      attrItem: 'uk-switcher-item'\n    },\n    computed: {\n      connects: {\n        get: function (ref, $el) {\n          var connect = ref.connect;\n          return queryAll(connect, $el);\n        },\n        watch: function (connects) {\n          var this$1$1 = this;\n\n          if (this.swiping) {\n            css(connects, 'touch-action', 'pan-y pinch-zoom');\n          }\n\n          var index = this.index();\n          this.connects.forEach(function (el) {\n            return children(el).forEach(function (child, i) {\n              return toggleClass(child, this$1$1.cls, i === index);\n            });\n          });\n        },\n        immediate: true\n      },\n      toggles: {\n        get: function (ref, $el) {\n          var toggle = ref.toggle;\n          return $$(toggle, $el).filter(function (el) {\n            return !matches(el, '.uk-disabled *, .uk-disabled, [disabled]');\n          });\n        },\n        watch: function (toggles) {\n          var active = this.index();\n          this.show(~active ? active : toggles[this.active] || toggles[0]);\n        },\n        immediate: true\n      },\n      children: function () {\n        var this$1$1 = this;\n        return children(this.$el).filter(function (child) {\n          return this$1$1.toggles.some(function (toggle) {\n            return within(toggle, child);\n          });\n        });\n      }\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.toggle;\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.show(e.current);\n      }\n    }, {\n      name: 'click',\n      el: function () {\n        return this.connects.concat(this.itemNav ? queryAll(this.itemNav, this.$el) : []);\n      },\n      delegate: function () {\n        return \"[\" + this.attrItem + \"],[data-\" + this.attrItem + \"]\";\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.show(data(e.current, this.attrItem));\n      }\n    }, {\n      name: 'swipeRight swipeLeft',\n      filter: function () {\n        return this.swiping;\n      },\n      el: function () {\n        return this.connects;\n      },\n      handler: function (ref) {\n        var type = ref.type;\n        this.show(endsWith(type, 'Left') ? 'next' : 'previous');\n      }\n    }],\n    methods: {\n      index: function () {\n        var this$1$1 = this;\n        return findIndex(this.children, function (el) {\n          return hasClass(el, this$1$1.cls);\n        });\n      },\n      show: function (item) {\n        var this$1$1 = this;\n        var prev = this.index();\n        var next = getIndex(this.children[getIndex(item, this.toggles, prev)], children(this.$el));\n\n        if (prev === next) {\n          return;\n        }\n\n        this.children.forEach(function (child, i) {\n          toggleClass(child, this$1$1.cls, next === i);\n          attr(this$1$1.toggles[i], 'aria-expanded', next === i);\n        });\n        this.connects.forEach(function (ref) {\n          var children = ref.children;\n          return this$1$1.toggleElement(toNodes(children).filter(function (child) {\n            return hasClass(child, this$1$1.cls);\n          }), false, prev >= 0).then(function () {\n            return this$1$1.toggleElement(children[next], true, prev >= 0);\n          });\n        });\n      }\n    }\n  };\n  var tab = {\n    mixins: [Class],\n    extends: Switcher,\n    props: {\n      media: Boolean\n    },\n    data: {\n      media: 960,\n      attrItem: 'uk-tab-item'\n    },\n    connected: function () {\n      var cls = hasClass(this.$el, 'uk-tab-left') ? 'uk-tab-left' : hasClass(this.$el, 'uk-tab-right') ? 'uk-tab-right' : false;\n\n      if (cls) {\n        this.$create('toggle', this.$el, {\n          cls: cls,\n          mode: 'media',\n          media: this.media\n        });\n      }\n    }\n  };\n  var KEY_SPACE = 32;\n  var toggle = {\n    mixins: [Media, Togglable],\n    args: 'target',\n    props: {\n      href: String,\n      target: null,\n      mode: 'list',\n      queued: Boolean\n    },\n    data: {\n      href: false,\n      target: false,\n      mode: 'click',\n      queued: true\n    },\n    connected: function () {\n      if (!includes(this.mode, 'media') && !isFocusable(this.$el)) {\n        attr(this.$el, 'tabindex', '0');\n      }\n    },\n    computed: {\n      target: {\n        get: function (ref, $el) {\n          var href = ref.href;\n          var target = ref.target;\n          target = queryAll(target || href, $el);\n          return target.length && target || [$el];\n        },\n        watch: function () {\n          this.updateAria();\n        },\n        immediate: true\n      }\n    },\n    events: [{\n      name: pointerDown,\n      filter: function () {\n        return includes(this.mode, 'hover');\n      },\n      handler: function (e) {\n        var this$1$1 = this;\n\n        if (!isTouch(e) || this._showState) {\n          return;\n        } // Clicking a button does not give it focus on all browsers and platforms\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus\n\n\n        trigger(this.$el, 'focus');\n        once(document, pointerDown, function () {\n          return trigger(this$1$1.$el, 'blur');\n        }, true, function (e) {\n          return !within(e.target, this$1$1.$el);\n        }); // Prevent initial click to prevent double toggle through focus + click\n\n        if (includes(this.mode, 'click')) {\n          this._preventClick = true;\n        }\n      }\n    }, {\n      name: pointerEnter + \" \" + pointerLeave + \" focus blur\",\n      filter: function () {\n        return includes(this.mode, 'hover');\n      },\n      handler: function (e) {\n        if (isTouch(e)) {\n          return;\n        }\n\n        var show = includes([pointerEnter, 'focus'], e.type);\n        var expanded = attr(this.$el, 'aria-expanded'); // Skip hide if still hovered or focused\n\n        if (!show && (e.type === pointerLeave && matches(this.$el, ':focus') || e.type === 'blur' && matches(this.$el, ':hover'))) {\n          return;\n        } // Skip if state does not change e.g. hover + focus received\n\n\n        if (this._showState && show === (expanded !== this._showState)) {\n          // Ensure reset if state has changed through click\n          if (!show) {\n            this._showState = null;\n          }\n\n          return;\n        }\n\n        this._showState = show ? expanded : null;\n        this.toggle(\"toggle\" + (show ? 'show' : 'hide'));\n      }\n    }, {\n      name: 'keydown',\n      filter: function () {\n        return includes(this.mode, 'click') && this.$el.tagName !== 'INPUT';\n      },\n      handler: function (e) {\n        if (e.keyCode === KEY_SPACE) {\n          e.preventDefault();\n          this.$el.click();\n        }\n      }\n    }, {\n      name: 'click',\n      filter: function () {\n        return includes(this.mode, 'click');\n      },\n      handler: function (e) {\n        if (this._preventClick) {\n          return this._preventClick = null;\n        }\n\n        var link;\n\n        if (closest(e.target, 'a[href=\"#\"], a[href=\"\"]') || (link = closest(e.target, 'a[href]')) && (attr(this.$el, 'aria-expanded') !== 'true' || link.hash && matches(this.target, link.hash))) {\n          e.preventDefault();\n        }\n\n        this.toggle();\n      }\n    }, {\n      name: 'toggled',\n      self: true,\n      el: function () {\n        return this.target;\n      },\n      handler: function (e, toggled) {\n        if (e.target === this.target[0]) {\n          this.updateAria(toggled);\n        }\n      }\n    }],\n    update: {\n      read: function () {\n        return includes(this.mode, 'media') && this.media ? {\n          match: this.matchMedia\n        } : false;\n      },\n      write: function (ref) {\n        var match = ref.match;\n        var toggled = this.isToggled(this.target);\n\n        if (match ? !toggled : toggled) {\n          this.toggle();\n        }\n      },\n      events: ['resize']\n    },\n    methods: {\n      toggle: function (type) {\n        var this$1$1 = this;\n\n        if (!trigger(this.target, type || 'toggle', [this])) {\n          return;\n        }\n\n        if (!this.queued) {\n          return this.toggleElement(this.target);\n        }\n\n        var leaving = this.target.filter(function (el) {\n          return hasClass(el, this$1$1.clsLeave);\n        });\n\n        if (leaving.length) {\n          this.target.forEach(function (el) {\n            var isLeaving = includes(leaving, el);\n            this$1$1.toggleElement(el, isLeaving, isLeaving);\n          });\n          return;\n        }\n\n        var toggled = this.target.filter(this.isToggled);\n        this.toggleElement(toggled, false).then(function () {\n          return this$1$1.toggleElement(this$1$1.target.filter(function (el) {\n            return !includes(toggled, el);\n          }), true);\n        });\n      },\n      updateAria: function (toggled) {\n        if (includes(this.mode, 'media')) {\n          return;\n        }\n\n        attr(this.$el, 'aria-expanded', isBoolean(toggled) ? toggled : this.isToggled(this.target));\n      }\n    }\n  };\n  var components$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Accordion: Accordion,\n    Alert: alert,\n    Cover: cover,\n    Drop: drop,\n    Dropdown: drop,\n    FormCustom: formCustom,\n    Gif: gif,\n    Grid: grid,\n    HeightMatch: heightMatch,\n    HeightViewport: heightViewport,\n    Icon: Icon,\n    Img: img,\n    Leader: leader,\n    Margin: Margin,\n    Modal: modal,\n    Nav: nav,\n    Navbar: navbar,\n    Offcanvas: offcanvas,\n    OverflowAuto: overflowAuto,\n    Responsive: responsive,\n    Scroll: scroll,\n    Scrollspy: scrollspy,\n    ScrollspyNav: scrollspyNav,\n    Sticky: sticky,\n    Svg: SVG,\n    Switcher: Switcher,\n    Tab: tab,\n    Toggle: toggle,\n    Video: Video,\n    Close: Close,\n    Spinner: Spinner,\n    SlidenavNext: Slidenav,\n    SlidenavPrevious: Slidenav,\n    SearchIcon: Search,\n    Marker: IconComponent,\n    NavbarToggleIcon: IconComponent,\n    OverlayIcon: IconComponent,\n    PaginationNext: IconComponent,\n    PaginationPrevious: IconComponent,\n    Totop: IconComponent\n  }); // register components\n\n  each(components$1, function (component, name) {\n    return UIkit.component(name, component);\n  }); // core functionality\n\n  UIkit.use(Core);\n  boot(UIkit);\n  var countdown = {\n    mixins: [Class],\n    props: {\n      date: String,\n      clsWrapper: String\n    },\n    data: {\n      date: '',\n      clsWrapper: '.uk-countdown-%unit%'\n    },\n    computed: {\n      date: function (ref) {\n        var date = ref.date;\n        return Date.parse(date);\n      },\n      days: function (ref, $el) {\n        var clsWrapper = ref.clsWrapper;\n        return $(clsWrapper.replace('%unit%', 'days'), $el);\n      },\n      hours: function (ref, $el) {\n        var clsWrapper = ref.clsWrapper;\n        return $(clsWrapper.replace('%unit%', 'hours'), $el);\n      },\n      minutes: function (ref, $el) {\n        var clsWrapper = ref.clsWrapper;\n        return $(clsWrapper.replace('%unit%', 'minutes'), $el);\n      },\n      seconds: function (ref, $el) {\n        var clsWrapper = ref.clsWrapper;\n        return $(clsWrapper.replace('%unit%', 'seconds'), $el);\n      },\n      units: function () {\n        var this$1$1 = this;\n        return ['days', 'hours', 'minutes', 'seconds'].filter(function (unit) {\n          return this$1$1[unit];\n        });\n      }\n    },\n    connected: function () {\n      this.start();\n    },\n    disconnected: function () {\n      var this$1$1 = this;\n      this.stop();\n      this.units.forEach(function (unit) {\n        return empty(this$1$1[unit]);\n      });\n    },\n    events: [{\n      name: 'visibilitychange',\n      el: function () {\n        return document;\n      },\n      handler: function () {\n        if (document.hidden) {\n          this.stop();\n        } else {\n          this.start();\n        }\n      }\n    }],\n    update: {\n      write: function () {\n        var this$1$1 = this;\n        var timespan = getTimeSpan(this.date);\n\n        if (timespan.total <= 0) {\n          this.stop();\n          timespan.days = timespan.hours = timespan.minutes = timespan.seconds = 0;\n        }\n\n        this.units.forEach(function (unit) {\n          var digits = String(Math.floor(timespan[unit]));\n          digits = digits.length < 2 ? \"0\" + digits : digits;\n          var el = this$1$1[unit];\n\n          if (el.textContent !== digits) {\n            digits = digits.split('');\n\n            if (digits.length !== el.children.length) {\n              html(el, digits.map(function () {\n                return '<span></span>';\n              }).join(''));\n            }\n\n            digits.forEach(function (digit, i) {\n              return el.children[i].textContent = digit;\n            });\n          }\n        });\n      }\n    },\n    methods: {\n      start: function () {\n        this.stop();\n\n        if (this.date && this.units.length) {\n          this.$update();\n          this.timer = setInterval(this.$update, 1000);\n        }\n      },\n      stop: function () {\n        if (this.timer) {\n          clearInterval(this.timer);\n          this.timer = null;\n        }\n      }\n    }\n  };\n\n  function getTimeSpan(date) {\n    var total = date - Date.now();\n    return {\n      total: total,\n      seconds: total / 1000 % 60,\n      minutes: total / 1000 / 60 % 60,\n      hours: total / 1000 / 60 / 60 % 24,\n      days: total / 1000 / 60 / 60 / 24\n    };\n  }\n\n  var clsLeave = 'uk-transition-leave';\n  var clsEnter = 'uk-transition-enter';\n\n  function fade(action, target, duration, stagger) {\n    if (stagger === void 0) stagger = 0;\n    var index = transitionIndex(target, true);\n    var propsIn = {\n      opacity: 1\n    };\n    var propsOut = {\n      opacity: 0\n    };\n\n    var wrapIndexFn = function (fn) {\n      return function () {\n        return index === transitionIndex(target) ? fn() : Promise$1.reject();\n      };\n    };\n\n    var leaveFn = wrapIndexFn(function () {\n      addClass(target, clsLeave);\n      return Promise$1.all(getTransitionNodes(target).map(function (child, i) {\n        return new Promise$1(function (resolve) {\n          return setTimeout(function () {\n            return Transition.start(child, propsOut, duration / 2, 'ease').then(resolve);\n          }, i * stagger);\n        });\n      })).then(function () {\n        return removeClass(target, clsLeave);\n      });\n    });\n    var enterFn = wrapIndexFn(function () {\n      var oldHeight = height(target);\n      addClass(target, clsEnter);\n      action();\n      css(children(target), {\n        opacity: 0\n      }); // Ensure UIkit updates have propagated\n\n      return new Promise$1(function (resolve) {\n        return requestAnimationFrame(function () {\n          var nodes = children(target);\n          var newHeight = height(target); // Ensure Grid cells do not stretch when height is applied\n\n          css(target, 'alignContent', 'flex-start');\n          height(target, oldHeight);\n          var transitionNodes = getTransitionNodes(target);\n          css(nodes, propsOut);\n          var transitions = transitionNodes.map(function (child, i) {\n            return new Promise$1(function (resolve) {\n              return setTimeout(function () {\n                return Transition.start(child, propsIn, duration / 2, 'ease').then(resolve);\n              }, i * stagger);\n            });\n          });\n\n          if (oldHeight !== newHeight) {\n            transitions.push(Transition.start(target, {\n              height: newHeight\n            }, duration / 2 + transitionNodes.length * stagger, 'ease'));\n          }\n\n          Promise$1.all(transitions).then(function () {\n            removeClass(target, clsEnter);\n\n            if (index === transitionIndex(target)) {\n              css(target, {\n                height: '',\n                alignContent: ''\n              });\n              css(nodes, {\n                opacity: ''\n              });\n              delete target.dataset.transition;\n            }\n\n            resolve();\n          });\n        });\n      });\n    });\n    return hasClass(target, clsLeave) ? waitTransitionend(target).then(enterFn) : hasClass(target, clsEnter) ? waitTransitionend(target).then(leaveFn).then(enterFn) : leaveFn().then(enterFn);\n  }\n\n  function transitionIndex(target, next) {\n    if (next) {\n      target.dataset.transition = 1 + transitionIndex(target);\n    }\n\n    return toNumber(target.dataset.transition) || 0;\n  }\n\n  function waitTransitionend(target) {\n    return Promise$1.all(children(target).filter(Transition.inProgress).map(function (el) {\n      return new Promise$1(function (resolve) {\n        return once(el, 'transitionend transitioncanceled', resolve);\n      });\n    }));\n  }\n\n  function getTransitionNodes(target) {\n    return getRows(children(target)).reduce(function (nodes, row) {\n      return nodes.concat(sortBy$1(row.filter(function (el) {\n        return isInView(el);\n      }), 'offsetLeft'));\n    }, []);\n  }\n\n  function slide(action, target, duration) {\n    return new Promise$1(function (resolve) {\n      return requestAnimationFrame(function () {\n        var nodes = children(target); // Get current state\n\n        var currentProps = nodes.map(function (el) {\n          return getProps(el, true);\n        });\n        var targetProps = css(target, ['height', 'padding']); // Cancel previous animations\n\n        Transition.cancel(target);\n        nodes.forEach(Transition.cancel);\n        reset(target); // Adding, sorting, removing nodes\n\n        action(); // Find new nodes\n\n        nodes = nodes.concat(children(target).filter(function (el) {\n          return !includes(nodes, el);\n        })); // Wait for update to propagate\n\n        Promise$1.resolve().then(function () {\n          // Force update\n          fastdom.flush(); // Get new state\n\n          var targetPropsTo = css(target, ['height', 'padding']);\n          var ref = getTransitionProps(target, nodes, currentProps);\n          var propsTo = ref[0];\n          var propsFrom = ref[1]; // Reset to previous state\n\n          nodes.forEach(function (el, i) {\n            return propsFrom[i] && css(el, propsFrom[i]);\n          });\n          css(target, assign({\n            display: 'block'\n          }, targetProps)); // Start transitions on next frame\n\n          requestAnimationFrame(function () {\n            var transitions = nodes.map(function (el, i) {\n              return parent(el) === target && Transition.start(el, propsTo[i], duration, 'ease');\n            }).concat(Transition.start(target, targetPropsTo, duration, 'ease'));\n            Promise$1.all(transitions).then(function () {\n              nodes.forEach(function (el, i) {\n                return parent(el) === target && css(el, 'display', propsTo[i].opacity === 0 ? 'none' : '');\n              });\n              reset(target);\n            }, noop).then(resolve);\n          });\n        });\n      });\n    });\n  }\n\n  function getProps(el, opacity) {\n    var zIndex = css(el, 'zIndex');\n    return isVisible(el) ? assign({\n      display: '',\n      opacity: opacity ? css(el, 'opacity') : '0',\n      pointerEvents: 'none',\n      position: 'absolute',\n      zIndex: zIndex === 'auto' ? index(el) : zIndex\n    }, getPositionWithMargin(el)) : false;\n  }\n\n  function getTransitionProps(target, nodes, currentProps) {\n    var propsTo = nodes.map(function (el, i) {\n      return parent(el) && i in currentProps ? currentProps[i] ? isVisible(el) ? getPositionWithMargin(el) : {\n        opacity: 0\n      } : {\n        opacity: isVisible(el) ? 1 : 0\n      } : false;\n    });\n    var propsFrom = propsTo.map(function (props, i) {\n      var from = parent(nodes[i]) === target && (currentProps[i] || getProps(nodes[i]));\n\n      if (!from) {\n        return false;\n      }\n\n      if (!props) {\n        delete from.opacity;\n      } else if (!('opacity' in props)) {\n        var opacity = from.opacity;\n\n        if (opacity % 1) {\n          props.opacity = 1;\n        } else {\n          delete from.opacity;\n        }\n      }\n\n      return from;\n    });\n    return [propsTo, propsFrom];\n  }\n\n  function reset(el) {\n    css(el.children, {\n      height: '',\n      left: '',\n      opacity: '',\n      pointerEvents: '',\n      position: '',\n      top: '',\n      marginTop: '',\n      marginLeft: '',\n      transform: '',\n      width: '',\n      zIndex: ''\n    });\n    css(el, {\n      height: '',\n      display: '',\n      padding: ''\n    });\n  }\n\n  function getPositionWithMargin(el) {\n    var ref = offset(el);\n    var height = ref.height;\n    var width = ref.width;\n    var ref$1 = position(el);\n    var top = ref$1.top;\n    var left = ref$1.left;\n    var ref$2 = css(el, ['marginTop', 'marginLeft']);\n    var marginLeft = ref$2.marginLeft;\n    var marginTop = ref$2.marginTop;\n    return {\n      top: top,\n      left: left,\n      height: height,\n      width: width,\n      marginLeft: marginLeft,\n      marginTop: marginTop,\n      transform: ''\n    };\n  }\n\n  var Animate = {\n    props: {\n      duration: Number,\n      animation: Boolean\n    },\n    data: {\n      duration: 150,\n      animation: 'slide'\n    },\n    methods: {\n      animate: function (action, target) {\n        var this$1$1 = this;\n        if (target === void 0) target = this.$el;\n        var name = this.animation;\n        var animationFn = name === 'fade' ? fade : name === 'delayed-fade' ? function () {\n          var args = [],\n              len = arguments.length;\n\n          while (len--) args[len] = arguments[len];\n\n          return fade.apply(void 0, args.concat([40]));\n        } : name ? slide : function () {\n          action();\n          return Promise$1.resolve();\n        };\n        return animationFn(action, target, this.duration).then(function () {\n          return this$1$1.$update(target, 'resize');\n        }, noop);\n      }\n    }\n  };\n  var filter = {\n    mixins: [Animate],\n    args: 'target',\n    props: {\n      target: Boolean,\n      selActive: Boolean\n    },\n    data: {\n      target: null,\n      selActive: false,\n      attrItem: 'uk-filter-control',\n      cls: 'uk-active',\n      duration: 250\n    },\n    computed: {\n      toggles: {\n        get: function (ref, $el) {\n          var attrItem = ref.attrItem;\n          return $$(\"[\" + attrItem + \"],[data-\" + attrItem + \"]\", $el);\n        },\n        watch: function () {\n          var this$1$1 = this;\n          this.updateState();\n\n          if (this.selActive !== false) {\n            var actives = $$(this.selActive, this.$el);\n            this.toggles.forEach(function (el) {\n              return toggleClass(el, this$1$1.cls, includes(actives, el));\n            });\n          }\n        },\n        immediate: true\n      },\n      children: {\n        get: function (ref, $el) {\n          var target = ref.target;\n          return $$(target + \" > *\", $el);\n        },\n        watch: function (list, old) {\n          if (old && !isEqualList(list, old)) {\n            this.updateState();\n          }\n        },\n        immediate: true\n      }\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return \"[\" + this.attrItem + \"],[data-\" + this.attrItem + \"]\";\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.apply(e.current);\n      }\n    }],\n    methods: {\n      apply: function (el) {\n        var prevState = this.getState();\n        var newState = mergeState(el, this.attrItem, this.getState());\n\n        if (!isEqualState(prevState, newState)) {\n          this.setState(newState);\n        }\n      },\n      getState: function () {\n        var this$1$1 = this;\n        return this.toggles.filter(function (item) {\n          return hasClass(item, this$1$1.cls);\n        }).reduce(function (state, el) {\n          return mergeState(el, this$1$1.attrItem, state);\n        }, {\n          filter: {\n            '': ''\n          },\n          sort: []\n        });\n      },\n      setState: function (state, animate) {\n        var this$1$1 = this;\n        if (animate === void 0) animate = true;\n        state = assign({\n          filter: {\n            '': ''\n          },\n          sort: []\n        }, state);\n        trigger(this.$el, 'beforeFilter', [this, state]);\n        this.toggles.forEach(function (el) {\n          return toggleClass(el, this$1$1.cls, !!matchFilter(el, this$1$1.attrItem, state));\n        });\n        Promise$1.all($$(this.target, this.$el).map(function (target) {\n          var filterFn = function () {\n            applyState(state, target, children(target));\n            this$1$1.$update(this$1$1.$el);\n          };\n\n          return animate ? this$1$1.animate(filterFn, target) : filterFn();\n        })).then(function () {\n          return trigger(this$1$1.$el, 'afterFilter', [this$1$1]);\n        });\n      },\n      updateState: function () {\n        var this$1$1 = this;\n        fastdom.write(function () {\n          return this$1$1.setState(this$1$1.getState(), false);\n        });\n      }\n    }\n  };\n\n  function getFilter(el, attr) {\n    return parseOptions(data(el, attr), ['filter']);\n  }\n\n  function isEqualState(stateA, stateB) {\n    return ['filter', 'sort'].every(function (prop) {\n      return isEqual(stateA[prop], stateB[prop]);\n    });\n  }\n\n  function applyState(state, target, children) {\n    var selector = getSelector(state);\n    children.forEach(function (el) {\n      return css(el, 'display', selector && !matches(el, selector) ? 'none' : '');\n    });\n    var ref = state.sort;\n    var sort = ref[0];\n    var order = ref[1];\n\n    if (sort) {\n      var sorted = sortItems(children, sort, order);\n\n      if (!isEqual(sorted, children)) {\n        append(target, sorted);\n      }\n    }\n  }\n\n  function mergeState(el, attr, state) {\n    var filterBy = getFilter(el, attr);\n    var filter = filterBy.filter;\n    var group = filterBy.group;\n    var sort = filterBy.sort;\n    var order = filterBy.order;\n    if (order === void 0) order = 'asc';\n\n    if (filter || isUndefined(sort)) {\n      if (group) {\n        if (filter) {\n          delete state.filter[''];\n          state.filter[group] = filter;\n        } else {\n          delete state.filter[group];\n\n          if (isEmpty(state.filter) || '' in state.filter) {\n            state.filter = {\n              '': filter || ''\n            };\n          }\n        }\n      } else {\n        state.filter = {\n          '': filter || ''\n        };\n      }\n    }\n\n    if (!isUndefined(sort)) {\n      state.sort = [sort, order];\n    }\n\n    return state;\n  }\n\n  function matchFilter(el, attr, ref) {\n    var stateFilter = ref.filter;\n    if (stateFilter === void 0) stateFilter = {\n      '': ''\n    };\n    var ref_sort = ref.sort;\n    var stateSort = ref_sort[0];\n    var stateOrder = ref_sort[1];\n    var ref$1 = getFilter(el, attr);\n    var filter = ref$1.filter;\n    if (filter === void 0) filter = '';\n    var group = ref$1.group;\n    if (group === void 0) group = '';\n    var sort = ref$1.sort;\n    var order = ref$1.order;\n    if (order === void 0) order = 'asc';\n    return isUndefined(sort) ? group in stateFilter && filter === stateFilter[group] || !filter && group && !(group in stateFilter) && !stateFilter[''] : stateSort === sort && stateOrder === order;\n  }\n\n  function isEqualList(listA, listB) {\n    return listA.length === listB.length && listA.every(function (el) {\n      return ~listB.indexOf(el);\n    });\n  }\n\n  function getSelector(ref) {\n    var filter = ref.filter;\n    var selector = '';\n    each(filter, function (value) {\n      return selector += value || '';\n    });\n    return selector;\n  }\n\n  function sortItems(nodes, sort, order) {\n    return assign([], nodes).sort(function (a, b) {\n      return data(a, sort).localeCompare(data(b, sort), undefined, {\n        numeric: true\n      }) * (order === 'asc' || -1);\n    });\n  }\n\n  var Animations$2 = {\n    slide: {\n      show: function (dir) {\n        return [{\n          transform: translate(dir * -100)\n        }, {\n          transform: translate()\n        }];\n      },\n      percent: function (current) {\n        return translated(current);\n      },\n      translate: function (percent, dir) {\n        return [{\n          transform: translate(dir * -100 * percent)\n        }, {\n          transform: translate(dir * 100 * (1 - percent))\n        }];\n      }\n    }\n  };\n\n  function translated(el) {\n    return Math.abs(css(el, 'transform').split(',')[4] / el.offsetWidth) || 0;\n  }\n\n  function translate(value, unit) {\n    if (value === void 0) value = 0;\n    if (unit === void 0) unit = '%';\n    value += value ? unit : '';\n    return isIE ? \"translateX(\" + value + \")\" : \"translate3d(\" + value + \", 0, 0)\"; // currently, not translate3d in IE, translate3d within translate3d does not work while transitioning\n  }\n\n  function scale3d(value) {\n    return \"scale3d(\" + value + \", \" + value + \", 1)\";\n  }\n\n  var Animations$1 = assign({}, Animations$2, {\n    fade: {\n      show: function () {\n        return [{\n          opacity: 0\n        }, {\n          opacity: 1\n        }];\n      },\n      percent: function (current) {\n        return 1 - css(current, 'opacity');\n      },\n      translate: function (percent) {\n        return [{\n          opacity: 1 - percent\n        }, {\n          opacity: percent\n        }];\n      }\n    },\n    scale: {\n      show: function () {\n        return [{\n          opacity: 0,\n          transform: scale3d(1 - .2)\n        }, {\n          opacity: 1,\n          transform: scale3d(1)\n        }];\n      },\n      percent: function (current) {\n        return 1 - css(current, 'opacity');\n      },\n      translate: function (percent) {\n        return [{\n          opacity: 1 - percent,\n          transform: scale3d(1 - .2 * percent)\n        }, {\n          opacity: percent,\n          transform: scale3d(1 - .2 + .2 * percent)\n        }];\n      }\n    }\n  });\n\n  function Transitioner$1(prev, next, dir, ref) {\n    var animation = ref.animation;\n    var easing = ref.easing;\n    var percent = animation.percent;\n    var translate = animation.translate;\n    var show = animation.show;\n    if (show === void 0) show = noop;\n    var props = show(dir);\n    var deferred = new Deferred();\n    return {\n      dir: dir,\n      show: function (duration, percent, linear) {\n        var this$1$1 = this;\n        if (percent === void 0) percent = 0;\n        var timing = linear ? 'linear' : easing;\n        duration -= Math.round(duration * clamp(percent, -1, 1));\n        this.translate(percent);\n        triggerUpdate$1(next, 'itemin', {\n          percent: percent,\n          duration: duration,\n          timing: timing,\n          dir: dir\n        });\n        triggerUpdate$1(prev, 'itemout', {\n          percent: 1 - percent,\n          duration: duration,\n          timing: timing,\n          dir: dir\n        });\n        Promise$1.all([Transition.start(next, props[1], duration, timing), Transition.start(prev, props[0], duration, timing)]).then(function () {\n          this$1$1.reset();\n          deferred.resolve();\n        }, noop);\n        return deferred.promise;\n      },\n      cancel: function () {\n        Transition.cancel([next, prev]);\n      },\n      reset: function () {\n        for (var prop in props[0]) {\n          css([next, prev], prop, '');\n        }\n      },\n      forward: function (duration, percent) {\n        if (percent === void 0) percent = this.percent();\n        Transition.cancel([next, prev]);\n        return this.show(duration, percent, true);\n      },\n      translate: function (percent) {\n        this.reset();\n        var props = translate(percent, dir);\n        css(next, props[1]);\n        css(prev, props[0]);\n        triggerUpdate$1(next, 'itemtranslatein', {\n          percent: percent,\n          dir: dir\n        });\n        triggerUpdate$1(prev, 'itemtranslateout', {\n          percent: 1 - percent,\n          dir: dir\n        });\n      },\n      percent: function () {\n        return percent(prev || next, next, dir);\n      },\n      getDistance: function () {\n        return prev && prev.offsetWidth;\n      }\n    };\n  }\n\n  function triggerUpdate$1(el, type, data) {\n    trigger(el, createEvent(type, false, false, data));\n  }\n\n  var SliderAutoplay = {\n    props: {\n      autoplay: Boolean,\n      autoplayInterval: Number,\n      pauseOnHover: Boolean\n    },\n    data: {\n      autoplay: false,\n      autoplayInterval: 7000,\n      pauseOnHover: true\n    },\n    connected: function () {\n      this.autoplay && this.startAutoplay();\n    },\n    disconnected: function () {\n      this.stopAutoplay();\n    },\n    update: function () {\n      attr(this.slides, 'tabindex', '-1');\n    },\n    events: [{\n      name: 'visibilitychange',\n      el: function () {\n        return document;\n      },\n      filter: function () {\n        return this.autoplay;\n      },\n      handler: function () {\n        if (document.hidden) {\n          this.stopAutoplay();\n        } else {\n          this.startAutoplay();\n        }\n      }\n    }],\n    methods: {\n      startAutoplay: function () {\n        var this$1$1 = this;\n        this.stopAutoplay();\n        this.interval = setInterval(function () {\n          return (!this$1$1.draggable || !$(':focus', this$1$1.$el)) && (!this$1$1.pauseOnHover || !matches(this$1$1.$el, ':hover')) && !this$1$1.stack.length && this$1$1.show('next');\n        }, this.autoplayInterval);\n      },\n      stopAutoplay: function () {\n        this.interval && clearInterval(this.interval);\n      }\n    }\n  };\n  var SliderDrag = {\n    props: {\n      draggable: Boolean\n    },\n    data: {\n      draggable: true,\n      threshold: 10\n    },\n    created: function () {\n      var this$1$1 = this;\n      ['start', 'move', 'end'].forEach(function (key) {\n        var fn = this$1$1[key];\n\n        this$1$1[key] = function (e) {\n          var pos = getEventPos(e).x * (isRtl ? -1 : 1);\n          this$1$1.prevPos = pos !== this$1$1.pos ? this$1$1.pos : this$1$1.prevPos;\n          this$1$1.pos = pos;\n          fn(e);\n        };\n      });\n    },\n    events: [{\n      name: pointerDown,\n      delegate: function () {\n        return this.selSlides;\n      },\n      handler: function (e) {\n        if (!this.draggable || !isTouch(e) && hasTextNodesOnly(e.target) || closest(e.target, selInput) || e.button > 0 || this.length < 2) {\n          return;\n        }\n\n        this.start(e);\n      }\n    }, {\n      name: 'dragstart',\n      handler: function (e) {\n        e.preventDefault();\n      }\n    }],\n    methods: {\n      start: function () {\n        this.drag = this.pos;\n\n        if (this._transitioner) {\n          this.percent = this._transitioner.percent();\n          this.drag += this._transitioner.getDistance() * this.percent * this.dir;\n\n          this._transitioner.cancel();\n\n          this._transitioner.translate(this.percent);\n\n          this.dragging = true;\n          this.stack = [];\n        } else {\n          this.prevIndex = this.index;\n        }\n\n        on(document, pointerMove, this.move, {\n          passive: false\n        }); // 'input' event is triggered by video controls\n\n        on(document, pointerUp + \" \" + pointerCancel + \" input\", this.end, true);\n        css(this.list, 'userSelect', 'none');\n      },\n      move: function (e) {\n        var this$1$1 = this;\n        var distance = this.pos - this.drag;\n\n        if (distance === 0 || this.prevPos === this.pos || !this.dragging && Math.abs(distance) < this.threshold) {\n          return;\n        } // prevent click event\n\n\n        css(this.list, 'pointerEvents', 'none');\n        e.cancelable && e.preventDefault();\n        this.dragging = true;\n        this.dir = distance < 0 ? 1 : -1;\n        var ref = this;\n        var slides = ref.slides;\n        var ref$1 = this;\n        var prevIndex = ref$1.prevIndex;\n        var dis = Math.abs(distance);\n        var nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n        var width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n\n        while (nextIndex !== prevIndex && dis > width) {\n          this.drag -= width * this.dir;\n          prevIndex = nextIndex;\n          dis -= width;\n          nextIndex = this.getIndex(prevIndex + this.dir, prevIndex);\n          width = this._getDistance(prevIndex, nextIndex) || slides[prevIndex].offsetWidth;\n        }\n\n        this.percent = dis / width;\n        var prev = slides[prevIndex];\n        var next = slides[nextIndex];\n        var changed = this.index !== nextIndex;\n        var edge = prevIndex === nextIndex;\n        var itemShown;\n        [this.index, this.prevIndex].filter(function (i) {\n          return !includes([nextIndex, prevIndex], i);\n        }).forEach(function (i) {\n          trigger(slides[i], 'itemhidden', [this$1$1]);\n\n          if (edge) {\n            itemShown = true;\n            this$1$1.prevIndex = prevIndex;\n          }\n        });\n\n        if (this.index === prevIndex && this.prevIndex !== prevIndex || itemShown) {\n          trigger(slides[this.index], 'itemshown', [this]);\n        }\n\n        if (changed) {\n          this.prevIndex = prevIndex;\n          this.index = nextIndex;\n          !edge && trigger(prev, 'beforeitemhide', [this]);\n          trigger(next, 'beforeitemshow', [this]);\n        }\n\n        this._transitioner = this._translate(Math.abs(this.percent), prev, !edge && next);\n\n        if (changed) {\n          !edge && trigger(prev, 'itemhide', [this]);\n          trigger(next, 'itemshow', [this]);\n        }\n      },\n      end: function () {\n        off(document, pointerMove, this.move, {\n          passive: false\n        });\n        off(document, pointerUp + \" \" + pointerCancel + \" input\", this.end, true);\n\n        if (this.dragging) {\n          this.dragging = null;\n\n          if (this.index === this.prevIndex) {\n            this.percent = 1 - this.percent;\n            this.dir *= -1;\n\n            this._show(false, this.index, true);\n\n            this._transitioner = null;\n          } else {\n            var dirChange = (isRtl ? this.dir * (isRtl ? 1 : -1) : this.dir) < 0 === this.prevPos > this.pos;\n            this.index = dirChange ? this.index : this.prevIndex;\n\n            if (dirChange) {\n              this.percent = 1 - this.percent;\n            }\n\n            this.show(this.dir > 0 && !dirChange || this.dir < 0 && dirChange ? 'next' : 'previous', true);\n          }\n        }\n\n        css(this.list, {\n          userSelect: '',\n          pointerEvents: ''\n        });\n        this.drag = this.percent = null;\n      }\n    }\n  };\n\n  function hasTextNodesOnly(el) {\n    return !el.children.length && el.childNodes.length;\n  }\n\n  var SliderNav = {\n    data: {\n      selNav: false\n    },\n    computed: {\n      nav: function (ref, $el) {\n        var selNav = ref.selNav;\n        return $(selNav, $el);\n      },\n      selNavItem: function (ref) {\n        var attrItem = ref.attrItem;\n        return \"[\" + attrItem + \"],[data-\" + attrItem + \"]\";\n      },\n      navItems: function (_, $el) {\n        return $$(this.selNavItem, $el);\n      }\n    },\n    update: {\n      write: function () {\n        var this$1$1 = this;\n\n        if (this.nav && this.length !== this.nav.children.length) {\n          html(this.nav, this.slides.map(function (_, i) {\n            return \"<li \" + this$1$1.attrItem + \"=\\\"\" + i + \"\\\"><a href></a></li>\";\n          }).join(''));\n        }\n\n        this.navItems.concat(this.nav).forEach(function (el) {\n          return el && (el.hidden = !this$1$1.maxIndex);\n        });\n        this.updateNav();\n      },\n      events: ['resize']\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.selNavItem;\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.show(data(e.current, this.attrItem));\n      }\n    }, {\n      name: 'itemshow',\n      handler: 'updateNav'\n    }],\n    methods: {\n      updateNav: function () {\n        var this$1$1 = this;\n        var i = this.getValidIndex();\n        this.navItems.forEach(function (el) {\n          var cmd = data(el, this$1$1.attrItem);\n          toggleClass(el, this$1$1.clsActive, toNumber(cmd) === i);\n          toggleClass(el, 'uk-invisible', this$1$1.finite && (cmd === 'previous' && i === 0 || cmd === 'next' && i >= this$1$1.maxIndex));\n        });\n      }\n    }\n  };\n  var Slider = {\n    mixins: [SliderAutoplay, SliderDrag, SliderNav],\n    props: {\n      clsActivated: Boolean,\n      easing: String,\n      index: Number,\n      finite: Boolean,\n      velocity: Number,\n      selSlides: String\n    },\n    data: function () {\n      return {\n        easing: 'ease',\n        finite: false,\n        velocity: 1,\n        index: 0,\n        prevIndex: -1,\n        stack: [],\n        percent: 0,\n        clsActive: 'uk-active',\n        clsActivated: false,\n        Transitioner: false,\n        transitionOptions: {}\n      };\n    },\n    connected: function () {\n      this.prevIndex = -1;\n      this.index = this.getValidIndex(this.$props.index);\n      this.stack = [];\n    },\n    disconnected: function () {\n      removeClass(this.slides, this.clsActive);\n    },\n    computed: {\n      duration: function (ref, $el) {\n        var velocity = ref.velocity;\n        return speedUp($el.offsetWidth / velocity);\n      },\n      list: function (ref, $el) {\n        var selList = ref.selList;\n        return $(selList, $el);\n      },\n      maxIndex: function () {\n        return this.length - 1;\n      },\n      selSlides: function (ref) {\n        var selList = ref.selList;\n        var selSlides = ref.selSlides;\n        return selList + \" \" + (selSlides || '> *');\n      },\n      slides: {\n        get: function () {\n          return $$(this.selSlides, this.$el);\n        },\n        watch: function () {\n          this.$reset();\n        }\n      },\n      length: function () {\n        return this.slides.length;\n      }\n    },\n    events: {\n      itemshown: function () {\n        this.$update(this.list);\n      }\n    },\n    methods: {\n      show: function (index, force) {\n        var this$1$1 = this;\n        if (force === void 0) force = false;\n\n        if (this.dragging || !this.length) {\n          return;\n        }\n\n        var ref = this;\n        var stack = ref.stack;\n        var queueIndex = force ? 0 : stack.length;\n\n        var reset = function () {\n          stack.splice(queueIndex, 1);\n\n          if (stack.length) {\n            this$1$1.show(stack.shift(), true);\n          }\n        };\n\n        stack[force ? 'unshift' : 'push'](index);\n\n        if (!force && stack.length > 1) {\n          if (stack.length === 2) {\n            this._transitioner.forward(Math.min(this.duration, 200));\n          }\n\n          return;\n        }\n\n        var prevIndex = this.getIndex(this.index);\n        var prev = hasClass(this.slides, this.clsActive) && this.slides[prevIndex];\n        var nextIndex = this.getIndex(index, this.index);\n        var next = this.slides[nextIndex];\n\n        if (prev === next) {\n          reset();\n          return;\n        }\n\n        this.dir = getDirection(index, prevIndex);\n        this.prevIndex = prevIndex;\n        this.index = nextIndex;\n\n        if (prev && !trigger(prev, 'beforeitemhide', [this]) || !trigger(next, 'beforeitemshow', [this, prev])) {\n          this.index = this.prevIndex;\n          reset();\n          return;\n        }\n\n        var promise = this._show(prev, next, force).then(function () {\n          prev && trigger(prev, 'itemhidden', [this$1$1]);\n          trigger(next, 'itemshown', [this$1$1]);\n          return new Promise$1(function (resolve) {\n            fastdom.write(function () {\n              stack.shift();\n\n              if (stack.length) {\n                this$1$1.show(stack.shift(), true);\n              } else {\n                this$1$1._transitioner = null;\n              }\n\n              resolve();\n            });\n          });\n        });\n\n        prev && trigger(prev, 'itemhide', [this]);\n        trigger(next, 'itemshow', [this]);\n        return promise;\n      },\n      getIndex: function (index, prev) {\n        if (index === void 0) index = this.index;\n        if (prev === void 0) prev = this.index;\n        return clamp(getIndex(index, this.slides, prev, this.finite), 0, this.maxIndex);\n      },\n      getValidIndex: function (index, prevIndex) {\n        if (index === void 0) index = this.index;\n        if (prevIndex === void 0) prevIndex = this.prevIndex;\n        return this.getIndex(index, prevIndex);\n      },\n      _show: function (prev, next, force) {\n        this._transitioner = this._getTransitioner(prev, next, this.dir, assign({\n          easing: force ? next.offsetWidth < 600 ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)'\n          /* easeOutQuad */\n          : 'cubic-bezier(0.165, 0.84, 0.44, 1)'\n          /* easeOutQuart */\n          : this.easing\n        }, this.transitionOptions));\n\n        if (!force && !prev) {\n          this._translate(1);\n\n          return Promise$1.resolve();\n        }\n\n        var ref = this.stack;\n        var length = ref.length;\n        return this._transitioner[length > 1 ? 'forward' : 'show'](length > 1 ? Math.min(this.duration, 75 + 75 / (length - 1)) : this.duration, this.percent);\n      },\n      _getDistance: function (prev, next) {\n        return this._getTransitioner(prev, prev !== next && next).getDistance();\n      },\n      _translate: function (percent, prev, next) {\n        if (prev === void 0) prev = this.prevIndex;\n        if (next === void 0) next = this.index;\n\n        var transitioner = this._getTransitioner(prev !== next ? prev : false, next);\n\n        transitioner.translate(percent);\n        return transitioner;\n      },\n      _getTransitioner: function (prev, next, dir, options) {\n        if (prev === void 0) prev = this.prevIndex;\n        if (next === void 0) next = this.index;\n        if (dir === void 0) dir = this.dir || 1;\n        if (options === void 0) options = this.transitionOptions;\n        return new this.Transitioner(isNumber(prev) ? this.slides[prev] : prev, isNumber(next) ? this.slides[next] : next, dir * (isRtl ? -1 : 1), options);\n      }\n    }\n  };\n\n  function getDirection(index, prevIndex) {\n    return index === 'next' ? 1 : index === 'previous' ? -1 : index < prevIndex ? -1 : 1;\n  }\n\n  function speedUp(x) {\n    return .5 * x + 300; // parabola through (400,500; 600,600; 1800,1200)\n  }\n\n  var Slideshow = {\n    mixins: [Slider],\n    props: {\n      animation: String\n    },\n    data: {\n      animation: 'slide',\n      clsActivated: 'uk-transition-active',\n      Animations: Animations$2,\n      Transitioner: Transitioner$1\n    },\n    computed: {\n      animation: function (ref) {\n        var animation = ref.animation;\n        var Animations = ref.Animations;\n        return assign(Animations[animation] || Animations.slide, {\n          name: animation\n        });\n      },\n      transitionOptions: function () {\n        return {\n          animation: this.animation\n        };\n      }\n    },\n    events: {\n      'itemshow itemhide itemshown itemhidden': function (ref) {\n        var target = ref.target;\n        this.$update(target);\n      },\n      beforeitemshow: function (ref) {\n        var target = ref.target;\n        addClass(target, this.clsActive);\n      },\n      itemshown: function (ref) {\n        var target = ref.target;\n        addClass(target, this.clsActivated);\n      },\n      itemhidden: function (ref) {\n        var target = ref.target;\n        removeClass(target, this.clsActive, this.clsActivated);\n      }\n    }\n  };\n  var LightboxPanel = {\n    mixins: [Container, Modal, Togglable, Slideshow],\n    functional: true,\n    props: {\n      delayControls: Number,\n      preload: Number,\n      videoAutoplay: Boolean,\n      template: String\n    },\n    data: function () {\n      return {\n        preload: 1,\n        videoAutoplay: false,\n        delayControls: 3000,\n        items: [],\n        cls: 'uk-open',\n        clsPage: 'uk-lightbox-page',\n        selList: '.uk-lightbox-items',\n        attrItem: 'uk-lightbox-item',\n        selClose: '.uk-close-large',\n        selCaption: '.uk-lightbox-caption',\n        pauseOnHover: false,\n        velocity: 2,\n        Animations: Animations$1,\n        template: \"<div class=\\\"uk-lightbox uk-overflow-hidden\\\"> <ul class=\\\"uk-lightbox-items\\\"></ul> <div class=\\\"uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque\\\"> <button class=\\\"uk-lightbox-toolbar-icon uk-close-large\\\" type=\\\"button\\\" uk-close></button> </div> <a class=\\\"uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade\\\" href uk-slidenav-previous uk-lightbox-item=\\\"previous\\\"></a> <a class=\\\"uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade\\\" href uk-slidenav-next uk-lightbox-item=\\\"next\\\"></a> <div class=\\\"uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque\\\"></div> </div>\"\n      };\n    },\n    created: function () {\n      var $el = $(this.template);\n      var list = $(this.selList, $el);\n      this.items.forEach(function () {\n        return append(list, '<li>');\n      });\n      this.$mount(append(this.container, $el));\n    },\n    computed: {\n      caption: function (ref, $el) {\n        var selCaption = ref.selCaption;\n        return $(selCaption, $el);\n      }\n    },\n    events: [{\n      name: pointerMove + \" \" + pointerDown + \" keydown\",\n      handler: 'showControls'\n    }, {\n      name: 'click',\n      self: true,\n      delegate: function () {\n        return this.selSlides;\n      },\n      handler: function (e) {\n        if (e.defaultPrevented) {\n          return;\n        }\n\n        this.hide();\n      }\n    }, {\n      name: 'shown',\n      self: true,\n      handler: function () {\n        this.showControls();\n      }\n    }, {\n      name: 'hide',\n      self: true,\n      handler: function () {\n        this.hideControls();\n        removeClass(this.slides, this.clsActive);\n        Transition.stop(this.slides);\n      }\n    }, {\n      name: 'hidden',\n      self: true,\n      handler: function () {\n        this.$destroy(true);\n      }\n    }, {\n      name: 'keyup',\n      el: function () {\n        return document;\n      },\n      handler: function (e) {\n        if (!this.isToggled(this.$el) || !this.draggable) {\n          return;\n        }\n\n        switch (e.keyCode) {\n          case 37:\n            this.show('previous');\n            break;\n\n          case 39:\n            this.show('next');\n            break;\n        }\n      }\n    }, {\n      name: 'beforeitemshow',\n      handler: function (e) {\n        if (this.isToggled()) {\n          return;\n        }\n\n        this.draggable = false;\n        e.preventDefault();\n        this.toggleElement(this.$el, true, false);\n        this.animation = Animations$1['scale'];\n        removeClass(e.target, this.clsActive);\n        this.stack.splice(1, 0, this.index);\n      }\n    }, {\n      name: 'itemshow',\n      handler: function () {\n        html(this.caption, this.getItem().caption || '');\n\n        for (var j = -this.preload; j <= this.preload; j++) {\n          this.loadItem(this.index + j);\n        }\n      }\n    }, {\n      name: 'itemshown',\n      handler: function () {\n        this.draggable = this.$props.draggable;\n      }\n    }, {\n      name: 'itemload',\n      handler: function (_, item) {\n        var this$1$1 = this;\n        var src = item.source;\n        var type = item.type;\n        var alt = item.alt;\n        if (alt === void 0) alt = '';\n        var poster = item.poster;\n        var attrs = item.attrs;\n        if (attrs === void 0) attrs = {};\n        this.setItem(item, '<span uk-spinner></span>');\n\n        if (!src) {\n          return;\n        }\n\n        var matches;\n        var iframeAttrs = {\n          frameborder: '0',\n          allow: 'autoplay',\n          allowfullscreen: '',\n          style: 'max-width: 100%; box-sizing: border-box;',\n          'uk-responsive': '',\n          'uk-video': \"\" + this.videoAutoplay\n        }; // Image\n\n        if (type === 'image' || src.match(/\\.(avif|jpe?g|a?png|gif|svg|webp)($|\\?)/i)) {\n          getImage(src, attrs.srcset, attrs.size).then(function (ref) {\n            var width = ref.width;\n            var height = ref.height;\n            return this$1$1.setItem(item, createEl('img', assign({\n              src: src,\n              width: width,\n              height: height,\n              alt: alt\n            }, attrs)));\n          }, function () {\n            return this$1$1.setError(item);\n          }); // Video\n        } else if (type === 'video' || src.match(/\\.(mp4|webm|ogv)($|\\?)/i)) {\n          var video = createEl('video', assign({\n            src: src,\n            poster: poster,\n            controls: '',\n            playsinline: '',\n            'uk-video': \"\" + this.videoAutoplay\n          }, attrs));\n          on(video, 'loadedmetadata', function () {\n            attr(video, {\n              width: video.videoWidth,\n              height: video.videoHeight\n            });\n            this$1$1.setItem(item, video);\n          });\n          on(video, 'error', function () {\n            return this$1$1.setError(item);\n          }); // Iframe\n        } else if (type === 'iframe' || src.match(/\\.(html|php)($|\\?)/i)) {\n          this.setItem(item, createEl('iframe', assign({\n            src: src,\n            frameborder: '0',\n            allowfullscreen: '',\n            class: 'uk-lightbox-iframe'\n          }, attrs))); // YouTube\n        } else if (matches = src.match(/\\/\\/(?:.*?youtube(-nocookie)?\\..*?[?&]v=|youtu\\.be\\/)([\\w-]{11})[&?]?(.*)?/)) {\n          this.setItem(item, createEl('iframe', assign({\n            src: \"https://www.youtube\" + (matches[1] || '') + \".com/embed/\" + matches[2] + (matches[3] ? \"?\" + matches[3] : ''),\n            width: 1920,\n            height: 1080\n          }, iframeAttrs, attrs))); // Vimeo\n        } else if (matches = src.match(/\\/\\/.*?vimeo\\.[a-z]+\\/(\\d+)[&?]?(.*)?/)) {\n          ajax(\"https://vimeo.com/api/oembed.json?maxwidth=1920&url=\" + encodeURI(src), {\n            responseType: 'json',\n            withCredentials: false\n          }).then(function (ref) {\n            var ref_response = ref.response;\n            var height = ref_response.height;\n            var width = ref_response.width;\n            return this$1$1.setItem(item, createEl('iframe', assign({\n              src: \"https://player.vimeo.com/video/\" + matches[1] + (matches[2] ? \"?\" + matches[2] : ''),\n              width: width,\n              height: height\n            }, iframeAttrs, attrs)));\n          }, function () {\n            return this$1$1.setError(item);\n          });\n        }\n      }\n    }],\n    methods: {\n      loadItem: function (index) {\n        if (index === void 0) index = this.index;\n        var item = this.getItem(index);\n\n        if (!this.getSlide(item).childElementCount) {\n          trigger(this.$el, 'itemload', [item]);\n        }\n      },\n      getItem: function (index) {\n        if (index === void 0) index = this.index;\n        return this.items[getIndex(index, this.slides)];\n      },\n      setItem: function (item, content) {\n        trigger(this.$el, 'itemloaded', [this, html(this.getSlide(item), content)]);\n      },\n      getSlide: function (item) {\n        return this.slides[this.items.indexOf(item)];\n      },\n      setError: function (item) {\n        this.setItem(item, '<span uk-icon=\"icon: bolt; ratio: 2\"></span>');\n      },\n      showControls: function () {\n        clearTimeout(this.controlsTimer);\n        this.controlsTimer = setTimeout(this.hideControls, this.delayControls);\n        addClass(this.$el, 'uk-active', 'uk-transition-active');\n      },\n      hideControls: function () {\n        removeClass(this.$el, 'uk-active', 'uk-transition-active');\n      }\n    }\n  };\n\n  function createEl(tag, attrs) {\n    var el = fragment(\"<\" + tag + \">\");\n    attr(el, attrs);\n    return el;\n  }\n\n  var lightbox = {\n    install: install$1,\n    props: {\n      toggle: String\n    },\n    data: {\n      toggle: 'a'\n    },\n    computed: {\n      toggles: {\n        get: function (ref, $el) {\n          var toggle = ref.toggle;\n          return $$(toggle, $el);\n        },\n        watch: function () {\n          this.hide();\n        }\n      }\n    },\n    disconnected: function () {\n      this.hide();\n    },\n    events: [{\n      name: 'click',\n      delegate: function () {\n        return this.toggle + \":not(.uk-disabled)\";\n      },\n      handler: function (e) {\n        e.preventDefault();\n        this.show(e.current);\n      }\n    }],\n    methods: {\n      show: function (index) {\n        var this$1$1 = this;\n        var items = uniqueBy(this.toggles.map(toItem), 'source');\n\n        if (isElement(index)) {\n          var ref = toItem(index);\n          var source = ref.source;\n          index = findIndex(items, function (ref) {\n            var src = ref.source;\n            return source === src;\n          });\n        }\n\n        this.panel = this.panel || this.$create('lightboxPanel', assign({}, this.$props, {\n          items: items\n        }));\n        on(this.panel.$el, 'hidden', function () {\n          return this$1$1.panel = false;\n        });\n        return this.panel.show(index);\n      },\n      hide: function () {\n        return this.panel && this.panel.hide();\n      }\n    }\n  };\n\n  function install$1(UIkit, Lightbox) {\n    if (!UIkit.lightboxPanel) {\n      UIkit.component('lightboxPanel', LightboxPanel);\n    }\n\n    assign(Lightbox.props, UIkit.component('lightboxPanel').options.props);\n  }\n\n  function toItem(el) {\n    var item = {};\n    ['href', 'caption', 'type', 'poster', 'alt', 'attrs'].forEach(function (attr) {\n      item[attr === 'href' ? 'source' : attr] = data(el, attr);\n    });\n    item.attrs = parseOptions(item.attrs);\n    return item;\n  }\n\n  var obj$1;\n  var notification = {\n    mixins: [Container],\n    functional: true,\n    args: ['message', 'status'],\n    data: {\n      message: '',\n      status: '',\n      timeout: 5000,\n      group: null,\n      pos: 'top-center',\n      clsContainer: 'uk-notification',\n      clsClose: 'uk-notification-close',\n      clsMsg: 'uk-notification-message'\n    },\n    install: install,\n    computed: {\n      marginProp: function (ref) {\n        var pos = ref.pos;\n        return \"margin\" + (startsWith(pos, 'top') ? 'Top' : 'Bottom');\n      },\n      startProps: function () {\n        var obj;\n        return obj = {\n          opacity: 0\n        }, obj[this.marginProp] = -this.$el.offsetHeight, obj;\n      }\n    },\n    created: function () {\n      var container = $(\".\" + this.clsContainer + \"-\" + this.pos, this.container) || append(this.container, \"<div class=\\\"\" + this.clsContainer + \" \" + this.clsContainer + \"-\" + this.pos + \"\\\" style=\\\"display: block\\\"></div>\");\n      this.$mount(append(container, \"<div class=\\\"\" + this.clsMsg + (this.status ? \" \" + this.clsMsg + \"-\" + this.status : '') + \"\\\"> <a href class=\\\"\" + this.clsClose + \"\\\" data-uk-close></a> <div>\" + this.message + \"</div> </div>\"));\n    },\n    connected: function () {\n      var this$1$1 = this;\n      var obj;\n      var margin = toFloat(css(this.$el, this.marginProp));\n      Transition.start(css(this.$el, this.startProps), (obj = {\n        opacity: 1\n      }, obj[this.marginProp] = margin, obj)).then(function () {\n        if (this$1$1.timeout) {\n          this$1$1.timer = setTimeout(this$1$1.close, this$1$1.timeout);\n        }\n      });\n    },\n    events: (obj$1 = {\n      click: function (e) {\n        if (closest(e.target, 'a[href=\"#\"],a[href=\"\"]')) {\n          e.preventDefault();\n        }\n\n        this.close();\n      }\n    }, obj$1[pointerEnter] = function () {\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }, obj$1[pointerLeave] = function () {\n      if (this.timeout) {\n        this.timer = setTimeout(this.close, this.timeout);\n      }\n    }, obj$1),\n    methods: {\n      close: function (immediate) {\n        var this$1$1 = this;\n\n        var removeFn = function (el) {\n          var container = parent(el);\n          trigger(el, 'close', [this$1$1]);\n          remove$1(el);\n\n          if (container && !container.hasChildNodes()) {\n            remove$1(container);\n          }\n        };\n\n        if (this.timer) {\n          clearTimeout(this.timer);\n        }\n\n        if (immediate) {\n          removeFn(this.$el);\n        } else {\n          Transition.start(this.$el, this.startProps).then(removeFn);\n        }\n      }\n    }\n  };\n\n  function install(UIkit) {\n    UIkit.notification.closeAll = function (group, immediate) {\n      apply$1(document.body, function (el) {\n        var notification = UIkit.getComponent(el, 'notification');\n\n        if (notification && (!group || group === notification.group)) {\n          notification.close(immediate);\n        }\n      });\n    };\n  }\n\n  var props = {\n    x: transformFn,\n    y: transformFn,\n    rotate: transformFn,\n    scale: transformFn,\n    color: colorFn,\n    backgroundColor: colorFn,\n    borderColor: colorFn,\n    blur: filterFn,\n    hue: filterFn,\n    fopacity: filterFn,\n    grayscale: filterFn,\n    invert: filterFn,\n    saturate: filterFn,\n    sepia: filterFn,\n    opacity: cssPropFn,\n    stroke: strokeFn,\n    bgx: backgroundFn,\n    bgy: backgroundFn\n  };\n  var keys = Object.keys;\n  var Parallax = {\n    mixins: [Media],\n    props: fillObject(keys(props), 'list'),\n    data: fillObject(keys(props), undefined),\n    computed: {\n      props: function (properties, $el) {\n        var this$1$1 = this;\n        return keys(props).reduce(function (result, prop) {\n          if (!isUndefined(properties[prop])) {\n            result[prop] = props[prop].call(this$1$1, prop, $el, properties[prop].slice());\n          }\n\n          return result;\n        }, {});\n      }\n    },\n    methods: {\n      reset: function () {\n        var this$1$1 = this;\n        each(this.getCss(0), function (_, prop) {\n          return css(this$1$1.$el, prop, '');\n        });\n      },\n      getCss: function (percent) {\n        var this$1$1 = this;\n        return keys(this.props).reduce(function (css, prop) {\n          this$1$1.props[prop](css, percent);\n          return css;\n        }, {\n          transform: '',\n          filter: ''\n        });\n      }\n    }\n  };\n\n  function transformFn(prop, el, steps) {\n    var unit = getUnit(steps) || {\n      x: 'px',\n      y: 'px',\n      rotate: 'deg'\n    }[prop] || '';\n\n    if (prop === 'x' || prop === 'y') {\n      prop = \"translate\" + ucfirst(prop);\n    }\n\n    steps = steps.map(toFloat);\n\n    if (steps.length === 1) {\n      steps.unshift(prop === 'scale' ? 1 : 0);\n    }\n\n    return function (css, percent) {\n      var value = getValue(steps, percent);\n\n      if (startsWith(prop, 'translate')) {\n        value = toFloat(value).toFixed(unit === 'px' ? 0 : 6);\n      }\n\n      css.transform += \" \" + prop + \"(\" + value + unit + \")\";\n    };\n  }\n\n  function colorFn(prop, el, steps) {\n    if (steps.length === 1) {\n      steps.unshift(getCssValue(el, prop, ''));\n    }\n\n    steps = steps.map(function (step) {\n      return parseColor(el, step);\n    });\n    return function (css, percent) {\n      var ref = getStep(steps, percent);\n      var start = ref[0];\n      var end = ref[1];\n      var p = ref[2];\n      var value = start.map(function (value, i) {\n        value += p * (end[i] - value);\n        return i === 3 ? toFloat(value) : parseInt(value, 10);\n      }).join(',');\n      css[prop] = \"rgba(\" + value + \")\";\n    };\n  }\n\n  function parseColor(el, color) {\n    return getCssValue(el, 'color', color).split(/[(),]/g).slice(1, -1).concat(1).slice(0, 4).map(toFloat);\n  }\n\n  function filterFn(prop, el, steps) {\n    if (steps.length === 1) {\n      steps.unshift(0);\n    }\n\n    var unit = getUnit(steps) || {\n      blur: 'px',\n      hue: 'deg'\n    }[prop] || '%';\n    prop = {\n      fopacity: 'opacity',\n      hue: 'hue-rotate'\n    }[prop] || prop;\n    steps = steps.map(toFloat);\n    return function (css, percent) {\n      var value = getValue(steps, percent);\n      css.filter += \" \" + prop + \"(\" + (value + unit) + \")\";\n    };\n  }\n\n  function cssPropFn(prop, el, steps) {\n    if (steps.length === 1) {\n      steps.unshift(getCssValue(el, prop, ''));\n    }\n\n    steps = steps.map(toFloat);\n    return function (css, percent) {\n      css[prop] = getValue(steps, percent);\n    };\n  }\n\n  function strokeFn(prop, el, steps) {\n    if (steps.length === 1) {\n      steps.unshift(0);\n    }\n\n    var unit = getUnit(steps);\n    steps = steps.map(toFloat);\n\n    if (!steps.some(function (step) {\n      return step;\n    })) {\n      return noop;\n    }\n\n    var length = getMaxPathLength(el);\n    css(el, 'strokeDasharray', length);\n\n    if (unit === '%') {\n      steps = steps.map(function (step) {\n        return step * length / 100;\n      });\n    }\n\n    steps = steps.reverse();\n    return function (css, percent) {\n      css.strokeDashoffset = getValue(steps, percent);\n    };\n  }\n\n  function backgroundFn(prop, el, steps) {\n    if (steps.length === 1) {\n      steps.unshift(0);\n    }\n\n    prop = prop.substr(-1);\n    var attr = prop === 'y' ? 'height' : 'width';\n    steps = steps.map(function (step) {\n      return toPx(step, attr, el);\n    });\n    css(el, \"background-position-\" + prop, '');\n    var bgPos = css(el, 'backgroundPosition').split(' ')[prop === 'x' ? 0 : 1]; // IE 11 can't read background-position-[x|y]\n\n    return getCssValue(el, 'backgroundSize', '') === 'cover' ? backgroundCoverFn.call(this, prop, el, steps, bgPos, attr) : setBackgroundPosFn(prop, steps, bgPos);\n  }\n\n  function backgroundCoverFn(prop, el, steps, bgPos, attr) {\n    var image = getBackgroundImage.call(this, el);\n\n    if (!image.naturalWidth) {\n      return noop;\n    }\n\n    var min = Math.min.apply(Math, steps);\n    var max = Math.max.apply(Math, steps);\n    var down = steps.indexOf(min) < steps.indexOf(max);\n    var diff = max - min;\n    var pos = (down ? -diff : 0) - (down ? min : max);\n    var dimEl = {\n      width: el.offsetWidth,\n      height: el.offsetHeight\n    };\n    var dimImage = {\n      width: image.naturalWidth,\n      height: image.naturalHeight\n    };\n    var baseDim = Dimensions.cover(dimImage, dimEl);\n    var span = baseDim[attr] - dimEl[attr];\n\n    if (span < diff) {\n      dimEl[attr] = baseDim[attr] + diff - span;\n    } else if (span > diff) {\n      var posPercentage = dimEl[attr] / toPx(bgPos, attr, el, true);\n\n      if (posPercentage) {\n        pos -= (span - diff) / posPercentage;\n      }\n    }\n\n    var dim = Dimensions.cover(dimImage, dimEl);\n    var fn = setBackgroundPosFn(prop, steps, pos + \"px\");\n    return function (css, percent) {\n      fn(css, percent);\n      css.backgroundSize = dim.width + \"px \" + dim.height + \"px\";\n      css.backgroundRepeat = 'no-repeat';\n    };\n  }\n\n  function setBackgroundPosFn(prop, steps, pos) {\n    return function (css, percent) {\n      css[\"background-position-\" + prop] = \"calc(\" + pos + \" + \" + getValue(steps, percent) + \"px)\";\n    };\n  }\n\n  function getBackgroundImage(el) {\n    var this$1$1 = this;\n    var src = css(el, 'backgroundImage').replace(/^none|url\\([\"']?(.+?)[\"']?\\)$/, '$1');\n    var data = this._data;\n\n    if (data[src]) {\n      return data[src];\n    }\n\n    if (src) {\n      var img = new Image();\n      img.src = src;\n\n      if (!img.naturalWidth) {\n        img.onload = function () {\n          return this$1$1.$update();\n        };\n      }\n\n      return data[src] = img;\n    }\n  }\n\n  function getStep(steps, percent) {\n    var count = steps.length - 1;\n    var index = Math.min(Math.floor(count * percent), count - 1);\n    return steps.slice(index, index + 2).concat(percent === 1 ? 1 : percent % (1 / count) * count);\n  }\n\n  function getValue(steps, percent) {\n    var ref = getStep(steps, percent);\n    var start = ref[0];\n    var end = ref[1];\n    var p = ref[2];\n    return isNumber(start) ? start + Math.abs(start - end) * p * (start < end ? 1 : -1) : +end;\n  }\n\n  function getUnit(steps, defaultUnit) {\n    return steps.reduce(function (unit, step) {\n      return unit || isString(step) && step.replace(/[\\d-]/g, '').trim();\n    }, '') || defaultUnit;\n  }\n\n  function getCssValue(el, prop, value) {\n    var prev = el.style[prop];\n    var val = css(css(el, prop, value), prop);\n    el.style[prop] = prev;\n    return val;\n  }\n\n  function fillObject(keys, value) {\n    return keys.reduce(function (data, prop) {\n      data[prop] = value;\n      return data;\n    }, {});\n  }\n\n  var parallax = {\n    mixins: [Parallax],\n    props: {\n      target: String,\n      viewport: Number,\n      // Deprecated\n      easing: Number,\n      start: String,\n      end: String\n    },\n    data: {\n      target: false,\n      viewport: 1,\n      easing: 1,\n      start: 0,\n      end: 0\n    },\n    computed: {\n      target: function (ref, $el) {\n        var target = ref.target;\n        return getOffsetElement(target && query(target, $el) || $el);\n      },\n      start: function (ref) {\n        var start = ref.start;\n        return parseCalc(start, this.target);\n      },\n      end: function (ref) {\n        var end = ref.end;\n        var viewport = ref.viewport;\n        return parseCalc(end || (viewport = (1 - viewport) * 100) && viewport + \"vh+\" + viewport + \"%\", this.target);\n      }\n    },\n    update: {\n      read: function (ref, types) {\n        var percent = ref.percent;\n\n        if (!types.has('scroll')) {\n          percent = false;\n        }\n\n        if (!this.matchMedia) {\n          return;\n        }\n\n        var prev = percent;\n        percent = ease(scrolledOver(this.target, this.start, this.end), this.easing);\n        return {\n          percent: percent,\n          style: prev === percent ? false : this.getCss(percent)\n        };\n      },\n      write: function (ref) {\n        var style = ref.style;\n\n        if (!this.matchMedia) {\n          this.reset();\n          return;\n        }\n\n        style && css(this.$el, style);\n      },\n      events: ['scroll', 'resize']\n    }\n  };\n  var calcRe = /-?\\d+(?:\\.\\d+)?(?:v[wh]|%|px)?/g;\n\n  function parseCalc(calc, el) {\n    var match;\n    var result = 0;\n    calc = calc.toString().replace(/\\s/g, '');\n    calcRe.lastIndex = 0;\n\n    while ((match = calcRe.exec(calc)) !== null) {\n      result += toPx(match[0], 'height', el, true);\n    }\n\n    return result;\n  }\n\n  function ease(percent, easing) {\n    return easing >= 0 ? Math.pow(percent, easing + 1) : 1 - Math.pow(1 - percent, -easing + 1);\n  } // SVG elements do not inherit from HTMLElement\n\n\n  function getOffsetElement(el) {\n    return el ? 'offsetTop' in el ? el : getOffsetElement(parent(el)) : document.documentElement;\n  }\n\n  var SliderReactive = {\n    update: {\n      write: function () {\n        if (this.stack.length || this.dragging) {\n          return;\n        }\n\n        var index = this.getValidIndex(this.index);\n\n        if (!~this.prevIndex || this.index !== index) {\n          this.show(index);\n        }\n      },\n      events: ['resize']\n    }\n  };\n\n  function Transitioner(prev, next, dir, ref) {\n    var center = ref.center;\n    var easing = ref.easing;\n    var list = ref.list;\n    var deferred = new Deferred();\n    var from = prev ? getLeft(prev, list, center) : getLeft(next, list, center) + dimensions(next).width * dir;\n    var to = next ? getLeft(next, list, center) : from + dimensions(prev).width * dir * (isRtl ? -1 : 1);\n    return {\n      dir: dir,\n      show: function (duration, percent, linear) {\n        if (percent === void 0) percent = 0;\n        var timing = linear ? 'linear' : easing;\n        duration -= Math.round(duration * clamp(percent, -1, 1));\n        this.translate(percent);\n        percent = prev ? percent : clamp(percent, 0, 1);\n        triggerUpdate(this.getItemIn(), 'itemin', {\n          percent: percent,\n          duration: duration,\n          timing: timing,\n          dir: dir\n        });\n        prev && triggerUpdate(this.getItemIn(true), 'itemout', {\n          percent: 1 - percent,\n          duration: duration,\n          timing: timing,\n          dir: dir\n        });\n        Transition.start(list, {\n          transform: translate(-to * (isRtl ? -1 : 1), 'px')\n        }, duration, timing).then(deferred.resolve, noop);\n        return deferred.promise;\n      },\n      cancel: function () {\n        Transition.cancel(list);\n      },\n      reset: function () {\n        css(list, 'transform', '');\n      },\n      forward: function (duration, percent) {\n        if (percent === void 0) percent = this.percent();\n        Transition.cancel(list);\n        return this.show(duration, percent, true);\n      },\n      translate: function (percent) {\n        var distance = this.getDistance() * dir * (isRtl ? -1 : 1);\n        css(list, 'transform', translate(clamp(-to + (distance - distance * percent), -getWidth(list), dimensions(list).width) * (isRtl ? -1 : 1), 'px'));\n        var actives = this.getActives();\n        var itemIn = this.getItemIn();\n        var itemOut = this.getItemIn(true);\n        percent = prev ? clamp(percent, -1, 1) : 0;\n        children(list).forEach(function (slide) {\n          var isActive = includes(actives, slide);\n          var isIn = slide === itemIn;\n          var isOut = slide === itemOut;\n          var translateIn = isIn || !isOut && (isActive || dir * (isRtl ? -1 : 1) === -1 ^ getElLeft(slide, list) > getElLeft(prev || next));\n          triggerUpdate(slide, \"itemtranslate\" + (translateIn ? 'in' : 'out'), {\n            dir: dir,\n            percent: isOut ? 1 - percent : isIn ? percent : isActive ? 1 : 0\n          });\n        });\n      },\n      percent: function () {\n        return Math.abs((css(list, 'transform').split(',')[4] * (isRtl ? -1 : 1) + from) / (to - from));\n      },\n      getDistance: function () {\n        return Math.abs(to - from);\n      },\n      getItemIn: function (out) {\n        if (out === void 0) out = false;\n        var actives = this.getActives();\n        var nextActives = inView(list, getLeft(next || prev, list, center));\n\n        if (out) {\n          var temp = actives;\n          actives = nextActives;\n          nextActives = temp;\n        }\n\n        return nextActives[findIndex(nextActives, function (el) {\n          return !includes(actives, el);\n        })];\n      },\n      getActives: function () {\n        return inView(list, getLeft(prev || next, list, center));\n      }\n    };\n  }\n\n  function getLeft(el, list, center) {\n    var left = getElLeft(el, list);\n    return center ? left - centerEl(el, list) : Math.min(left, getMax(list));\n  }\n\n  function getMax(list) {\n    return Math.max(0, getWidth(list) - dimensions(list).width);\n  }\n\n  function getWidth(list) {\n    return children(list).reduce(function (right, el) {\n      return dimensions(el).width + right;\n    }, 0);\n  }\n\n  function centerEl(el, list) {\n    return dimensions(list).width / 2 - dimensions(el).width / 2;\n  }\n\n  function getElLeft(el, list) {\n    return el && (position(el).left + (isRtl ? dimensions(el).width - dimensions(list).width : 0)) * (isRtl ? -1 : 1) || 0;\n  }\n\n  function inView(list, listLeft) {\n    listLeft -= 1;\n    var listWidth = dimensions(list).width;\n    var listRight = listLeft + listWidth + 2;\n    return children(list).filter(function (slide) {\n      var slideLeft = getElLeft(slide, list);\n      var slideRight = slideLeft + Math.min(dimensions(slide).width, listWidth);\n      return slideLeft >= listLeft && slideRight <= listRight;\n    });\n  }\n\n  function triggerUpdate(el, type, data) {\n    trigger(el, createEvent(type, false, false, data));\n  }\n\n  var slider = {\n    mixins: [Class, Slider, SliderReactive],\n    props: {\n      center: Boolean,\n      sets: Boolean\n    },\n    data: {\n      center: false,\n      sets: false,\n      attrItem: 'uk-slider-item',\n      selList: '.uk-slider-items',\n      selNav: '.uk-slider-nav',\n      clsContainer: 'uk-slider-container',\n      Transitioner: Transitioner\n    },\n    computed: {\n      avgWidth: function () {\n        return getWidth(this.list) / this.length;\n      },\n      finite: function (ref) {\n        var finite = ref.finite;\n        return finite || Math.ceil(getWidth(this.list)) < dimensions(this.list).width + getMaxElWidth(this.list) + this.center;\n      },\n      maxIndex: function () {\n        if (!this.finite || this.center && !this.sets) {\n          return this.length - 1;\n        }\n\n        if (this.center) {\n          return last(this.sets);\n        }\n\n        var lft = 0;\n        var max = getMax(this.list);\n        var index = findIndex(this.slides, function (el) {\n          if (lft >= max) {\n            return true;\n          }\n\n          lft += dimensions(el).width;\n        });\n        return ~index ? index : this.length - 1;\n      },\n      sets: function (ref) {\n        var this$1$1 = this;\n        var sets = ref.sets;\n\n        if (!sets) {\n          return;\n        }\n\n        var width = dimensions(this.list).width / (this.center ? 2 : 1);\n        var left = 0;\n        var leftCenter = width;\n        var slideLeft = 0;\n        sets = sortBy$1(this.slides, 'offsetLeft').reduce(function (sets, slide, i) {\n          var slideWidth = dimensions(slide).width;\n          var slideRight = slideLeft + slideWidth;\n\n          if (slideRight > left) {\n            if (!this$1$1.center && i > this$1$1.maxIndex) {\n              i = this$1$1.maxIndex;\n            }\n\n            if (!includes(sets, i)) {\n              var cmp = this$1$1.slides[i + 1];\n\n              if (this$1$1.center && cmp && slideWidth < leftCenter - dimensions(cmp).width / 2) {\n                leftCenter -= slideWidth;\n              } else {\n                leftCenter = width;\n                sets.push(i);\n                left = slideLeft + width + (this$1$1.center ? slideWidth / 2 : 0);\n              }\n            }\n          }\n\n          slideLeft += slideWidth;\n          return sets;\n        }, []);\n        return !isEmpty(sets) && sets;\n      },\n      transitionOptions: function () {\n        return {\n          center: this.center,\n          list: this.list\n        };\n      }\n    },\n    connected: function () {\n      toggleClass(this.$el, this.clsContainer, !$(\".\" + this.clsContainer, this.$el));\n    },\n    update: {\n      write: function () {\n        var this$1$1 = this;\n        this.navItems.forEach(function (el) {\n          var index = toNumber(data(el, this$1$1.attrItem));\n\n          if (index !== false) {\n            el.hidden = !this$1$1.maxIndex || index > this$1$1.maxIndex || this$1$1.sets && !includes(this$1$1.sets, index);\n          }\n        });\n\n        if (this.length && !this.dragging && !this.stack.length) {\n          this.reorder();\n\n          this._translate(1);\n        }\n\n        var actives = this._getTransitioner(this.index).getActives();\n\n        this.slides.forEach(function (slide) {\n          return toggleClass(slide, this$1$1.clsActive, includes(actives, slide));\n        });\n\n        if (this.clsActivated && (!this.sets || includes(this.sets, toFloat(this.index)))) {\n          this.slides.forEach(function (slide) {\n            return toggleClass(slide, this$1$1.clsActivated || '', includes(actives, slide));\n          });\n        }\n      },\n      events: ['resize']\n    },\n    events: {\n      beforeitemshow: function (e) {\n        if (!this.dragging && this.sets && this.stack.length < 2 && !includes(this.sets, this.index)) {\n          this.index = this.getValidIndex();\n        }\n\n        var diff = Math.abs(this.index - this.prevIndex + (this.dir > 0 && this.index < this.prevIndex || this.dir < 0 && this.index > this.prevIndex ? (this.maxIndex + 1) * this.dir : 0));\n\n        if (!this.dragging && diff > 1) {\n          for (var i = 0; i < diff; i++) {\n            this.stack.splice(1, 0, this.dir > 0 ? 'next' : 'previous');\n          }\n\n          e.preventDefault();\n          return;\n        }\n\n        var index = this.dir < 0 || !this.slides[this.prevIndex] ? this.index : this.prevIndex;\n        this.duration = speedUp(this.avgWidth / this.velocity) * (dimensions(this.slides[index]).width / this.avgWidth);\n        this.reorder();\n      },\n      itemshow: function () {\n        if (~this.prevIndex) {\n          addClass(this._getTransitioner().getItemIn(), this.clsActive);\n        }\n      }\n    },\n    methods: {\n      reorder: function () {\n        var this$1$1 = this;\n\n        if (this.finite) {\n          css(this.slides, 'order', '');\n          return;\n        }\n\n        var index = this.dir > 0 && this.slides[this.prevIndex] ? this.prevIndex : this.index;\n        this.slides.forEach(function (slide, i) {\n          return css(slide, 'order', this$1$1.dir > 0 && i < index ? 1 : this$1$1.dir < 0 && i >= this$1$1.index ? -1 : '');\n        });\n\n        if (!this.center) {\n          return;\n        }\n\n        var next = this.slides[index];\n        var width = dimensions(this.list).width / 2 - dimensions(next).width / 2;\n        var j = 0;\n\n        while (width > 0) {\n          var slideIndex = this.getIndex(--j + index, index);\n          var slide = this.slides[slideIndex];\n          css(slide, 'order', slideIndex > index ? -2 : -1);\n          width -= dimensions(slide).width;\n        }\n      },\n      getValidIndex: function (index, prevIndex) {\n        if (index === void 0) index = this.index;\n        if (prevIndex === void 0) prevIndex = this.prevIndex;\n        index = this.getIndex(index, prevIndex);\n\n        if (!this.sets) {\n          return index;\n        }\n\n        var prev;\n\n        do {\n          if (includes(this.sets, index)) {\n            return index;\n          }\n\n          prev = index;\n          index = this.getIndex(index + this.dir, prevIndex);\n        } while (index !== prev);\n\n        return index;\n      }\n    }\n  };\n\n  function getMaxElWidth(list) {\n    return Math.max.apply(Math, [0].concat(children(list).map(function (el) {\n      return dimensions(el).width;\n    })));\n  }\n\n  var sliderParallax = {\n    mixins: [Parallax],\n    data: {\n      selItem: '!li'\n    },\n    computed: {\n      item: function (ref, $el) {\n        var selItem = ref.selItem;\n        return query(selItem, $el);\n      }\n    },\n    events: [{\n      name: 'itemin itemout',\n      self: true,\n      el: function () {\n        return this.item;\n      },\n      handler: function (ref) {\n        var this$1$1 = this;\n        var type = ref.type;\n        var ref_detail = ref.detail;\n        var percent = ref_detail.percent;\n        var duration = ref_detail.duration;\n        var timing = ref_detail.timing;\n        var dir = ref_detail.dir;\n        fastdom.read(function () {\n          var propsFrom = this$1$1.getCss(getCurrentPercent(type, dir, percent));\n          var propsTo = this$1$1.getCss(isIn(type) ? .5 : dir > 0 ? 1 : 0);\n          fastdom.write(function () {\n            css(this$1$1.$el, propsFrom);\n            Transition.start(this$1$1.$el, propsTo, duration, timing).catch(noop);\n          });\n        });\n      }\n    }, {\n      name: 'transitioncanceled transitionend',\n      self: true,\n      el: function () {\n        return this.item;\n      },\n      handler: function () {\n        Transition.cancel(this.$el);\n      }\n    }, {\n      name: 'itemtranslatein itemtranslateout',\n      self: true,\n      el: function () {\n        return this.item;\n      },\n      handler: function (ref) {\n        var this$1$1 = this;\n        var type = ref.type;\n        var ref_detail = ref.detail;\n        var percent = ref_detail.percent;\n        var dir = ref_detail.dir;\n        fastdom.read(function () {\n          var props = this$1$1.getCss(getCurrentPercent(type, dir, percent));\n          fastdom.write(function () {\n            return css(this$1$1.$el, props);\n          });\n        });\n      }\n    }]\n  };\n\n  function isIn(type) {\n    return endsWith(type, 'in');\n  }\n\n  function getCurrentPercent(type, dir, percent) {\n    percent /= 2;\n    return isIn(type) ^ dir < 0 ? percent : 1 - percent;\n  }\n\n  var Animations = assign({}, Animations$2, {\n    fade: {\n      show: function () {\n        return [{\n          opacity: 0,\n          zIndex: 0\n        }, {\n          zIndex: -1\n        }];\n      },\n      percent: function (current) {\n        return 1 - css(current, 'opacity');\n      },\n      translate: function (percent) {\n        return [{\n          opacity: 1 - percent,\n          zIndex: 0\n        }, {\n          zIndex: -1\n        }];\n      }\n    },\n    scale: {\n      show: function () {\n        return [{\n          opacity: 0,\n          transform: scale3d(1 + .5),\n          zIndex: 0\n        }, {\n          zIndex: -1\n        }];\n      },\n      percent: function (current) {\n        return 1 - css(current, 'opacity');\n      },\n      translate: function (percent) {\n        return [{\n          opacity: 1 - percent,\n          transform: scale3d(1 + .5 * percent),\n          zIndex: 0\n        }, {\n          zIndex: -1\n        }];\n      }\n    },\n    pull: {\n      show: function (dir) {\n        return dir < 0 ? [{\n          transform: translate(30),\n          zIndex: -1\n        }, {\n          transform: translate(),\n          zIndex: 0\n        }] : [{\n          transform: translate(-100),\n          zIndex: 0\n        }, {\n          transform: translate(),\n          zIndex: -1\n        }];\n      },\n      percent: function (current, next, dir) {\n        return dir < 0 ? 1 - translated(next) : translated(current);\n      },\n      translate: function (percent, dir) {\n        return dir < 0 ? [{\n          transform: translate(30 * percent),\n          zIndex: -1\n        }, {\n          transform: translate(-100 * (1 - percent)),\n          zIndex: 0\n        }] : [{\n          transform: translate(-percent * 100),\n          zIndex: 0\n        }, {\n          transform: translate(30 * (1 - percent)),\n          zIndex: -1\n        }];\n      }\n    },\n    push: {\n      show: function (dir) {\n        return dir < 0 ? [{\n          transform: translate(100),\n          zIndex: 0\n        }, {\n          transform: translate(),\n          zIndex: -1\n        }] : [{\n          transform: translate(-30),\n          zIndex: -1\n        }, {\n          transform: translate(),\n          zIndex: 0\n        }];\n      },\n      percent: function (current, next, dir) {\n        return dir > 0 ? 1 - translated(next) : translated(current);\n      },\n      translate: function (percent, dir) {\n        return dir < 0 ? [{\n          transform: translate(percent * 100),\n          zIndex: 0\n        }, {\n          transform: translate(-30 * (1 - percent)),\n          zIndex: -1\n        }] : [{\n          transform: translate(-30 * percent),\n          zIndex: -1\n        }, {\n          transform: translate(100 * (1 - percent)),\n          zIndex: 0\n        }];\n      }\n    }\n  });\n  var slideshow = {\n    mixins: [Class, Slideshow, SliderReactive],\n    props: {\n      ratio: String,\n      minHeight: Number,\n      maxHeight: Number\n    },\n    data: {\n      ratio: '16:9',\n      minHeight: false,\n      maxHeight: false,\n      selList: '.uk-slideshow-items',\n      attrItem: 'uk-slideshow-item',\n      selNav: '.uk-slideshow-nav',\n      Animations: Animations\n    },\n    update: {\n      read: function () {\n        if (!this.list) {\n          return false;\n        }\n\n        var ref = this.ratio.split(':').map(Number);\n        var width = ref[0];\n        var height = ref[1];\n        height = height * this.list.offsetWidth / width || 0;\n\n        if (this.minHeight) {\n          height = Math.max(this.minHeight, height);\n        }\n\n        if (this.maxHeight) {\n          height = Math.min(this.maxHeight, height);\n        }\n\n        return {\n          height: height - boxModelAdjust(this.list, 'height', 'content-box')\n        };\n      },\n      write: function (ref) {\n        var height = ref.height;\n        height > 0 && css(this.list, 'minHeight', height);\n      },\n      events: ['resize']\n    }\n  };\n  var sortable = {\n    mixins: [Class, Animate],\n    props: {\n      group: String,\n      threshold: Number,\n      clsItem: String,\n      clsPlaceholder: String,\n      clsDrag: String,\n      clsDragState: String,\n      clsBase: String,\n      clsNoDrag: String,\n      clsEmpty: String,\n      clsCustom: String,\n      handle: String\n    },\n    data: {\n      group: false,\n      threshold: 5,\n      clsItem: 'uk-sortable-item',\n      clsPlaceholder: 'uk-sortable-placeholder',\n      clsDrag: 'uk-sortable-drag',\n      clsDragState: 'uk-drag',\n      clsBase: 'uk-sortable',\n      clsNoDrag: 'uk-sortable-nodrag',\n      clsEmpty: 'uk-sortable-empty',\n      clsCustom: '',\n      handle: false,\n      pos: {}\n    },\n    created: function () {\n      var this$1$1 = this;\n      ['init', 'start', 'move', 'end'].forEach(function (key) {\n        var fn = this$1$1[key];\n\n        this$1$1[key] = function (e) {\n          assign(this$1$1.pos, getEventPos(e));\n          fn(e);\n        };\n      });\n    },\n    events: {\n      name: pointerDown,\n      passive: false,\n      handler: 'init'\n    },\n    computed: {\n      target: function () {\n        return (this.$el.tBodies || [this.$el])[0];\n      },\n      items: function () {\n        return children(this.target);\n      },\n      isEmpty: {\n        get: function () {\n          return isEmpty(this.items);\n        },\n        watch: function (empty) {\n          toggleClass(this.target, this.clsEmpty, empty);\n        },\n        immediate: true\n      },\n      handles: {\n        get: function (ref, el) {\n          var handle = ref.handle;\n          return handle ? $$(handle, el) : this.items;\n        },\n        watch: function (handles, prev) {\n          css(prev, {\n            touchAction: '',\n            userSelect: ''\n          });\n          css(handles, {\n            touchAction: hasTouch ? 'none' : '',\n            userSelect: 'none'\n          }); // touchAction set to 'none' causes a performance drop in Chrome 80\n        },\n        immediate: true\n      }\n    },\n    update: {\n      write: function (data) {\n        if (!this.drag || !parent(this.placeholder)) {\n          return;\n        }\n\n        var ref = this;\n        var ref_pos = ref.pos;\n        var x = ref_pos.x;\n        var y = ref_pos.y;\n        var ref_origin = ref.origin;\n        var offsetTop = ref_origin.offsetTop;\n        var offsetLeft = ref_origin.offsetLeft;\n        var placeholder = ref.placeholder;\n        css(this.drag, {\n          top: y - offsetTop,\n          left: x - offsetLeft\n        });\n        var sortable = this.getSortable(document.elementFromPoint(x, y));\n\n        if (!sortable) {\n          return;\n        }\n\n        var items = sortable.items;\n\n        if (items.some(Transition.inProgress)) {\n          return;\n        }\n\n        var target = findTarget(items, {\n          x: x,\n          y: y\n        });\n\n        if (items.length && (!target || target === placeholder)) {\n          return;\n        }\n\n        var previous = this.getSortable(placeholder);\n        var insertTarget = findInsertTarget(sortable.target, target, placeholder, x, y, sortable === previous && data.moved !== target);\n\n        if (insertTarget === false) {\n          return;\n        }\n\n        if (insertTarget && placeholder === insertTarget) {\n          return;\n        }\n\n        if (sortable !== previous) {\n          previous.remove(placeholder);\n          data.moved = target;\n        } else {\n          delete data.moved;\n        }\n\n        sortable.insert(placeholder, insertTarget);\n        this.touched.add(sortable);\n      },\n      events: ['move']\n    },\n    methods: {\n      init: function (e) {\n        var target = e.target;\n        var button = e.button;\n        var defaultPrevented = e.defaultPrevented;\n        var ref = this.items.filter(function (el) {\n          return within(target, el);\n        });\n        var placeholder = ref[0];\n\n        if (!placeholder || defaultPrevented || button > 0 || isInput(target) || within(target, \".\" + this.clsNoDrag) || this.handle && !within(target, this.handle)) {\n          return;\n        }\n\n        e.preventDefault();\n        this.touched = new Set([this]);\n        this.placeholder = placeholder;\n        this.origin = assign({\n          target: target,\n          index: index(placeholder)\n        }, this.pos);\n        on(document, pointerMove, this.move);\n        on(document, pointerUp, this.end);\n\n        if (!this.threshold) {\n          this.start(e);\n        }\n      },\n      start: function (e) {\n        this.drag = appendDrag(this.$container, this.placeholder);\n        var ref = this.placeholder.getBoundingClientRect();\n        var left = ref.left;\n        var top = ref.top;\n        assign(this.origin, {\n          offsetLeft: this.pos.x - left,\n          offsetTop: this.pos.y - top\n        });\n        addClass(this.drag, this.clsDrag, this.clsCustom);\n        addClass(this.placeholder, this.clsPlaceholder);\n        addClass(this.items, this.clsItem);\n        addClass(document.documentElement, this.clsDragState);\n        trigger(this.$el, 'start', [this, this.placeholder]);\n        trackScroll(this.pos);\n        this.move(e);\n      },\n      move: function (e) {\n        if (this.drag) {\n          this.$emit('move');\n        } else if (Math.abs(this.pos.x - this.origin.x) > this.threshold || Math.abs(this.pos.y - this.origin.y) > this.threshold) {\n          this.start(e);\n        }\n      },\n      end: function () {\n        var this$1$1 = this;\n        off(document, pointerMove, this.move);\n        off(document, pointerUp, this.end);\n        off(window, 'scroll', this.scroll);\n\n        if (!this.drag) {\n          return;\n        }\n\n        untrackScroll();\n        var sortable = this.getSortable(this.placeholder);\n\n        if (this === sortable) {\n          if (this.origin.index !== index(this.placeholder)) {\n            trigger(this.$el, 'moved', [this, this.placeholder]);\n          }\n        } else {\n          trigger(sortable.$el, 'added', [sortable, this.placeholder]);\n          trigger(this.$el, 'removed', [this, this.placeholder]);\n        }\n\n        trigger(this.$el, 'stop', [this, this.placeholder]);\n        remove$1(this.drag);\n        this.drag = null;\n        this.touched.forEach(function (ref) {\n          var clsPlaceholder = ref.clsPlaceholder;\n          var clsItem = ref.clsItem;\n          return this$1$1.touched.forEach(function (sortable) {\n            return removeClass(sortable.items, clsPlaceholder, clsItem);\n          });\n        });\n        this.touched = null;\n        removeClass(document.documentElement, this.clsDragState);\n      },\n      insert: function (element, target) {\n        var this$1$1 = this;\n        addClass(this.items, this.clsItem);\n\n        var insert = function () {\n          return target ? before(target, element) : append(this$1$1.target, element);\n        };\n\n        this.animate(insert);\n      },\n      remove: function (element) {\n        if (!within(element, this.target)) {\n          return;\n        }\n\n        this.animate(function () {\n          return remove$1(element);\n        });\n      },\n      getSortable: function (element) {\n        do {\n          var sortable = this.$getComponent(element, 'sortable');\n\n          if (sortable && (sortable === this || this.group !== false && sortable.group === this.group)) {\n            return sortable;\n          }\n        } while (element = parent(element));\n      }\n    }\n  };\n  var trackTimer;\n\n  function trackScroll(pos) {\n    var last = Date.now();\n    trackTimer = setInterval(function () {\n      var x = pos.x;\n      var y = pos.y;\n      y += window.pageYOffset;\n      var dist = (Date.now() - last) * .3;\n      last = Date.now();\n      scrollParents(document.elementFromPoint(x, pos.y), /auto|scroll/).reverse().some(function (scrollEl) {\n        var scroll = scrollEl.scrollTop;\n        var scrollHeight = scrollEl.scrollHeight;\n        var ref = offset(getViewport$1(scrollEl));\n        var top = ref.top;\n        var bottom = ref.bottom;\n        var height = ref.height;\n\n        if (top < y && top + 35 > y) {\n          scroll -= dist;\n        } else if (bottom > y && bottom - 35 < y) {\n          scroll += dist;\n        } else {\n          return;\n        }\n\n        if (scroll > 0 && scroll < scrollHeight - height) {\n          scrollTop(scrollEl, scroll);\n          return true;\n        }\n      });\n    }, 15);\n  }\n\n  function untrackScroll() {\n    clearInterval(trackTimer);\n  }\n\n  function appendDrag(container, element) {\n    var clone = append(container, element.outerHTML.replace(/(^<)(?:li|tr)|(?:li|tr)(\\/>$)/g, '$1div$2'));\n    css(clone, 'margin', '0', 'important');\n    css(clone, assign({\n      boxSizing: 'border-box',\n      width: element.offsetWidth,\n      height: element.offsetHeight\n    }, css(element, ['paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom'])));\n    height(clone.firstElementChild, height(element.firstElementChild));\n    return clone;\n  }\n\n  function findTarget(items, point) {\n    return items[findIndex(items, function (item) {\n      return pointInRect(point, item.getBoundingClientRect());\n    })];\n  }\n\n  function findInsertTarget(list, target, placeholder, x, y, sameList) {\n    if (!children(list).length) {\n      return;\n    }\n\n    var rect = target.getBoundingClientRect();\n\n    if (!sameList) {\n      if (!isHorizontal(list, placeholder)) {\n        return y < rect.top + rect.height / 2 ? target : target.nextElementSibling;\n      }\n\n      return target;\n    }\n\n    var placeholderRect = placeholder.getBoundingClientRect();\n    var sameRow = linesIntersect([rect.top, rect.bottom], [placeholderRect.top, placeholderRect.bottom]);\n    var pointerPos = sameRow ? x : y;\n    var lengthProp = sameRow ? 'width' : 'height';\n    var startProp = sameRow ? 'left' : 'top';\n    var endProp = sameRow ? 'right' : 'bottom';\n    var diff = placeholderRect[lengthProp] < rect[lengthProp] ? rect[lengthProp] - placeholderRect[lengthProp] : 0;\n\n    if (placeholderRect[startProp] < rect[startProp]) {\n      if (diff && pointerPos < rect[startProp] + diff) {\n        return false;\n      }\n\n      return target.nextElementSibling;\n    }\n\n    if (diff && pointerPos > rect[endProp] - diff) {\n      return false;\n    }\n\n    return target;\n  }\n\n  function isHorizontal(list, placeholder) {\n    var single = children(list).length === 1;\n\n    if (single) {\n      append(list, placeholder);\n    }\n\n    var items = children(list);\n    var isHorizontal = items.some(function (el, i) {\n      var rectA = el.getBoundingClientRect();\n      return items.slice(i + 1).some(function (el) {\n        var rectB = el.getBoundingClientRect();\n        return !linesIntersect([rectA.left, rectA.right], [rectB.left, rectB.right]);\n      });\n    });\n\n    if (single) {\n      remove$1(placeholder);\n    }\n\n    return isHorizontal;\n  }\n\n  function linesIntersect(lineA, lineB) {\n    return lineA[1] > lineB[0] && lineB[1] > lineA[0];\n  }\n\n  var obj;\n  var tooltip = {\n    mixins: [Container, Togglable, Position],\n    args: 'title',\n    props: {\n      delay: Number,\n      title: String\n    },\n    data: {\n      pos: 'top',\n      title: '',\n      delay: 0,\n      animation: ['uk-animation-scale-up'],\n      duration: 100,\n      cls: 'uk-active',\n      clsPos: 'uk-tooltip'\n    },\n    beforeConnect: function () {\n      this._hasTitle = hasAttr(this.$el, 'title');\n      attr(this.$el, 'title', '');\n      this.updateAria(false);\n      makeFocusable(this.$el);\n    },\n    disconnected: function () {\n      this.hide();\n      attr(this.$el, 'title', this._hasTitle ? this.title : null);\n    },\n    methods: {\n      show: function () {\n        var this$1$1 = this;\n\n        if (this.isToggled(this.tooltip || null) || !this.title) {\n          return;\n        }\n\n        this._unbind = once(document, \"show keydown \" + pointerDown, this.hide, false, function (e) {\n          return e.type === pointerDown && !within(e.target, this$1$1.$el) || e.type === 'keydown' && e.keyCode === 27 || e.type === 'show' && e.detail[0] !== this$1$1 && e.detail[0].$name === this$1$1.$name;\n        });\n        clearTimeout(this.showTimer);\n        this.showTimer = setTimeout(this._show, this.delay);\n      },\n      hide: function () {\n        var this$1$1 = this;\n\n        if (matches(this.$el, 'input:focus')) {\n          return;\n        }\n\n        clearTimeout(this.showTimer);\n\n        if (!this.isToggled(this.tooltip || null)) {\n          return;\n        }\n\n        this.toggleElement(this.tooltip, false, false).then(function () {\n          remove$1(this$1$1.tooltip);\n          this$1$1.tooltip = null;\n\n          this$1$1._unbind();\n        });\n      },\n      _show: function () {\n        var this$1$1 = this;\n        this.tooltip = append(this.container, \"<div class=\\\"\" + this.clsPos + \"\\\"> <div class=\\\"\" + this.clsPos + \"-inner\\\">\" + this.title + \"</div> </div>\");\n        on(this.tooltip, 'toggled', function (e, toggled) {\n          this$1$1.updateAria(toggled);\n\n          if (!toggled) {\n            return;\n          }\n\n          this$1$1.positionAt(this$1$1.tooltip, this$1$1.$el);\n          this$1$1.origin = this$1$1.getAxis() === 'y' ? flipPosition(this$1$1.dir) + \"-\" + this$1$1.align : this$1$1.align + \"-\" + flipPosition(this$1$1.dir);\n        });\n        this.toggleElement(this.tooltip, true);\n      },\n      updateAria: function (toggled) {\n        attr(this.$el, 'aria-expanded', toggled);\n      }\n    },\n    events: (obj = {\n      focus: 'show',\n      blur: 'hide'\n    }, obj[pointerEnter + \" \" + pointerLeave] = function (e) {\n      if (!isTouch(e)) {\n        this[e.type === pointerEnter ? 'show' : 'hide']();\n      }\n    }, obj[pointerDown] = function (e) {\n      if (isTouch(e)) {\n        this.show();\n      }\n    }, obj)\n  };\n\n  function makeFocusable(el) {\n    if (!isFocusable(el)) {\n      attr(el, 'tabindex', '0');\n    }\n  }\n\n  var upload = {\n    props: {\n      allow: String,\n      clsDragover: String,\n      concurrent: Number,\n      maxSize: Number,\n      method: String,\n      mime: String,\n      msgInvalidMime: String,\n      msgInvalidName: String,\n      msgInvalidSize: String,\n      multiple: Boolean,\n      name: String,\n      params: Object,\n      type: String,\n      url: String\n    },\n    data: {\n      allow: false,\n      clsDragover: 'uk-dragover',\n      concurrent: 1,\n      maxSize: 0,\n      method: 'POST',\n      mime: false,\n      msgInvalidMime: 'Invalid File Type: %s',\n      msgInvalidName: 'Invalid File Name: %s',\n      msgInvalidSize: 'Invalid File Size: %s Kilobytes Max',\n      multiple: false,\n      name: 'files[]',\n      params: {},\n      type: '',\n      url: '',\n      abort: noop,\n      beforeAll: noop,\n      beforeSend: noop,\n      complete: noop,\n      completeAll: noop,\n      error: noop,\n      fail: noop,\n      load: noop,\n      loadEnd: noop,\n      loadStart: noop,\n      progress: noop\n    },\n    events: {\n      change: function (e) {\n        if (!matches(e.target, 'input[type=\"file\"]')) {\n          return;\n        }\n\n        e.preventDefault();\n\n        if (e.target.files) {\n          this.upload(e.target.files);\n        }\n\n        e.target.value = '';\n      },\n      drop: function (e) {\n        stop(e);\n        var transfer = e.dataTransfer;\n\n        if (!transfer || !transfer.files) {\n          return;\n        }\n\n        removeClass(this.$el, this.clsDragover);\n        this.upload(transfer.files);\n      },\n      dragenter: function (e) {\n        stop(e);\n      },\n      dragover: function (e) {\n        stop(e);\n        addClass(this.$el, this.clsDragover);\n      },\n      dragleave: function (e) {\n        stop(e);\n        removeClass(this.$el, this.clsDragover);\n      }\n    },\n    methods: {\n      upload: function (files) {\n        var this$1$1 = this;\n\n        if (!files.length) {\n          return;\n        }\n\n        trigger(this.$el, 'upload', [files]);\n\n        for (var i = 0; i < files.length; i++) {\n          if (this.maxSize && this.maxSize * 1000 < files[i].size) {\n            this.fail(this.msgInvalidSize.replace('%s', this.maxSize));\n            return;\n          }\n\n          if (this.allow && !match(this.allow, files[i].name)) {\n            this.fail(this.msgInvalidName.replace('%s', this.allow));\n            return;\n          }\n\n          if (this.mime && !match(this.mime, files[i].type)) {\n            this.fail(this.msgInvalidMime.replace('%s', this.mime));\n            return;\n          }\n        }\n\n        if (!this.multiple) {\n          files = [files[0]];\n        }\n\n        this.beforeAll(this, files);\n        var chunks = chunk(files, this.concurrent);\n\n        var upload = function (files) {\n          var data = new FormData();\n          files.forEach(function (file) {\n            return data.append(this$1$1.name, file);\n          });\n\n          for (var key in this$1$1.params) {\n            data.append(key, this$1$1.params[key]);\n          }\n\n          ajax(this$1$1.url, {\n            data: data,\n            method: this$1$1.method,\n            responseType: this$1$1.type,\n            beforeSend: function (env) {\n              var xhr = env.xhr;\n              xhr.upload && on(xhr.upload, 'progress', this$1$1.progress);\n              ['loadStart', 'load', 'loadEnd', 'abort'].forEach(function (type) {\n                return on(xhr, type.toLowerCase(), this$1$1[type]);\n              });\n              return this$1$1.beforeSend(env);\n            }\n          }).then(function (xhr) {\n            this$1$1.complete(xhr);\n\n            if (chunks.length) {\n              upload(chunks.shift());\n            } else {\n              this$1$1.completeAll(xhr);\n            }\n          }, function (e) {\n            return this$1$1.error(e);\n          });\n        };\n\n        upload(chunks.shift());\n      }\n    }\n  };\n\n  function match(pattern, path) {\n    return path.match(new RegExp(\"^\" + pattern.replace(/\\//g, '\\\\/').replace(/\\*\\*/g, '(\\\\/[^\\\\/]+)*').replace(/\\*/g, '[^\\\\/]+').replace(/((?!\\\\))\\?/g, '$1.') + \"$\", 'i'));\n  }\n\n  function chunk(files, size) {\n    var chunks = [];\n\n    for (var i = 0; i < files.length; i += size) {\n      var chunk = [];\n\n      for (var j = 0; j < size; j++) {\n        chunk.push(files[i + j]);\n      }\n\n      chunks.push(chunk);\n    }\n\n    return chunks;\n  }\n\n  function stop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  var components = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Countdown: countdown,\n    Filter: filter,\n    Lightbox: lightbox,\n    LightboxPanel: LightboxPanel,\n    Notification: notification,\n    Parallax: parallax,\n    Slider: slider,\n    SliderParallax: sliderParallax,\n    Slideshow: slideshow,\n    SlideshowParallax: sliderParallax,\n    Sortable: sortable,\n    Tooltip: tooltip,\n    Upload: upload\n  });\n  each(components, function (component, name) {\n    return UIkit.component(name, component);\n  });\n  return UIkit;\n});\n\n//# sourceURL=webpack://baby-yoda/./node_modules/uikit/dist/js/uikit.js?");

/***/ }),

/***/ "./resources/src/index.js":
/*!********************************!*\
  !*** ./resources/src/index.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("__webpack_require__(/*! uikit */ \"./node_modules/uikit/dist/js/uikit.js\");\n\nfunction goTo(id) {\n  document.getElementById(id).scrollIntoView();\n  UIkit.modal(document.getElementById('navigation')).hide();\n}\n\nwindow.goTo = goTo;\n\n//# sourceURL=webpack://baby-yoda/./resources/src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/src/index.js");
/******/ 	
/******/ })()
;